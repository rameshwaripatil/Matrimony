
    	
    (function($){  
	$.fn.ticker = function(options) { 
		// Extend our default options with those provided.
		// Note that the first arg to extend is an empty object -d
		// this is to keep from overriding our "defaults" object.
		var opts = $.extend({}, $.fn.ticker.defaults, options); 

		// check that the passed element is actually in the DOM
		if ($(this).length == 0) {
			if (window.console && window.console.log) {
				window.console.log('Element does not exist in DOM!');
			}
			else {
				alert('Element does not exist in DOM!');		
			}
			return false;
		}
		
		/* Get the id of the UL to get our news content from */
		var newsID = '#' + $(this).attr('id');

		/* Get the tag type - we will check this later to makde sure it is a UL tag */
		var tagType = $(this).get(0).tagName; 	

		return this.each(function() { 
			// get a unique id for this ticker
			var uniqID = getUniqID();
			
			/* Internal vars */
			var settings = {				
				position: 0,
				time: 0,
				distance: 0,
				newsArr: {},
				play: true,
				paused: false,
				contentLoaded: false,
				dom: {
					contentID: '#ticker-content-' + uniqID,
					titleID: '#ticker-title-' + uniqID,
					titleElem: '#ticker-title-' + uniqID + ' SPAN',
					tickerID : '#ticker-' + uniqID,
					wrapperID: '#ticker-wrapper-' + uniqID,
					revealID: '#ticker-swipe-' + uniqID,
					revealElem: '#ticker-swipe-' + uniqID + ' SPAN',
					controlsID: '#ticker-controls-' + uniqID,
					prevID: '#prev-' + uniqID,
					nextID: '#next-' + uniqID,
					playPauseID: '#play-pause-' + uniqID
				}
			};

			// if we are not using a UL, display an error message and stop any further execution
			if (tagType != 'UL' && tagType != 'OL' && opts.htmlFeed === true) {
				debugError('Cannot use <' + tagType.toLowerCase() + '> type of element for this plugin - must of type <ul> or <ol>');
				return false;
			}

			// set the ticker direction
			opts.direction == 'rtl' ? opts.direction = 'right' : opts.direction = 'left';
			
			// lets go...
			initialisePage();
			/* Function to get the size of an Object*/
			function countSize(obj) {
			    var size = 0, key;
			    for (key in obj) {
			        if (obj.hasOwnProperty(key)) size++;
			    }
			    return size;
			};

			function getUniqID() {
				var newDate = new Date;
				return newDate.getTime();			
			}
			
			/* Function for handling debug and error messages */ 
			function debugError(obj) {
				if (opts.debugMode) {
					if (window.console && window.console.log) {
						window.console.log(obj);
					}
					else {
						alert(obj);			
					}
				}
			}

			/* Function to setup the page */
			function initialisePage() {
				// process the content for this ticker
				processContent();
				
				// add our HTML structure for the ticker to the DOM
				$(newsID).wrap('<div id="' + settings.dom.wrapperID.replace('#', '') + '"></div>');
				
				// remove any current content inside this ticker
				$(settings.dom.wrapperID).children().remove();
				
				$(settings.dom.wrapperID).append('<div id="' + settings.dom.tickerID.replace('#', '') + '" class="ticker"><div id="' + settings.dom.titleID.replace('#', '') + '" class="ticker-title"><span><!-- --></span></div><p class="ticker-content"> <span id="' + settings.dom.contentID.replace('#', '') + '" ></span></p><div id="' + settings.dom.revealID.replace('#', '') + '" class="ticker-swipe"><span><!-- --></span></div></div>');
				$(settings.dom.wrapperID).removeClass('no-js').addClass('ticker-wrapper has-js ' + opts.direction);
				// hide the ticker
				$(settings.dom.tickerElem + ',' + settings.dom.contentID).hide();
				// add the controls to the DOM if required
				if (opts.controls) {
					// add related events - set functions to run on given event
					$(settings.dom.controlsID).live('click mouseover mousedown mouseout mouseup', function (e) {
						var button = e.target.id;
						
						if(!button){
						    button = $(e.target).closest('[id]').attr('id');
						}
						
						if (e.type == 'click') {	
							switch (button) {
								case settings.dom.prevID.replace('#', ''):
									// show previous item
									settings.paused = true;
									$(settings.dom.playPauseID).addClass('paused');
									manualChangeContent('prev');
									break;
								case settings.dom.nextID.replace('#', ''):
									// show next item
									settings.paused = true;
									$(settings.dom.playPauseID).addClass('paused');
									manualChangeContent('next');
									break;
								case settings.dom.playPauseID.replace('#', ''):
									// play or pause the ticker
									if (settings.play == true) {
										settings.paused = true;
										$(settings.dom.playPauseID).addClass('paused');
										pauseTicker();
									}
									else {
										settings.paused = false;
										$(settings.dom.playPauseID).removeClass('paused');
										restartTicker();
									}
									break;
							}	
						}
						else if (e.type == 'mouseover' && $('#' + button).hasClass('controls')) {
							$('#' + button).addClass('over');
						}
						else if (e.type == 'mousedown' && $('#' + button).hasClass('controls')) {
							$('#' + button).addClass('down');
						}
						else if (e.type == 'mouseup' && $('#' + button).hasClass('controls')) {
							$('#' + button).removeClass('down');
						}
						else if (e.type == 'mouseout' && $('#' + button).hasClass('controls')) {
							$('#' + button).removeClass('over');
						}
					});
					// add controls HTML to DOM
					$(settings.dom.wrapperID).append('<ul id="' + settings.dom.controlsID.replace('#', '') + '" class="ticker-controls"><li id="' + settings.dom.prevID.replace('#', '') + '" class="jnt-prev controls"><a href="javascript:void(0)"><!-- --></a></li><li id="' + settings.dom.playPauseID.replace('#', '') + '" class="jnt-play-pause controls"><a href="javascript:void(0)"><!-- --></a></li><li id="' + settings.dom.nextID.replace('#', '') + '" class="jnt-next controls"><a href="javascript:void(0)"><!-- --></a></li></ul><a class="mailer_icon" title="Subscribe to Newsletter" href=/newsletterhome.cms?utm_source=' + window.location.href + '&utm_medium=referral&utm_campaign=breakingnewsletter ></a>');
				}
				if (opts.displayType != 'fade') {
				    //Anurag - Commented mouse over and mouse out events on displayType:Reveal
                	// add mouse over on the content
               	/*	$(settings.dom.contentID).mouseover(function () {
               			if (settings.paused == false) {
               			   pauseTicker();
               			}
               		}).mouseout(function () {
               			if (settings.paused == false) {
               				restartTicker();
               			}
               		}); */
				}
				// we may have to wait for the ajax call to finish here
				if (!opts.ajaxFeed) {
				     //settings.nextnewslock = 0;
					setupContentAndTriggerDisplay();
				
				}
			}

			/* Start to process the content for this ticker */
			function processContent() {
				// check to see if we need to load content
				if (settings.contentLoaded == false) {
					// construct content
					if (opts.ajaxFeed) {
						if (opts.feedType == 'xml') {							
							$.ajax({
								url: opts.feedUrl,
								cache: false,
								dataType: opts.feedType,
								async: true,
								success: function(data){
									count = 0;	
									// get the 'root' node
									for (var a = 0; a < data.childNodes.length; a++) {
										if (data.childNodes[a].nodeName == 'rss') {
											xmlContent = data.childNodes[a];
										}
									}
									// find the channel node
									for (var i = 0; i < xmlContent.childNodes.length; i++) {
										if (xmlContent.childNodes[i].nodeName == 'channel') {
											xmlChannel = xmlContent.childNodes[i];
										}		
									}
									// for each item create a link and add the article title as the link text
									for (var x = 0; x < xmlChannel.childNodes.length; x++) {
										if (xmlChannel.childNodes[x].nodeName == 'item') {
											xmlItems = xmlChannel.childNodes[x];
											var title, link = false;
											for (var y = 0; y < xmlItems.childNodes.length; y++) {
												if (xmlItems.childNodes[y].nodeName == 'title') {      												    
													title = xmlItems.childNodes[y].lastChild.nodeValue;
												}
												else if (xmlItems.childNodes[y].nodeName == 'link') {												    
													link = xmlItems.childNodes[y].lastChild.nodeValue; 
												}
												if ((title !== false && title != '') && link !== false) {
												    settings.newsArr['item-' + count] = { type: opts.titleText, content: '<a href="' + link + '">' + title + '</a>' };												    count++;												    title = false;												    link = false;
												}
											}	
										}		
									}			
									// quick check here to see if we actually have any content - log error if not
									if (countSize(settings.newsArr < 1)) {
										debugError('Couldn\'t find any content from the XML feed for the ticker to use!');
										return false;
									}
									settings.contentLoaded = true;
									setupContentAndTriggerDisplay();
								}
							});							
						}
						else {
							debugError('Code Me!');	
						}						
					}
					else if (opts.htmlFeed) { 
						if($(newsID + ' LI').length > 0) {
							$(newsID + ' LI').each(function (i) {
								// maybe this could be one whole object and not an array of objects?
								settings.newsArr['item-' + i] = { type: opts.titleText, content: $(this).html()};
							});		
						}	
						else {
							debugError('Couldn\'t find HTML any content for the ticker to use!');
							return false;
						}
					}
					else {
						debugError('The ticker is set to not use any types of content! Check the settings for the ticker.');
						return false;
					}					
				}			
			}
			function setupContentAndTriggerDisplay() {
               	settings.contentLoaded = true;
                settings.nextnewslock = 0;//anurag - my default variable to stop animation
                //settings.noAniforFirst = 0;
				// update the ticker content with the correct item
				// insert news content into DOM
				
    				$(settings.dom.titleElem).html(settings.newsArr['item-' + settings.position].type);
    				$(settings.dom.contentID).html(settings.newsArr['item-' + settings.position].content);
    				var dataLen = $(settings.dom.contentID).text();
    				$('.ticker-content').css('margin-left','0px');
    					$('.ticker-content span').css('margin-left','0px');
    					var desk_data_len = 90;
    				//	 var iOS = ( navigator.userAgent.match(/(iPad)/g) ? true : false );
    				         //   if(iOS){$('.ticker-content span').css('font-size','55%');
    				          //  $('.ticker-title span').css('font-size','80%');
    				          //  $('.ticker-title').css('width','180px');
    				               //desk_data_len = 45;
    				          //  }
    				        var win_outer_wid= window.innerWidth;
    				       
                            if(win_outer_wid >= 768 && win_outer_wid <= 999) {
                               desk_data_len = 40;
                    //           $('.ticker-content span').css('font-size','75%');
    				            // $('.ticker-title span').css('font-size','80%');
    				            // $('.ticker-title').css('width','180px');
                            } 
    				           
    				//	console.log(dataLen.length);
    				var abc =1;
    				if((dataLen.length > desk_data_len) && abc==1){
    				    //console.log('News');
    				    settings.nextnewslock = 1;
    				    var iOS = ( navigator.userAgent.match(/(iPad)/g) ? true : false );
    				            if(iOS){timer = 3000;}
    				            else{timer = 6500;}
    				    //timer = 6500;//(90/13)*1000;
    				    shift=0;
    				    setTimeout(function(){
    				        mycount = function(len,shift) {
    				            //var iOS = ( navigator.userAgent.match(/(iPad)/g) ? true : false );
    				            //if(iOS){shift+=12.5;}
    				            //else{shift+=9.5;}
    				            //console.log(iOS);
    				            var win_outer_wid= window.innerWidth;
                                    if(win_outer_wid >= 768 && win_outer_wid <= 999) {
                                       shift+=8.5;
                                    }else{ 
    				                    shift+=11.5;
                                    }
    				            len++;
    				          //  console.log(shift +" :"+ len);
    						   // $('.ticker-content span').css('margin-left','-'+shift+'px');
    				            if((dataLen.length- desk_data_len) >= len ){
    				                shift = mycount(len++,shift);
    				            }
    							return shift;
    				        };
    				        var shift_main = mycount(1,0);
    				      
    				        if(settings.nextnewslock == 1 )
    				        {
    				            //console.log(settings.noAniforFirst);
    				       // if(settings.noAniforFirst == 0){
    						$(".ticker-content span").css('margin-left', '').delay(1).animate( {marginLeft:'-'+shift_main+'px'}, ((dataLen.length-desk_data_len)*310),'linear',function(){try{if(homeObj.breakingNewsPause == 1){$('.ticker-content span').css('margin-left','0px');}}catch(e){console.log(e);}});
    				       // }
    				        }
    				       // settings.noAniforFirst++;
    						//	$(".ticker-content span").animate( {marginLeft:'-'+shift_main+'px'}, 6000,'linear',function(){try{if(homeObj.breakingNewsPause == 1){$('.ticker-content span').css('margin-left','0px');}}catch(e){console.log(e);}});
    						//	$(".ticker-content span").animate( {marginLeft:'-'+shift_main+'px'}, 5000,'linear',function(){});
    				    }, timer);
    				}
    				
    
    				// set the next content item to be used - loop round if we are at the end of the content
    				if (settings.position == (countSize(settings.newsArr) -1)) {
    					settings.position = 0;
    				}
    				else {		
    					settings.position++;
    				}			
    
    				// get the values of content and set the time of the reveal (so all reveals have the same speed regardless of content size)
    				distance = $(settings.dom.contentID).width();
    				time = distance / opts.speed;
    
    				// start the ticker animation						
    				revealContent();
    				

			}

			// slide back cover or fade in content
			function revealContent() {
			    //console.log('reveal content');
				$(settings.dom.contentID).css('opacity', '1');
				if(settings.play) {	
					// get the width of the title element to offset the content and reveal	
					var offset = $(settings.dom.titleID).width() + 45;
	
					$(settings.dom.revealID).css(opts.direction, offset + 'px');
					// show the reveal element and start the animation
					if (opts.displayType == 'fade') {
					    //console.log('reveal content if');
						// fade in effect ticker
						$(settings.dom.revealID).hide(0, function () {
							$(settings.dom.contentID).css(opts.direction, offset + 'px').fadeIn(opts.fadeInSpeed, postReveal);
						});						
					}
					else if (opts.displayType == 'scroll') {
						// to code
					}
					else {
					    //console.log('reveal content else');
						// default bbc scroll effect
						$(settings.dom.revealElem).show(0, function () {
							$(settings.dom.contentID).css(opts.direction, offset + 'px').show();
							// set our animation direction
							animationAction = opts.direction == 'right' ? { marginRight: distance + 'px'} : { marginLeft: distance + 'px' };
							$(settings.dom.revealID).css('margin-' + opts.direction, '0px').delay(20).animate(animationAction, time, 'linear', postReveal);
						});		
					}
				}
				else {
					return false;					
				}
			};

			// here we hide the current content and reset the ticker elements to a default state ready for the next ticker item
			function postReveal() {				
				if(settings.play) {		
					// we have to separately fade the content out here to get around an IE bug - needs further investigation
					//console.log('a:'+opts.pauseOnItems);
					$(settings.dom.contentID).delay(2500).fadeOut(opts.fadeOutSpeed);
					//	$(settings.dom.contentID).fadeOut(opts.fadeOutSpeed);//anurag-removing delay
					// deal with the rest of the content, prepare the DOM and trigger the next ticker
					if (opts.displayType == 'fade') {
						$(settings.dom.contentID).fadeOut(opts.fadeOutSpeed, function () {
							$(settings.dom.wrapperID)
								.find(settings.dom.revealElem + ',' + settings.dom.contentID)
									.hide()
								.end().find(settings.dom.tickerID + ',' + settings.dom.revealID)
									.show()
								.end().find(settings.dom.tickerID + ',' + settings.dom.revealID)
									.removeAttr('style');
							setupContentAndTriggerDisplay();						
						});
					}
					else {
						$(settings.dom.revealID).hide(0, function () {
							$(settings.dom.contentID).fadeOut(opts.fadeOutSpeed, function () {
								$(settings.dom.wrapperID)
									.find(settings.dom.revealElem + ',' + settings.dom.contentID)
										.hide()
									.end().find(settings.dom.tickerID + ',' + settings.dom.revealID)
										.show()
									.end().find(settings.dom.tickerID + ',' + settings.dom.revealID)
										.removeAttr('style');
											//console.log('2');
								setupContentAndTriggerDisplay();			
							
							});
						});	
					}
				}
				else {
					$(settings.dom.revealElem).hide();
				}
			}

			// pause ticker
			function pauseTicker() {
			     //console.log("Breaking News:Pause the Breaking News Ticker");
			    //Pause the Breaking News AJAX Call and Refresh
				homeObj.breakingNewsPause = 1;
			    
				settings.play = false;
				// stop animation and show content - must pass "true, true" to the stop function, or we can get some funky behaviour
				$(settings.dom.tickerID + ',' + settings.dom.revealID + ',' + settings.dom.titleID + ',' + settings.dom.titleElem + ',' + settings.dom.revealElem + ',' + settings.dom.contentID).stop(true, true);
				$(settings.dom.revealID + ',' + settings.dom.revealElem).hide();
				$(settings.dom.wrapperID)
					.find(settings.dom.titleID + ',' + settings.dom.titleElem).show()
						.end().find(settings.dom.contentID).show();
			}

			// play ticker
			function restartTicker() {
			     settings.nextnewslock = 0;
			    //$( ".ticker-content span" ).stop();
			    //console.log("Breaking News:Play the Breaking News Ticker");
				settings.play = true;
				settings.paused = false;
				//Play the Breaking News AJAX Call and Refresh
				homeObj.breakingNewsPause = 0;
				// start the ticker again
				postReveal();	
			}

			// change the content on user input
			function manualChangeContent(direction) {
				pauseTicker();
				//Pause the Breaking News AJAX Call and Refresh
				homeObj.breakingNewsPause = 1;
				//Set margin to zero when next/previous is clicked while news is scrolling
				$('.ticker-content span').css('margin-left','0px');
				
				switch (direction) {
					case 'prev':
						if (settings.position == 0) {
							settings.position = countSize(settings.newsArr) -2;
						}
						else if (settings.position == 1) {
							settings.position = countSize(settings.newsArr) -1;
						}
						else {
							settings.position = settings.position - 2;
						}
						$(settings.dom.titleElem).html(settings.newsArr['item-' + settings.position].type);
						$(settings.dom.contentID).html(settings.newsArr['item-' + settings.position].content);						
						break;
					case 'next':
						$(settings.dom.titleElem).html(settings.newsArr['item-' + settings.position].type);
						$(settings.dom.contentID).html(settings.newsArr['item-' + settings.position].content);
						break;
				}
				// set the next content item to be used - loop round if we are at the end of the content
				if (settings.position == (countSize(settings.newsArr) -1)) {
					settings.position = 0;
				}
				else {		
					settings.position++;
				}	
			}
		});  
	};  

	// plugin defaults - added as a property on our plugin function
	$.fn.ticker.defaults = {
		speed: 0.10,			
		ajaxFeed: false,
		feedUrl: '',
		feedType: 'xml',
		displayType: 'reveal',
		htmlFeed: true,
		debugMode: true,
		controls: true,
		titleText: 'Breaking News',	
		direction: 'ltr',	
		pauseOnItems: 3000,
		fadeInSpeed: 600,
		fadeOutSpeed: 300
	};	
})(jQuery);

	
	
	
	     var timesTop10popup_callbacks;
	     var coronapopup_callbacks;
		require({'config':{'version':{'vtime':1447750589885,'vdate':'Tue Nov 17 2015 14:26:29 GMT+0530 (India Standard Time)'}}});
( function () {
	var shim = {};
	var paths = {};
	var deps = [];
	var min = ".min";
	//    var min = "";
	var preload = [
		{
			module: "json",
			variable: "JSON",
			js: "//cdnjs.cloudflare.com/ajax/libs/json2/20121008/json2" + min
		}
		,
		{
			module: "jquery",
			variable: "jQuery",
			js: [ "//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery" + min
				, "//cdnjs.cloudflare.com/ajax/libs/jquery/1.8.2/jquery" + min ]
		}
	];
	for( var i = 0; i < preload.length; i++ ) {
		var pre = preload[ i ];
		if( !window[ pre.variable ] ) {
			paths[ pre.module ] = pre.js;
			shim[ pre.module ] = {
				"exports": pre.variable
			};
			deps.push( pre.module );
		} else {
			define( pre.module, ( function ( pre, min ) {
				return function () {
					return window[ pre.variable ]
				};
			}( pre, min ) ) );
		}
	}
	require( {
		deps: deps,
		shim: shim,
		paths: paths
	} );
}() );
define("preload", function(){});

require( {
	shim: {
		//        "jquery": {"exports":"jQuery"},
		//        "json": {"exports":"JSON"} ,
		"jsrender": {
			"exports": "jQuery.fn.render",
			deps: [ 'jquery' ]
		}
	},
	paths: {
		//        times: 'apps/times',  //used so that app module name looks nice
		//        toi: 'apps/toi',  //used so that app module name looks nice
		//        jquery: [
		//                     "//timesofindia.indiatimes.com/jquery_toi.cms?minify=1",
		//                     "//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js",
		//                     "//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min"
		//                ],
		//        json: "//cdnjs.cloudflare.com/ajax/libs/json2/20121008/json2",
		jsrender: "/jsrender.cms?"
	},
	config: {
		"tiljs/page": {
			channel: "TOI",
			//            siteId:"ef55d27920fbf01f58c0da43430f5c6a",
			siteId: "541cc79a8638cfd34bdc56d1a27c8cd7",
			domain: "indiatimes.com"
		},
		"tiljs/plugin/lazy": {
			skew: 0,
			error_image: $('[data-default-image-msid]').length ? ("/photo/" + $('[data-default-image-msid]').attr('data-default-image-msid') + ".cms") : "/photo/34824568.cms"
		},
		"tiljs/social/facebook": {
			xfbml: true,
			parse: false,
			appid: 117787264903013,
			load_js: false,
			init:false
		},
		"tiljs/social/twitter": {
			parse: false,
			load_js: false,
			init:false
		},
		"tiljs/analytics/mytimes": {
			"appKey": "TOI"
		},
		"tiljs/apps/times/comments": {
			loadCommentFromMytimes: true,
			commentType:"comments_agree"
		},
		"tiljs/apps/times/api": {
			post_comment: {
				url: "/postro2.cms",
                params: {
                    medium: 'WEB'
                }
			},
			comments: {
				url: "/commentsdata.cms",
				//                    url:"http://192.168.27.159/mytimes/getFeed/Activity",
				type: "json",
				params: {
					appkey: "TOI",
					msid: window.msid,
					sortcriteria: "CreationDate",
					order: "asc",
					size: 25,
					lastdeenid: 123,
					after: true,
					withReward: true
				}
			},
			comments_oldest: {
				url: "/commentsdata.cms",
				type: "json",
				params: {
					appkey: "TOI",
					msid: window.msid,
					sortcriteria: "CreationDate",
					order: "desc",
					size: 25,
					lastdeenid: 123,
					after: true,
					withReward: true
				}
			},
			comments_agree: {
				url: "/commentsdata.cms",
				type: "json",
				params: {
					appkey: "TOI",
					msid: window.msid,
					sortcriteria: "AgreeCount",
					order: "desc",
					size: 25,
					lastdeenid: 123,
					after: true,
					withReward: true,
                    medium: 'WEB'
				}
			},
			comments_disagree: {
				url: "/commentsdata.cms",
				type: "json",
				params: {
					appkey: "TOI",
					msid: window.msid,
					sortcriteria: "DisagreeCount",
					order: "desc",
					size: 25,
					lastdeenid: 123,
					after: true,
					withReward: true
				}
			},
			comments_discussed: {
				url: "/commentsdata.cms",
				type: "json",
				params: {
					appkey: "TOI",
					msid: window.msid,
					sortcriteria: "discussed",
					order: "desc",
					size: 25,
					lastdeenid: 123,
					after: true,
					withReward: true
				}
			}
		}
	}
} );

define('config',[],function(){return {};});
    define('compatibility',[],function(){return {};});

    define("ajax", ["tiljs/ajax"], function (m) {
        return m;
    });
    define("localstorage", ["tiljs/localstorage"], function (m) {
        return m;
    });
    define("util", ["tiljs/util"], function (m) {
        return m;
    });
    define("is", ["tiljs/is"], function (m) {
        return m;
    });
    define("ui", ["tiljs/ui"], function (m) {
        return m;
    });
    define("cookie", ["tiljs/cookie"], function (m) {
        return m;
    });
    define("event", ["tiljs/event"], function (m) {
        return m;
    });
    define("plugin/lazy", ["tiljs/plugin/lazy"], function (m) {
        return m;
    });
    define("load", ["tiljs/load"], function (m) {
        return m;
    });
    define("toicommonjs/rodate", ["rodate"], function (m) {
        return m;
    });
    define("logger", ["tiljs/logger"], function (m) {
        return m;
    });
    define("page", ["tiljs/page"], function (m) {
        return m;
    });
    define("user", ["tiljs/user"], function (m) {
        return m;
    });
    define("times/comments", ["comments"], function (m) {
        return m;
    });
    define("authorcomments", ["tiljs/apps/times/authorcomments"], function (m) {
        return m;
    });
    //define("personalisation", ["./personalisation"], function (m) {
    //    return m;
    //});

/**
 * 'cookie' module.
 *
 * @module cookie
 */
define( 'tiljs/cookie',[], function () {
	var mod_cookie = {};
	//    var default_config = {
	//          localstorage : false //use localstorage if available or else cookie
	//    };
	//
	//    var config = $.extend({}, default_config, module.config());

	/**
	 * Get value of a cookie
	 *
	 * @memberOf module:cookie#
	 * @function get
	 *
	 * @param name {String} name of the cookie for which value is required,
	 *                        if name is not provided an object with all cookies is returned
	 * @returns value {String | Array} value of the requested cookie / Array of all cookies
	 *
	 * @example
	 *
	 *  require(['cookie'],function(cookie){
	 *     var abc_cookie = cookie.get("abc");
	 *  });
	 */
	mod_cookie.get = function ( name ) {
		var result = name ? undefined : {};
		var cookies = document.cookie ? document.cookie.split( '; ' ) : [];
		for( var i = 0, l = cookies.length; i < l; i++ ) {
			var parts = cookies[ i ].split( '=' );
			var nameK = decodeURIComponent( parts.shift() );
			var cookie = parts.join( '=' );
			cookie = mod_cookie._parseCookieValue( cookie );
			if( name && name === nameK ) {
				result = cookie;
				break;
			}
			if( !name && cookie !== undefined ) {
				result[ nameK ] = cookie;
			}
		}
		return result;
	};

	/**
	 * Cookie Set,Get,Delete
	 */
	mod_cookie.getAll = function () {
		return mod_cookie.get();
	};
	/**
	 * Remove a cookie
	 *
 	 * @memberOf module:cookie#
	 * @function remove
	 *
	 * @param {String} name name of the cookie to be removed
	 * @param {String} [path] path of the cookie
	 * @param {String} [domain] domain of the cookie
	 *
	 * @example
	 *
	 *  require(['cookie'],function(cookie){
	 *     cookie.remove("abc");
	 *  });
	 */
	mod_cookie.remove = function ( name, path, domain ) {
		if( name ) {
			domain = ( domain || document.location.host ).split( ":" )[ 0 ];
			path = path || document.location.pathname;
			mod_cookie.set( name, null, -1, path, domain );
		}
	};
	/**
	 * Set a cookie
	 *
	 * @param {String} name name of the cookie to be set
	 * @param {String} value value of the cookie to be set
	 * @param {Number} days number of days for which the cookie is to be set
	 * @param {String} path path of the cookie to be set
	 * @param {String} domain domain of the cookie to be set
	 * @param {Boolean} secure true if the cookie is to be set on https only
	 */
	mod_cookie.set = function ( name, value, days, path, domain, secure ) {
		var expires = '';
		days = ( days !== undefined ) ? days : 30;
		var date = new Date();
		date.setTime( date.getTime() + ( days * 24 * 60 * 60 * 1000 ) );
		expires = '; expires=' + date.toGMTString();
		domain = ( domain || document.location.host ).split( ":" )[ 0 ]; //removing port
		path = path || document.location.pathname;
		//Removing file name, fix for IE11
		if( /\/.*\..*/.test( path ) ) { //if path contains file name
			path = path.split( "/" );
			path.pop();
			path = path.join( "/" );
		}
		document.cookie = name + '=' +
		value + expires +
		( ( path ) ? ';path=' + path : '' ) +
		( ( domain && domain !='localhost' ) ? ';domain=' + domain : '' ) +
		( ( secure ) ? ';secure' : '' );
	};
	mod_cookie._parseCookieValue = function ( s ) {
		if( s.indexOf( '"' ) === 0 ) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice( 1, -1 ).replace( /\\"/g, '"' ).replace( /\\\\/g, '\\' );
		}
		try {
			// If we can't decode the cookie, ignore it, it's unusable.
			// Replace server-side written pluses with spaces.
			return decodeURIComponent( s.replace( /\+/g, ' ' ) );
		} catch( e ) {}
	};
	return mod_cookie;
} );

/**
 * 'event' module.
 *
 * @module event
 */
define( 'tiljs/event',[], function () {
	var mod_event = {},
		pubsub = {},
		onsubscribe_prefix = "__on_",
		generateUid = ( function () {
			var id = 0;
			return function () {
				return id++;
			};
		} )();
	/**
	 * Publish subscribed events
	 *
	 * @param name Method name for the event to be published
	 * @param data data to be passed to the subscribed event
	 * @returns null
	 */
	mod_event.publish = function ( name, data ) {
		if( !name ) {
			return null;
		}
		if( pubsub[ name ] ) {
			for( var e in pubsub[ name ] ) {
				if( pubsub[ name ].hasOwnProperty( e ) ) {
					var eventCallback = pubsub[ name ][ e ];
					try { //try catch done to keep publisher running in case of error in event callback
						eventCallback( data );
					} catch( err ) {
						mod_event.publish( "logger.error", err.stack );
					}
				}
			}
		}
	};
	mod_event.subscribeAll = function ( name, eventCallback, options ) {
		if( name instanceof Array ) {
			var eventIds = [];
			var responses = [];
			for( var i = 0; i < name.length; i++ ) {
				eventIds.push( mod_event.subscribe( name[ i ], function ( response ) {
					responses.push( response );
					if( eventIds.length === responses.length ) { // todo fix, call even when first event is called twice
						if( eventCallback ) {
							eventCallback( responses );
						}
						responses = [];
					}
				}, options ) );
			}
			return eventIds;
		}
		return mod_event.subscribe( name, eventCallback, options );
	};
	/**
	 * Subscribe custom events
	 *
	 * @param name Method name for the event to be subscribed
	 * @param eventCallback(data) Function to be called when the event is published with the data
	 * @options options
	 * @returns eventId unique id generated for every subscription
	 */
	mod_event.subscribe = function ( name, eventCallback, options ) {
		if( name instanceof Array ) {
			var eventIds = [];
			for( var i = 0; i < name.length; i++ ) {
				eventIds.push( mod_event.subscribe( name[ i ], eventCallback, options ) );
			}
			return eventIds;
		}
		if( !name || !eventCallback ) {
			return null;
		}
		if( !pubsub[ name ] ) {
			pubsub[ name ] = {};
		}
		var eventId = name + ":" + generateUid();
		pubsub[ name ][ eventId ] = eventCallback;
		//TODO find better way
		//Setting callback in options so that it can be used in onsubscribe event.
		if( options ) {
			options.__callback = eventCallback;
		}
		//Calling onsubscribe events
		mod_event.publish( onsubscribe_prefix + name, options );
		return eventId;
	};
	/**
	 * Unsubscribe an event
	 *
	 * @param eventId id of the event to be unsubscribed
	 * @returns boolean true if event is successfully unsubscribed,else false
	 */
	mod_event.unsubscribe = function ( eventId ) {
		if( !eventId ) {
			return null;
		}
		var eventArr = eventId.split( ":" );
		if( eventArr.length === 2 ) {
			var eventName = eventArr[ 0 ];
			//            var eventNum = eventArr[1];
			if( pubsub[ eventName ][ eventId ] ) {
				delete pubsub[ eventName ][ eventId ];
				return true;
			}
		}
		return false;
	};
	/**
	 * Get all the subscribed events in an object
	 *
	 *
	 * @param name Event name for which all events are required
	 * @returns Event object for the provided event name
	 */
	mod_event.getSubscriptions = function ( name ) {
		if( !name ) {
			return pubsub; //todo return cloned object istead of original
		}
		return pubsub[ name ];
	};
	/**
	 * Used to subscribe to subscribe events, onsubscribe('method1') is called when subscribe('method1') is called
	 * This can be used to setup data / setup publish events
	 *
	 * @param name
	 * @param eventCallback
	 * @returns {string}
	 */
	mod_event.onsubscribe = function ( name, eventCallback ) {
		if( !name || !eventCallback ) {
			return null;
		}
		name = onsubscribe_prefix + name;
		if( !pubsub[ name ] ) {
			pubsub[ name ] = {};
		}
		var eventId = name + ":" + generateUid();
		pubsub[ name ][ eventId ] = eventCallback;
		return eventId;
	};
	return mod_event;
} );


define( 'tiljs/logger',[ "./cookie", "module", "./event", "jquery" ], function ( cookie, module, event, $ ) {
	var mod_logger = {}, logCache = [];
	var types = [ "log", "debug", "info", "warn", "error" ];

	var default_config = {
		cookieName: "d",
		hashString: "#debugdsfgw456g", //change to url param  / use cookie
		prefix: "[times_log] ",
		//linenum: false,
		time: false, //todo to be implemented
		handleWindowError: true,
		handleJqueryError: true,
		logModuleLoad: true,
		log: false //can be overridden by cookie or hash when it is false
	};
	var config = $.extend( {}, default_config, module.config() ); //todo remove jquery dependency
	/**
	 * Returns the stack details for method that calls log
	 * @param stack
	 * @returns {string}
	 * @private
	 */
	function getStackDetails( stack ) {
		var regex = new RegExp( "\/(.*):([0-9]*)\:([0-9]*)", "g" );
		//done thrice to get the main calling method and line number
		var res = regex.exec( stack );
		res = regex.exec( stack );
		res = regex.exec( stack );
		if( res ) {
			res.shift();
		}
		return res ? res.join( ":" ).replace( config.hashString, "" ) : null;
	}

	/**
	 * times.debug
	 *
	 * times.log/info/error
	 */
	mod_logger = {};
	mod_logger.disable = function () {
		config.log = false;
		cookie.remove( config.cookieName, "/" );

		var i, type;
		for(i in types ) {
			if( types.hasOwnProperty( i ) ) {
				type = types[ i ];

				mod_logger[ type ] = (function(type) {
					return function() {
						logCache.push.apply(logCache,arguments);
					};
				})(type);
			}
		}

		return "Logging Disabled";
	};
	mod_logger.enable = function () {
		config.log = true;
		cookie.set( config.cookieName, config.hashString, 30, "/" );


		var i, type;
		for(i in types ) {
			if( types.hasOwnProperty( i ) ) {
				type = types[ i ];

				function fun(){
					console.log.apply(this,arguments);
				}

				mod_logger[ type ] = (function(type) {
					var noop = function() {};
					var log;
					var context = config.prefix;
					if (console.log.bind === 'undefined') { // IE < 10
						log = Function.prototype.bind.call(console[type], console, context);
					}
					else {
						log = console[type].bind(console, context);
					}

					//log = console[type].bind(console);
					//log = fun.bind(console);

					//log = (window.console === undefined) ? noop
					//	: (Function.prototype.bind !== undefined) ? Function.prototype.bind.call(console[type], console)
					//	: function() {Function.prototype.apply.call(console[type], console, arguments);};

					return log;

				})(type);

				(function ( type ) {
					event.subscribe( "logger." + type, function ( data ) {
						Function.prototype.apply.call(mod_logger[type],console, arguments);
					});
				}( type ));
			}
		}


		return "Logging Enabled";
	};
	mod_logger.isEnabled = function () {
		return config.log || ( window.location.hash.length > 0 && window.location.hash === ( config.hashString ) ) || ( cookie.get( config.cookieName ) === config.hashString );
	};
	mod_logger.handleWindowError = function () {
		window.onerror = function ( msg, url, linenumber, colno, error ) {
			mod_logger.error.apply(this,
				['Error message: ' + msg +
				'\n\tURL: ' + url + ( linenumber ? ":" + linenumber + ":" + colno : "" ) +
				'\n\tLine Number: ' + linenumber + ":" + colno +
				'\n\tError: ' + error] );
			return true;
		};
	};
	mod_logger.handleJqueryError = function () {
		$( document ).ajaxError( function ( event, jqxhr, settings, exception ) {
			if( exception === "timeout" ) {
				mod_logger.error.apply(this, [exception + ": " + settings.url] );
			} else {
				mod_logger.error.apply(this, [exception] );
			}
		} );
		$( document ).error( function ( event ) {
			mod_logger.error.apply(this, event );
		} );
	};
	/**
	 window.require.onResourceLoad = function (context, map, depArray) {
            console.log(map.name);
        };

	 */
	function init_log() {

		config.log = mod_logger.isEnabled();
		if(config.log){
			mod_logger.enable();
		}else{
			mod_logger.disable();
		}

		if( config.handleWindowError === true ) {
			mod_logger.handleWindowError();
			//Doing it again on window load
			event.subscribe( "window.load", function () {
				mod_logger.handleWindowError();
			});
		}
		if( config.handleJqueryError === true ) {
			mod_logger.handleJqueryError();
		}
	}

	/**
	 * As of date we are saving only logs which are not being cached.
	 *
	 * //TODO save all logs to cache
	 */
	mod_logger.getLogs = function(){
		return logCache.slice(0);//slice to create a new reference
	};
	mod_logger.getLogsStr = function(){
		return mod_logger.getLogs().join("\n");
	};


	init_log();
	return mod_logger;
});
/** 'is' module.
 * @module is
 * @exports is
 */
define( 'tiljs/is',[], function () {
	var mod_is = {};
	/**
	 * Checks if the param is a number.
	 *
	 * @memberOf module:is#
	 * @function number
	 * @param ele {object} Any element which is to be checked
	 * @returns {boolean}
	 * @example
	 *
	 * require(['is'],function(is){
	 *     is.number(1);        //returns true
	 *     is.number('abc');    //returns false
	 * });
	 */
	mod_is.number = function ( ele ) {
		return typeof ele === "number";
	};
	/**
	 * Checks if the param is a string.
	 *
	 * @memberOf module:is#
	 * @function string
	 * @param ele {object} Any element which is to be checked
	 * @returns {boolean}
	 * @example
	 *
	 * require(['is'],function(is){
	 *     is.number(1);        //returns false
	 *     is.number('abc');    //returns true
	 * });
	 */
	mod_is.string = function ( ele ) {
		return typeof ele === "string";
	};
	mod_is.funct = mod_is.method = function ( ele ) {
		return typeof ele === "function";
	};
	mod_is.object = function ( ele ) {
		return ele !== null && typeof ele === "object"; //&& !(ele instanceof Array);
	};
	mod_is.array = Array && Array.isArray ? Array.isArray : function ( ele ) {
		return ele instanceof Array;
	};
	mod_is.undefined = function ( ele ) {
		return typeof ele === "undefined";
	};
	mod_is.defined = function ( ele ) {
		return typeof ele !== "undefined";
	};
	mod_is.exists = function ( ele ) {
		return mod_is.defined( ele ) || ele === "";
	};
	mod_is.empty = function ( ele ) {
		if( !mod_is.defined( ele ) ) {
			return true;
		} else if( mod_is.string( ele ) || mod_is.array( ele ) ) {
			return ele.length === 0;
		} else if( mod_is.object( ele ) ) {
			var i = 0,
				e;
			for( e in ele ) {
				if( ele.hasOwnProperty( e ) ) {
					i++;
				}
			}
			return i === 0;
		} else if( mod_is.number( ele ) ) {
			return false;
		} else {
			return true;
		}
	};
	mod_is.alphaOnly = function ( str ) {
		return /^[A-z\s]+$/.test( str );
	};
	mod_is.numberOnly = function ( str ) {
		return /^[0-9]+$/.test( str );
	};
	mod_is.mobile = function () {
		return( function ( a ) {
			return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test( a ) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test( a.substr( 0, 4 ) );
		} )( navigator.userAgent || navigator.vendor || window.opera );
	};
	mod_is.tablet = function () {
		return( function ( a ) {
			return /(?:ipad|tab)/i.test( a );
		} )( navigator.userAgent || navigator.vendor || window.opera );
	};
	mod_is.desktop = function () {
		return !mod_is.mobile() && !mod_is.tablet();
	};
	mod_is.touch = function () {
		return (('ontouchstart' in window) || ('DocumentTouch' in window));
	};
	mod_is.IE = function () {
		var ua = window.navigator.userAgent;
		var msie = ua.indexOf( "MSIE " );
		if( msie > 0 || !!navigator.userAgent.match( /Trident.*rv\:11\./ ) ) { // If Internet Explorer, return version number
			return true;
		} else { // If another browser, return 0
			return false;
		}
	};
	mod_is.IE11 = function () {
		return( !!navigator.userAgent.match( /Trident\/7\./ ) );
	};
	mod_is.visible = function ( ele ) {
		return ele && ele.is( ":visible" );
	};
	mod_is.iframe = function ( ele ) {
		return ele.tagName === "IFRAME";
	};
	mod_is.dateStr = function ( str ) {
		try {
			new Date( str );
			return true;
		} catch( e ) {
			return false;
		}
	};
	mod_is.email = function ( email ) {
		var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
		return re.test( email );
	};
	mod_is.url = function ( str ) {
		var url_pattern = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-]*)?\??(?:[\-\+=&;%@\.\w]*)#?(?:[\.\!\/\\\w]*))?)/g;
		return url_pattern.test( str );
	};
	return mod_is;
} );



try{    
document.domain = "indiatimes.com";
}catch(ex){
    console.log(ex)
}
var TimesApps = window.TimesApps || {};
TimesApps.VideoCore = (function(){
    var config, fn, api;
    
    config = {
        iframeTemplateName : "vod_player.cms",
        iframeHtml: '<iframe allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>'
    }
    
    fn = {
        _generateIframeSrc : function(dataParams){
            var src =  "/" + config.iframeTemplateName + "?";
            var params = [];
            
            for(key in dataParams){
                if( !dataParams.hasOwnProperty(key) ){
                    return;
                }
                
                params.push(key + "=" + dataParams[key]);
            }
            
            src += params.join('&');
            
            return src;
        },
        
        _createVideoIframe : function(dataParams, attributes){
            var src = fn._generateIframeSrc(dataParams);

            var container = document.createElement("div");
            $(container).html(config.iframeHtml);
            $(container).find("iframe")
                            .attr("src", src)
                            .attr('data-msid', dataParams && dataParams.msid)
                            .attr('data-plugin', 'vodIframe');
            if(dataParams.classNames){
                $(container).find("iframe").addClass(dataParams.classNames);
            }
            if(dataParams.domId){
                $(container).find("iframe").attr('id', dataParams.domId);
            }
            for(key in attributes){
                if(!attributes.hasOwnProperty(key)){
                    return;
                }
                $(container).find("iframe").attr(key, attributes[key]);
            }
            return container.innerHTML;
        }
    }
    
    api = {
        generateIframeSrc : function(dataParams){ return fn._generateIframeSrc(msid, dataParams); },
        createVideoIframe : function(dataParams, attributes){ return fn._createVideoIframe(dataParams, attributes) }
    }
    
    return api;
}(window.jQuery));

/*
* this module takes care 
* of syncing play/pause
* b/w videos
*/
TimesApps.VideoGalleryApp = (function(){
	var util, fn, api, data, bindInitialEvents, config;

	data = {
		videoBoxMap : {},
		videoCount : 0
	}

	config = {
		PLAYING : 'PLAYING',
		PAUSED  : 'PAUSED',
		AUTOPLAY_LOCALSTORAGE_KEY : 'autoplay_userInitiated'
	}

	bindInitialEvents = function(){
		var appData = data;
		/*
		    *TODO - move events from dom to event bus
		*/
	
		$(document).on('videodash.invokeVideo', function(eventType, data){
		    //Event deprecated
		    //in use only in old videodash player
		    //TODO - remove once all videodash
		    //instances have been removed from site
			fn._playNext.call(null, [eventType, data, appData]);
		});

        $(document).on('videodash.userAction LIVE_TV_EVENTS', function(event, data , eventType){
			fn._playCurrentAndPauseOthers.call(null, [event, data , eventType]);
		});
		$(document).on('MINI_TV_EVENTS VOD_EVENTS', function(event, data , eventType){
		    require(["tiljs/event"], function(eventBus){
                eventBus.publish("VOD_EVENTS", [event, data , eventType]);
            });
			fn._playCurrentAndPauseOthers.call(null, [event, data , eventType]);
			if( eventType && eventType.toUpperCase() == "VIDEOIFRAMEREMOVED" ){
			    TimesApps.playingSubsequentVideo = false;
			}
		});
		$(document).on('GAANA_PLAYER_LOADED VOD_LOADED',function(event, eventData, eventType, pauseVideoCallBack){
			//eventData.source
			data.pageName = data.pageName ? data.pageName : ( $("body").data("page-name") || "" );
			if( eventType == "VOD_LOADED" && eventData.source == "MG_0" ){
			    //for HP, player is already loaded
			    //no need to load using VOD_LOADED
			    //TODO - load only using VOD_LOADED
			    return;
			}
			fn._processSystemInitiatedEvents.call(null, [event, eventData, eventType, pauseVideoCallBack]);
		});

        $(document).on('PLAYER_LOADED',function(event, eventData, eventType, pauseVideoCallBack){
			fn._processSystemInitiatedEvents.call(null, [event, eventData, eventType, pauseVideoCallBack]);
		});
    
		$(document).on('GAANA_PLAYER_EVENTS', function(event, data , eventType){
			fn._playCurrentAndPauseOthers.call(null, [event, data , eventType]);
		});
		
        $(document).on('videodash.videoEvents LIVE_TV_EVENTS MINI_TV_LOADED',function(event, eventData, eventType, pauseVideoCallBack){
			//eventData.source
			fn._processSystemInitiatedEvents.call(null, [event, eventData, eventType, pauseVideoCallBack]);
		});

		require(["event"], function(pubSub){
            pubSub.subscribe("MINI_TV_EVENTS", function(data){
                var event = {};
                var eventData = data[0];
                var eventType = data[1];
                fn._playCurrentAndPauseOthers.call(null, [event, eventData , eventType]);
            }); 
		});

		$(document).on('videodash.switchOffAutoPlay', function(event, eventData){
			fn._toggleAutoPlay.call(null, [event, eventData]);
		});

		$('.jMediaGalleryWidget').on('MG_EVENTS', function(event, eventData, eventType, pauseVideoCallBack){
			fn._processSystemInitiatedEvents.call(null, [event, eventData, eventType, pauseVideoCallBack]);
		});
	};

	util = {
		_createVideoObjForOtherTypePlayer : function(id, domSelector, pauseVideoCallBack, isAutoPlayOn, msid){
			return new TimesApps.OtherVideoBox(id, domSelector, pauseVideoCallBack, isAutoPlayOn, msid);
		}
	};

	fn = {
		_init : function(){
			bindInitialEvents();
		},
		_playCurrentAndPauseOthers : function(args){
			var event = args[0];
			var eventData = args[1];
			var eventType = typeof args[2] == "string"  && args[2].toUpperCase();

			var videoId = eventData.source.toUpperCase();
			//set status - playing for current video
			if( data.videoBoxMap[ videoId ] ){
				var videoBeingPlayed = data.videoBoxMap[ videoId ];
				videoBeingPlayed.setStatus(config.PLAYING);
				if(TimesApps.isDevMode){
                    console.log("VOD_STATUS_playing__"+videoId+"__videoMap-",data.videoBoxMap)
				}
				fn._pauseVideosNotInFocus.call(null, [event, eventData , eventType]);
			}
			/*fixed while liniting, check status*/
			if( event.type == "VOD_EVENTS" && eventType == 'VIDEOREADY' ){
			    var videoId = eventData.source.toUpperCase();
    			if( data.videoBoxMap[ videoId ] ){
    			    var video = data.videoBoxMap[ videoId ];
    			    if( video.markPlaying  ){
                        video.markPlaying(eventData.id);   
    			    }
    			    if( video.findNext ){
                        var nextVideo = video.findNext(video.domEle.find(".playing"));
    			        var iframeWindow = video.domEle.find("iframe")[0].contentWindow;
    			        var nextVideoMsid = nextVideo.attr("data-msid") || "";
    			        if( 
    			            iframeWindow.TimesApps
    			            && iframeWindow.TimesApps.Vod_Player
    			            && iframeWindow.TimesApps.Vod_Player.addNextVideoToList
    			        ){
    			            iframeWindow.TimesApps.Vod_Player.addNextVideoToList(nextVideoMsid);
    			        }
    			    }
    			}			
			}
		},
		_processSystemInitiatedEvents : function(args){
			var event = args[0];
			var eventData = args[1];
			var eventType = typeof args[2] == "string"  && args[2].toUpperCase();

			var videoId = eventData.source.toUpperCase();
			//VIDEOREADY - player is ready & interactive
			if( eventType == 'VIDEOREADY' ){
				//pause other video's & set status to paused
				fn._pauseVideosNotInFocus.call(null, [event, eventData, eventType]);
				if( fn._checkIfVideoShouldPause(videoId) ){
					fn._pauseVideo(videoId);
				}
			}else if( 
						eventType == 'LIVE_TV_LOADED' 
						|| eventType == 'MG_LOADED' 
						|| eventType == 'MINI_TV_LOADED'
						||  eventType == 'GAANA_PLAYER_LOADED'
						||  eventType == 'VOD_LOADED'
						|| eventType == 'PLAYER_LOADED'
					){
				var domSelector = eventData.domSelector;
				var pauseVideoCallBack = args[3];
				if( eventType == 'LIVE_TV_LOADED'
				    || eventType == 'MINI_TV_LOADED' 
				    ||  eventType == 'GAANA_PLAYER_LOADED' 
				    || eventType == 'VOD_LOADED' 
				    || eventType == 'PLAYER_LOADED'
				){
				    fn._turnOffAutoPlayForAll();
					//fn._playCurrentAndPauseOthers.call(null, [event, eventData , eventType]);
				}
				
				if( eventType == 'MINI_TV_LOADED' ){
				    //close overlay & dock
				    TimesApps.overlayModule && TimesApps.overlayModule.close();
				}
				
				
				var isAutoPlayOn = ( eventData.userInitiated  == true ) ? false : true;
				fn._registerOtherTypePlayers(videoId, domSelector, pauseVideoCallBack, isAutoPlayOn, eventData.msid);
			}
		},
		_checkIfVideoShouldPause : function(videoId){
			var video = data.videoBoxMap[videoId];
			if( video.getStatus() == config.PAUSED ){
				//pause current video
				return true;
			}
			return false;
		},
		_pauseVideo : function(videoId){
            var video = data.videoBoxMap[ videoId ];
            if( video && typeof video.pauseVideo == "function" ){
                video.pauseVideo();
            }
		},
		_pauseVideosNotInFocus : function(args){
			var event = args[0];
			var eventData = args[1];
			var eventType = typeof args[2] == "string"  && args[2].toUpperCase();

			var videoId = eventData.source.toUpperCase();
			if( eventType == 'PLAYING' || eventType == 'VIDEOREADY' ||eventType == 'START'  ){
				if( data.videoBoxMap[ videoId ] ){
					var videoBeingPlayed = data.videoBoxMap[ videoId ];
				}

				var videoIdList = Object.keys(data.videoBoxMap);
				for(var i=0; i < videoIdList.length; i++ ){
					var videoId = videoIdList[i].toUpperCase();
					var video = data.videoBoxMap[ videoId ];
					if( videoId != videoBeingPlayed.getId() ){
						video.setStatus(config.PAUSED);
						//TODO - *****************************************************************************
						//pause videos which are already ready
						fn._pauseVideo(videoId);
					}
				}
			}
		},
		_playNext : function(args){
			var eventType = args[0];
			var eventData = args[1];
			var data = args[2];
			var videoId = eventData.source.toUpperCase();
			if( data.videoBoxMap[ videoId ] ){
				var video = data.videoBoxMap[ videoId ];
				if( video && typeof video.playNext == "function" ){
                    video.playNext();
				}
			}
		},
		_toggleAutoPlay : function(args){
			var event = args[0];
			var eventData = args[1];
			localStorage.setItem( config.AUTOPLAY_LOCALSTORAGE_KEY, eventData.stxt);
		},
		_addNewVideo : function(options, domEle){
			var id = options.id;
			var video = new TimesApps.VideoBox(options, domEle);
			data.videoBoxMap[id] = video;
			data.videoCount++;
		},
		_addOtherTypeVideo : function(videoId, domSelector, pauseVideoCallBack, isAutoPlayOn, msid){
			var video = util._createVideoObjForOtherTypePlayer(videoId, domSelector, pauseVideoCallBack, isAutoPlayOn, msid);
			data.videoBoxMap[videoId] = video;
			data.videoCount++;
		},
		_turnOffAutoPlayForAll : function(){
			var videoIdList = Object.keys(data.videoBoxMap);
			for(var i=0; i < videoIdList.length; i++ ){
				var videoId = videoIdList[i].toUpperCase();
				var video = data.videoBoxMap[ videoId ];
				//set autoplay status to false
				if( typeof video.setAutoPlay == 'function' ){
					video.setAutoPlay(false);
				}
			}
		},
		//register other players
		_registerOtherTypePlayers : function(videoId, domSelector, pauseVideoCallBack, isAutoPlayOn, msid){
			videoId = videoId.toUpperCase();
			fn._addOtherTypeVideo(videoId, domSelector, pauseVideoCallBack, isAutoPlayOn, msid);
		}
	}

	api = {
		init : function(){ return fn._init(); },
		addNewVideo : function(options, domEle){ return fn._addNewVideo(options, domEle); },
		getVideoCount : function(){ return data.videoCount; },
		getVideoList : function(){ return data.videoBoxMap; },
		pauseVideo :  function(videoId){ return fn._pauseVideo(videoId); }
	}

	fn._init();

	return api;
}());

/*
* module - creates instances of VideoBox / scroller_gallery	
*/

TimesApps.OtherVideoBox = function(id, domSelector, pauseVideoCallBack, isAutoPlayOn, msid){
	this.id = id;
	this.domEle = $(domSelector).eq(0);
	this.status = "PLAYING";
	this.pauseVideoCallBack = pauseVideoCallBack;
	this.msid = msid;
	
	this.config = {
		autoplay : isAutoPlayOn || false
	};

	var self = this;
	this.domEle.on('click', function(event){
		self.setStatus('PLAYING');
	});
};

TimesApps.OtherVideoBox.prototype.getStatus = function(){
	return this.status;
};

TimesApps.OtherVideoBox.prototype.setStatus = function(status){
	this.status = status;
};

TimesApps.OtherVideoBox.prototype.getId = function(){
	return this.id;
};

TimesApps.OtherVideoBox.prototype.pauseVideo = function(){
	if( typeof this.pauseVideoCallBack == 'function' ){
		this.pauseVideoCallBack();
	}else{
		if( typeof this.domEle.prop('contentDocument') == 'undefined' ){
		return;
		}

		var videoControls = this.domEle.prop('contentDocument').embeds['myMovie'];
		if( typeof videoControls == 'undefined' ){
			return;
		}

		this.setStatus('PAUSED');
		videoControls.pauseVideo();
	}
};

TimesApps.overlayModule = (function($){
        var fn, api, data, defaults, templates, bindEvents;
        
        templates = {
            defaultHtml : '<div id="vcw" class="jOverlay video-overlay-wrapper"><div class="inner"><div class="buttonContainer"><span class="jToggleOverlay expand"></span><button type="button" class="closebtn"></button></div><div class="video-content"></div></div></div>'
        }
        
        defaults = {
                    html : "",
                    videosection: "toi",
                    source: "toi",
                    pg : "toi",
                    isFullscreen : false,
                    allowDock : false,
                    classString : ''
                };
                
        data = {
            isOverlayOpen : false,
            currentScrollPos: null,
            _onRenderCb: null
        }
                
        bindEvents = function(){
            $('#vcw .closebtn').off('click').on('click', fn._close);
            $('#vcw .jToggleOverlay').off('click').on('click', fn._toggleOverlayAndDock);
        }
        
        fn = {
            _init : function(){
                $(document).on('keyup', function(e){
                    if(e.keyCode == 27){ // on Esc key press
                       fn._close();
                    } 
                });
            },
            _create : function(options){
                data = $.extend( {},defaults,options);
                fn._render(data.html);
                bindEvents();
                
            },
            _render : function(html){
                if( !$("#vcw").length ){
                    var sidebar = ( $(".sidebar").length ? $(".sidebar") : $(".sidebar2") ).eq(0);
                    var wrapper = sidebar.closest('.wrapper').length ? sidebar.closest('.wrapper') : $(".wrapper");
                    wrapper.eq(0).append(templates.defaultHtml);
                }
                if( data.isFullscreen ){
                    $(".jOverlay")
                            .addClass("fullscreen")
                            .addClass(data.classString.length ? data.classString : '');
                    $("body")
                            .addClass("overflowHidden");
                    data.currentScrollPos = window.scrollY;
                }else{
                    $(".jOverlay")
                            .removeClass("fullscreen");
                }
                $("#vcw .video-content").html(html);
                $("#vcw").fadeIn(500).promise().done(function(){
                    typeof data._onRenderCb == 'function' && data._onRenderCb();
                });
                data.isOverlayOpen = true;

                if( !data.allowDock ){
                    $('.jToggleOverlay').addClass('hidden');
                }
            },
            _close : function(){
                $("body")
                    .removeClass("overflowHidden");
                $('#vcw').fadeOut(500,function(){$('#vcw').remove();});
                // $('body').css('overflow','auto');
                data.isOverlayOpen = false;
                require(["tiljs/event"], function(eventBus){
                    eventBus.publish("overlayClosed", {id : data.id});
                });
                require(['tiljs/is'], function(isMod){
                    isMod.tablet() ? $(window).scrollTop( data.currentScrollPos ) : null;
                });
            },
            _isOverlayOpen : function(){
                return data.isOverlayOpen;
            },
            _getSidebarDimenions : function(){
                var dimensions = {
                    leftOffset : 0,
                    width : 0
                };

                var sidebar = ( $(".sidebar").length ? $(".sidebar") : $(".sidebar2") ).eq(0);
                if( !sidebar.length ){
                    return dimensions;
                }
                
                dimensions.width = sidebar.width() + "px";
                
                var wrappperOffset = 0;
                var wrapper = sidebar.closest('.wrapper').length ? sidebar.closest('.wrapper') : $(".wrapper");
                if( wrapper.length ){
                    wrappperOffset = wrapper.offset().left + parseInt( wrapper.css("padding-left") );
                    wrappperOffset = Math.abs(wrappperOffset);
                }
                
                dimensions.leftOffset = ( sidebar.offset().left - wrappperOffset )  + "px";
                return dimensions;
            },
            _adjustnuge:function()
            {
              try{  if(TimesApps.ad_free_nudge==1){$(".jOverlay").addClass("adjust_nudge")}
                    else if(TimesApps.ad_free_nudge==0){$(".jOverlay").removeClass("adjust_nudge")} }catch(e){}
            },
            _positionDock : function(){
                var jOverlay = $(".jOverlay");
                var sidebarDimensions = fn._getSidebarDimenions();

                jOverlay
                    .css({'margin-left': sidebarDimensions.leftOffset, 'width': sidebarDimensions.width })
                    .addClass("belowHeader");
                    fn._adjustnuge();
                $('#gaanaplayer').addClass('shifttoleft');
                    
                    
                /*
                require("tiljs/event").subscribe("window.scroll", function(){
                    if( this.isOverlayOpen ){
                        return;
                    }
                    
                    var isHeaderVisible = require("tiljs/ui").inView( $('#header .sub-header'), true, 100);
                    if( isHeaderVisible ){
                        jOverlay
                            .addClass("belowHeader");
                        $('#gaanaplayer').addClass('shifttoleft');
                    }else{
                        jOverlay
                            .removeClass("belowHeader");
                    }
                }.bind({isOverlayOpen: data.isOverlayOpen}));                    
                */
            },
            _toggleOverlayAndDock : function(e){
                if( !data.allowDock ){
                    return;
                }
                var jOverlay = $(".jOverlay");
                jOverlay
                    .toggleClass('video-overlay-wrapper fullscreen dockedVideo fixed animateDock dockedVideoSize')
                    .removeClass("belowHeader")
                    .css({'margin-left':'', 'width':''});
                $('body')
                    .toggleClass('overflowHidden');

                if( data.isOverlayOpen ){
                    data.isOverlayOpen = false;
                    //TimesApps.dockVideo.close(true);
                    fn._positionDock();
                    require(["tiljs/event"], function(eventBus){
                        eventBus.publish("overlayClosed", {id : data.id});
                        eventBus.publish("onOverlayDock", {id : data.id});
                    });
                }else{
                    data.isOverlayOpen = true;
                    require(["tiljs/event"], function(eventBus){
                        eventBus.publish("overlayOpen", {id : data.id});
                    });
                }
            }
        }
        
        api = {
            init : function(){ fn._init(); },
            create: function(options){ fn._create(options); },
            close : function(){ fn._close(); },
            isOverlayOpen : function(){ return fn._isOverlayOpen(); },
            getSidebarPosition : function(){ return fn._getSidebarDimenions(); }
        }
        return api;
    }(jQuery));
TimesApps.overlayModule.init();

TimesApps.VideoListPlayer = (function(){
    var fn, api, cache, config, data;
    
    config = {
        iframeHtml: '<iframe allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" id="videosrc"></iframe>'
    }
    
    cache = {
        videoList : $(".jVideoList")
    };
    
    data = {
        currentVideo : undefined,
        pageUrl : undefined,
        playerType : "",
        isOverlayOpen : false,
        isDocked : false,
        vidSource : ""
    }
    
    bindEvents = function(){
        if( $("#container.articleshow").length ){
            /*
            * articleshow has infinite scroll
            * new elements are added on scroll
            */
            $("body").on("click",".jVideoList [data-plugin='vidPlay']", fn._handleClick);
            $("body").on("click",".jVideoList [data-plugin='vidOverlay']", fn._handleClick);
        }
        else if(window.location.href.includes("/sports") || window.location.href.includes("/india")){
            $("body").on("click",".jVideoList [data-plugin='vidPlay']", fn._handleClickSports);
            $("body").on("click",".jVideoList [data-plugin='vidOverlay']", fn._handleClickSports);
        }else{
            $(".jVideoList").on("click","[data-plugin='vidPlay']", fn._handleClickSports);
            $(".jVideoList").on("click","[data-plugin='vidOverlay']", fn._handleClickSports);
            // removed _handleClick
        }
        //video events
        $(document).on('VOD_EVENTS', fn._handlePlayerEvents);
        
        require(["tiljs/event"], function(eventBus){
            eventBus.subscribe("overlayClosed", fn._onOverlayClose);
            eventBus.subscribe("overlayOpen", fn._onOverlayOpen);
            
            eventBus.subscribe("onOverlayDock", fn._onOverlayDock);
        });
        
        require(["tiljs/event"], function(eventBus){
            //eventBus.subscribe("onVideoOverlayOpen", fn._triggerAnalytics);
            eventBus.subscribe("onVideoOverlayOpen", fn._updatePageUrl);
            eventBus.subscribe("onVideoOverlayOpen", fn._triggerAnalyticsForDockOverlayEvents);
            eventBus.subscribe("onVideoOverlayUpdate", fn._triggerAnalyticsForDockOverlayEvents);
            eventBus.subscribe("onVideoDock", fn._triggerAnalyticsForDockOverlayEvents);
            eventBus.subscribe("onVideoOverlayUpdate", fn._updatePageUrl);
            eventBus.subscribe("onVideoOverlayUpdate", fn._triggerAnalytics);
            eventBus.subscribe("onVideoOverlayUpdate", fn._markPlaying);
        });
    }
    
    fn = {
        _triggerAnalyticsForDockOverlayEvents : function(eventData){
            if( !eventData.vidSource ){
                return;
            }
            var ga = window.ga;
            
            var eventCat;
            if( TimesApps.dockVideo.getStatus('isDocked') || data.isDocked ){
                eventCat = 'Video-Dock_Player';
            }else if( TimesApps.dockVideo.getStatus('isOverlayOpen') || eventData.isOverlay ){
                eventCat = 'Video-Overlay_Player';
            }
            
            if( !(ga && eventCat) ){
                return;
            }
            
            var eventAction = toiprops.seoLocation || "";
            eventAction += '-' + eventData.vidSource || "";
            
            var eventLabel = 'Parent-' + ( data.pageUrl || '' );
            eventLabel += '-Child-';
            if( eventData.vidUrl ){
                eventLabel += eventData.vidUrl;
            }else{
                eventLabel += eventData.msid;
            }
            
            ga('send', {
                hitType: 'event',
                eventCategory: eventCat,
                eventAction: eventAction,
                eventLabel: eventLabel
            });
            
        },
        _savePageUrl : function(){
            //save page url
            //used to restore url on overlay close
            data.pageUrl = window.location.pathname;
        },
        _triggerAnalytics: function(details){
            var title = details.title;
            var url = details.url;
            if(typeof ga != "undefined"){
	            ga('send', {
                   'hitType': 'pageview',
                   'page': url,
                   'title': title,
                   'location': location.protocol + "//"+location.hostname + url
                });    
	        }
                
            // Comscore Call
            if (typeof(fireComscore) == "function") {
                fireComscore();
            }
            
            // ChartBeat Call
            if (typeof(pSUPERFLY) !="undefined" && typeof(pSUPERFLY.virtualPage) == "function") {
                pSUPERFLY.virtualPage(url, title);
            }
        },
        _updatePageUrl : function(details){
            if( !data.isOverlayOpen ){
                return;
            }
            
            if( !(details && details.url) ){
                return;
            }
            /*var relativeUrl = details.url;
            var url = "//" + window.location.hostname;
            var url = relativeUrl;
            */
            history.pushState(null,null, details.url);  
        },
        _updateTitle : function(){
            //todo - move to 1 place
        },
        _getVideoSrc : function(videoItem, isUserInitiated){
            var currentItem = $(videoItem);
            data.currentVideo = videoItem;
            var msid = currentItem.data("msid");
            var nextVideo = fn._getNextVideo(videoItem);
            var nextVideoMsid = nextVideo.data("msid") || "";
            var secId = currentItem.closest("[data-secid]").data("secid");
            if( !secId ){
                secId = currentItem.closest(".video-category").find("[data-secid]").data("secid") || "";
            }
            data.vidSource = currentItem.closest("[data-ga-source]").data("ga-source") || '';
            
            var src = '/vod_player.cms?msid=';
    		src += msid;
    		src += '&videosection=' + (currentItem.closest("[data-slike-sec]").data("slike-sec") || '');
    		src += '&source=' + data.vidSource;
    		src += '&nextid=' + nextVideoMsid;
    		src += '&audio=80';
    		src += '&secId=' + secId;
            src += '&autoplay=1';
            src += '&type=vidOverlay';
            src += '&utm_source=DesktopHome&utm_medium=LatestNews&utm_campaign=VideoPlug&pg=toihp';
            src += '&version=16';
            
            if( isUserInitiated && isUserInitiated != "false" ){
                src += '&userInitiated=1';
            }else{
                src += '&userInitiated=0';
            }
            
            return src;
        },
        _loadVideoInOverlay : function(videoItem, isUserInitiated){
            var currentItem = $(videoItem);
            var msid = $(currentItem).data("msid");
            var src = fn._getVideoSrc(videoItem, isUserInitiated);
            var container = document.createElement("div");
            $(container).html(config.iframeHtml);
            $(container).find("iframe").attr("src", src);
            
            var title = currentItem.find(".w_tle a").text();
            var titleHtml = $("<p>")
                                    .addClass("jTitle title")
                                    .text( title );
            $(container)
                    .append( titleHtml );  
            
            var allowDock = false;
            var isDesktop = require('tiljs/is').desktop();
            if( isDesktop && fn._getPlayerType() == "VIDOVERLAY" ){
                allowDock = true;
            }
            
            TimesApps.overlayModule.create({
                id : msid,
                html : container.innerHTML,
                isFullscreen: true,
                allowDock: allowDock
            })
            
            data.isOverlayOpen = true;
            
            var title = currentItem.find('a').attr("title");
            var url = currentItem.find('a').attr("href");
            fn._savePageUrl();
            
            var dataObj = {
                title: title, 
                url: url,
                vidSource: data.vidSource,
                vidUrl : url,
                msid: msid,
                isOverlay : true
            };
            require("tiljs/event").publish("onVideoOverlayOpen", dataObj);
        },
        _fetchPlaylist : function(event, clickedVideo, clickedVidMsid, secId, callBack, playlistUrl, gaSource){
            var defaultUrl = "/wdt_videolist.cms?v=1954&noads=1&msid=" + secId + "&config.perpage=10&tmpl=videoshow&img=200&tag=videopllist&pg=AS_RHS_Overlay~Videos!TopVideo&classname=vidOverlay";
            var url = playlistUrl ? playlistUrl : defaultUrl;
            $.ajax({
                url : url,
                contentType: "text/html",
                dataType: "html",
                type: "GET"
            }).done(function(htmlData){
                if( !( htmlData && htmlData.length ) ){
                    return;
                }

                var $sliderContainer = $("<div>").addClass("overlay-slider-container"),
                    videoPlaylistHtml = $("<div>").addClass("slideshowbox");
                videoPlaylistHtml
                            .append("<div>")
                            .addClass("jPlaylist playlist")
                            .attr("data-plugin", "videos_section_slider")
                            .html(htmlData);
                            
                if( !videoPlaylistHtml.find("ul li").length ){
                    return;
                }

                if( !videoPlaylistHtml.find("ul [data-msid='"+ clickedVidMsid +"']").length ){
                    var firstVideo = videoPlaylistHtml
                                                .find("ul li").eq(0)
                                                .clone();
                    var firstVideoMsid = firstVideo.data("msid");
                    
                    var regex = new RegExp(firstVideoMsid, 'g');
                    
                    var imgUrl = firstVideo
                                    .find("img")
                                    .attr("data-src")
                                    .replace(regex, clickedVidMsid);
                    
                    var clickedVidTitle = clickedVideo.find(".w_tle a").eq(0).text();
                    firstVideo
                            .attr("data-msid", clickedVidMsid)
                            .find("img")
                            .attr("data-src", imgUrl);
                    firstVideo        
                            .find(".w_tle a").eq(0).text(clickedVidTitle);
                            
                    
                    videoPlaylistHtml
                            .find("ul")
                            .prepend(firstVideo);
                }else{
                    var playingVid = videoPlaylistHtml.find("ul [data-msid='"+ clickedVidMsid +"']");
                    var video = playingVid.clone();
                    playingVid.remove();
                    videoPlaylistHtml
                            .find("ul")
                            .prepend(video);
                }
                //mark video active
                videoPlaylistHtml
                            .attr('data-ga-source', gaSource || "")
                            .find("[data-msid='"+ clickedVidMsid +"']")
                            .addClass("active");
                if( typeof callBack == "function" ){
                    $sliderContainer.append(videoPlaylistHtml);
                    callBack($sliderContainer);
                }
                
            });
        },
        _addPlaylist : function(event){
            var vidContainer = $(".video-content");
            var addPlaylist = function(videoPlaylistHtml){
                if( fn._getPlayerType() == "VIDOVERLAY" ){
                    vidContainer.find('.jPlaylist').remove();
                    vidContainer.append(videoPlaylistHtml);
                }else if( fn._getPlayerType() == "VIDPLAY" ){
                    vidContainer.find('.jPlaylist').remove();
                    vidContainer.append(videoPlaylistHtml);
                }
                 
                var playlist = vidContainer.find(".jPlaylist");   
                playlist.off().on("click", "[data-plugin='vidOverlay']",fn._changeVideo);
                videos_section_slider.init(playlist);
                setTimeout(function(){
                    require('tiljs/plugin/lazy').load();
                }, 1000);
            }
            var clickedVideo = $(event.target).closest("[data-plugin='vidOverlay']");
            var clickedVidMsid = clickedVideo.data('msid');
            var secId = clickedVideo.closest(".video-category").find("[data-secid]").data("secid") || "";
            var gaCat = TimesApps.GA.getGACategory();
            gaCat = gaCat.indexOf('/') >= 0 ? gaCat.replace('/','$slash$') : gaCat;
            var gaSource = gaCat + '_overlay_playlist';
            var playlistUrl = clickedVideo.closest("[data-source-url]").data("source-url") || "";
            if( !secId ){
                secId = clickedVideo
                        .closest("[data-secid]")
                        .data("secid") || "";
            }
            fn._fetchPlaylist(event, clickedVideo, clickedVidMsid, secId, addPlaylist, playlistUrl, gaSource);
        },
        _changeVideo : function(e){
            e.preventDefault();
            var currentVideo = this;
            data.currentVideo = currentVideo;
            var src = fn._getVideoSrc(currentVideo, true);
            $(".jOverlay").find("iframe").attr("src", src);
            
            var title = $(currentVideo).find('a').attr("title");
            var url = $(currentVideo).find('a').attr("href");
            require("tiljs/event").publish("onVideoOverlayOpen", {title : title, url : url});
        },
        _onOverlayClose : function(eventData){
            fn._updatePageUrl( { url: data.pageUrl } );
            data.isOverlayOpen = false;
        },
        _onOverlayOpen : function(eventData){
            var currentVideo = $(data.currentVideo);
            var title = $(currentVideo).find('a').attr("title");
            var url = $(currentVideo).find('a').attr("href");
            data.isOverlayOpen = true;
            data.isDocked = false;
            var dataObj = {
                                title : title,
                                url : url,
                                'isOverlay' : true,
                                vidSource: data.vidSource
                                
                            };
            require("tiljs/event").publish("onVideoOverlayOpen", dataObj);
        },
        _onOverlayDock : function(){
            var currentVideo = $(data.currentVideo);
            var msid = $(currentVideo).data("msid");
            var url = $(currentVideo).find('a').attr("href");
            data.isOverlayOpen = false;
            data.isDocked = true;
            var dataObj = {
                    vidSource: data.vidSource,
                    vidUrl : url,
                    msid: msid,
                    isDocked : true
            };
            require("tiljs/event").publish("onVideoDock", dataObj);
        },
        _handleClick : function(e){
            e.preventDefault();
            //cache.videoList = $(this).closest(".jVideoList");
            var jOverlay = $(".jOverlay");
            jOverlay
                .find(".jToggleOverlay")
                .trigger('click');
            TimesApps.dockVideo && TimesApps.dockVideo.close();
            var currentVideo = this;
            var type = $(this).data('plugin') || "";
            data.playerType = type.toUpperCase();
            fn._loadVideoInOverlay(currentVideo, true);
            if( fn._getPlayerType() == "VIDOVERLAY" || fn._getPlayerType() == "VIDPLAY" ){
                fn._addPlaylist(e);
            }
        },
        _handleClickSports : function(e){
            e.preventDefault();
            window.open($(e.currentTarget).find('a').attr('href'), '_blank')
        },
        _handlePlayerEvents : function(event, data , eventType){
            event.preventDefault();
            var videoSource  = data.source || "";
            videoSource = videoSource.toUpperCase();
            switch( eventType.toUpperCase() ){
                case "ONNEXTVIDEOPLAY" :
                    if( fn._getPlayerType() == "VIDPLAY" ){
                        fn._playNext(data.userInitiated);   
                    }
                    break;
                case "VIDEOREADY" :
                    if( fn._getPlayerType() == "VIDOVERLAY" ){
                        fn._updateUi(data);
                    }
                    break;
                case "PLAYING" :
                    if( videoSource == "ABOVEARTICLE" && !TimesApps.dockVideo.getStatus('isOverlayOpen') ){
                        TimesApps.dockVideo.setStatus("overlayClosedByUser",false);
                    }
            }
        },
        _getNextVideo : function(currentVideo){
            var currentVideo = $(currentVideo);
            var nextVideo = currentVideo.next();
            if( nextVideo.length == 0 ){
                nextVideo = currentVideo.siblings().eq(0);
            }
            
            return nextVideo;
        },
        _playNext : function(isUserInitiated){
            if( !data.currentVideo ){
                return;
            }
            var currentVideo = $(data.currentVideo);
            data.currentVideo = currentVideo;
            var nextVideo = fn._getNextVideo(currentVideo);
            fn._updatePageUrl( { url: $(nextVideo).find("a").attr("href") } );
            fn._loadVideoInOverlay(nextVideo, isUserInitiated);
        },
        _updateUi : function(dataObj){
            var playlistDom = $(".jOverlay")
                .find(".jPlaylist");
            //fn._markPlaying(playlistDom, data);
            var video = $("ul [data-msid='" + dataObj.id + "']").eq(0);
            data.currentVideo = video;
            var title = video.find(".w_tle a").eq(0).text() || "";
            var jOverlay = $(".jOverlay");
            jOverlay
                .find(".jTitle")
                .text(title);
            var url = video.find("a").attr("href") || "";
            require("tiljs/event").publish("onVideoOverlayUpdate", {url : url, obj: dataObj, playlistDom: playlistDom, title: title});
        },
        _markPlaying : function(data){
            if( !( data && data.playlistDom && data.obj ) ){
                return;
            }
            var playlistDom = data.playlistDom;
            var obj = data.obj;
            var msid;
            if( obj && obj.id ){
                msid = obj.id;
            }else if( data.currentVideo ){
                msid = data.currentVideo.attr("msid");
            }

            playlistDom
                .find("li")
                .removeClass("active");
            playlistDom
                .find("ul [data-msid='"+ msid +"']")
                .addClass("active");
        },
        _getPlayerType : function(){
            return (data.playerType || "").toUpperCase();
        },
        _init : function(){
            if( 
                !(
                    cache.videoList.find("[data-plugin='vidPlay']").length 
                    || cache.videoList.find("[data-plugin='vidOverlay']").length 
                )
            ){
                return;
            }

            bindEvents();
            fn._savePageUrl();
        }
    };
    
    api = {
        init : function(){ return fn._init(); },
        savePageUrl : function(){ fn._savePageUrl(); },
        getVideoSrc : function(videoItem, isUserInitiated){ return fn._getVideoSrc(videoItem, isUserInitiated); },
        fetchPlaylist : function(event, clickedVideo, clickedVidMsid, secId, callBack, playlistUrl, gaSource){ return fn._fetchPlaylist(event, clickedVideo, clickedVidMsid, secId, callBack, playlistUrl, gaSource); }
    };
    
    fn._init();
    return api;
})();

TimesApps.dockVideo = (function($){
    var fn, api, config, state, bindEvents;
    
    config = {
        validSourceList : [
                'ABOVEARTICLE',
                //'PRIME_TOPVOD0'
            ]
    };
    
    state = {
        //isListeningToScroll : false,
        isDocked : false,
        isDragged : false,
        isOverlayOpen : false,
        overlayClosedByUser : false,
        msid : undefined,
        vidContainer : undefined,
        vidSource : undefined
    }
    
    data = {
        vidUrl : ''
    }
    
    bindEvents = function(){
        require(["tiljs/event"], function(eventBus){
            eventBus.subscribe("VOD_EVENTS", function(eventData){
                if( !eventData instanceof Array ){
                    return;
                }
                var data = eventData[1] || {};
                var source = (data.source || "").toUpperCase();
                var eventType = ( eventData[2] && typeof eventData[2] == "string" ) ? eventData[2].toUpperCase() : "";
                if( ( config.validSourceList.indexOf(source) > -1 || source.indexOf("ABOVEARTICLE") > -1 ) && eventType == "VIDEOREADY" ){
                    //state.isListeningToScroll = true;
                    if( !state.vidContainer ){
                        //first time
                        //bcoz dom not cached
                        state.vidSource = source;
                        var videoDomEle = $('[data-msid=' + data.id + '][data-plugin="vodIframe"]');
                        if( videoDomEle.length ){
                            state.vidContainer = videoDomEle;
                        }else{
                            state.vidContainer = $(".articlevideo[data-msid='" + data.id + "']").find(".vidContainer");
                        }
                        state.vidScrollContainer = state.vidContainer.closest('.articlevideo');
                        //attach events
                        require("tiljs/event").subscribe("window.scroll", fn._handleVideoPosition);
                    }else if( state.vidSource != source ){
                        //different video
                        //slot started playing
                        //close old video
                        fn._close(true);
                        //update state to new video
                        state.vidSource = source;
                        state.vidContainer = $(".articlevideo[data-msid='" + data.id + "']").find(".vidContainer");
                        state.vidScrollContainer = state.vidContainer.closest('.articlevideo');
                    }else if( !fn._getStatus('isOverlayOpen') ){
                        state.overlayClosedByUser = false;
                        state.vidContainer = $(".articlevideo[data-msid='" + data.id + "']").find(".vidContainer");
                    }
                    
                    if( fn._getStatus('isOverlayOpen') ){
                        fn._updateOverlay(data);
                    }else if( state.isDocked ){
                        fn._updateDock(data);
                    }
                    
                    state.vidContainer.off().on("click", ".jToggleOverlay", fn._expandCollapseOverlay);
                    state.vidContainer.on("click", ".jClose", fn._close);
                }else if( source.indexOf("ABOVEARTICLE") > -1 && eventType == "PLAYING" ){
                    state.overlayClosedByUser = false;
                }
                
                $(document).on('keyup', function(e){
                    if(e.keyCode == 27){ // on Esc key press
                       fn._close();
                    } 
                });
            });
        });
    }
    
    fn = {
        _makePlayerDraggable : function(){
            //$(".vidContainer").dragit();
        },
        _handleVideoPosition : function(){
            if( state.isOverlayOpen ){
                return;
            }
            var vidScrollContainer = state.vidScrollContainer;
            var skew = $("#skew").val() || 50;
            var isHeaderVisible = require("tiljs/ui").inView( $('#header .sub-header'), true, 100);
            var isVideoVisible = require("tiljs/ui").inView( vidScrollContainer, true, -280);
            if( isVideoVisible && state.isDocked ){
                fn._closeDock();
                state.isDragged = false;
            }else if( 
                    !isVideoVisible 
                    && !state.isDragged 
                    && !state.isDocked 
                    && !isHeaderVisible
                ){
                    fn._dockPlayer();
                    //fn._makePlayerDraggable();
            }
        },
        _dockPlayer : function(e){
        	var vidContainer = state.vidContainer;
            if( !state.isDocked && !state.overlayClosedByUser ){
                if( !vidContainer.find(".buttonContainer").length  ){
                    //if not in dom, add dock buttons
                    var dockHtml = '<div class="buttonContainer jDockButton"><span class="jToggleOverlay expand"></span>';
                    dockHtml += '<span class="jClose close"></span></div>';
                    vidContainer.prepend(dockHtml);
                }else{
                    //show dock buttons
                    vidContainer.find(".buttonContainer").removeClass("hidden");
                }
                state.isDocked = true;
                state.msid = vidContainer
                					.find("iframe")
                					.data("videomsid");
                
                var title = vidContainer
                                .closest("#container.articleshow #content")
                                .find(".title_section .heading1").text();

                var sidebarDimensions = TimesApps.overlayModule.getSidebarPosition();
                
                if( !vidContainer.find(".jTitle").length ){
                    var titleHtml = $("<p>")
                                    .addClass("jTitle title")
                                    .text( title );
                    vidContainer
                                .addClass("dockedVideo fixed animateDock dockedVideoSize belowHeader")
                                .css({'margin-left': sidebarDimensions.leftOffset, 'width': sidebarDimensions.width })
                                .append( titleHtml );
                }else{
                    vidContainer
                            .addClass("dockedVideo fixed animateDock dockedVideoSize belowHeader")
                            .css({'margin-left': sidebarDimensions.leftOffset, 'width': sidebarDimensions.width })
                            .find(".jTitle")
                            .text(title)
                            .removeClass("hidden");
                }
                
                $('#gaanaplayer').addClass('shifttoleft');
                TimesApps.overlayModule.close();
                    

                vidContainer.one("animationend webkitTransitionEnd transitionend webkitAnimationEnd oAnimationEnd MSAnimationEnd", function(event){
                    event.stopPropagation();
                    event.stopImmediatePropagation();
                    //console.log("transition end");
                    vidContainer.addClass("animationEnd");
                });
                
                vidContainer.removeClass("animationEnd");
                var msid = $(".articlevideo").attr("data-msid") || window.msid;
                var imgUrl = "/photo/" + msid + ".cms";
                $(".vidbox").css("background-image","url("+imgUrl+")");
                
                var dataObj = {
                    vidSource: state.vidSource,
                    vidUrl : data.vidUrl,
                    msid: state.msid,
                    isDocked : true
                };
                require("tiljs/event").publish("onVideoDock", dataObj);
            }
            
            /*vidContainer.on("mousedown", function(){
                if( !state.isDragged ){
                    $(this).removeClass("dockedVideo animateDock").animate({top: "1px", left:"840px"}, 200);
                }
                state.isDragged = true;
            })*/
        },
        _expandToOverlay : function(){
            state.isOverlayOpen = true;
            state.isDocked = false;
            var vidContainer = $(".vidContainer");
            vidContainer
                        .addClass("expand-overlay")
                        .removeClass("dockedVideo fixed animateDock dockedVideoSize belowHeader")
                        .css({'margin-left':'', 'width':''})
                        .off("mousedown");
                        //.find(".buttonContainer").addClass("hidden");
            if( vidContainer.parent().find(".expand-overlay-box").length ){
                $("<div>").addClass("expand-overlay-box").insertBefore(vidContainer);
            }
            $("body")
                    .addClass("overflowHidden");
            
            TimesApps.VideoListPlayer.savePageUrl();
            var dataObj = {
                vidSource: state.vidSource,
                vidUrl : data.vidUrl,
                msid: state.msid,
                isOverlay : true
            };
            require("tiljs/event").publish("onVideoOverlayOpen", dataObj);
        },
        _collapseToDock : function(){
            state.isOverlayOpen = false;
            state.isDocked = true;
            var vidContainer = $(".vidContainer");
            
            $("body")
                    .removeClass("overflowHidden");
            
            var sidebarDimensions = TimesApps.overlayModule.getSidebarPosition();
            
            vidContainer
                        .removeClass("expand-overlay")
                        .addClass("dockedVideo fixed animateDock dockedVideoSize belowHeader")
                        .css({'margin-left': sidebarDimensions.leftOffset, 'width': sidebarDimensions.width })
                        .off("mousedown");
                        //.find(".buttonContainer").addClass("hidden");
            
            var dataObj = {
                    vidSource: state.vidSource,
                    vidUrl : data.vidUrl,
                    msid: state.msid,
                    isDocked : true
                };
            require("tiljs/event").publish("onVideoDock", dataObj);
        },
        _expandCollapseOverlay : function(event){
            if( state.isDocked ){
                state.isDocked = false;
                fn._expandToOverlay();

                var addPlaylist = function(videoPlaylistHtml){
                    var vidContainer = $(".vidContainer");
                    vidContainer.find('.jPlaylist').remove();
                    vidContainer.append(videoPlaylistHtml);
                        
                    vidContainer.find(".jPlaylist").off().on("click", "[data-plugin='vidOverlay']",fn._changeVideoInOverlay);
                    //init slider
                    videos_section_slider.init(vidContainer.find(".jPlaylist"));
                    setTimeout(require('tiljs/plugin/lazy').load(), 1000);
                }
                
                var clickedVideo = state.vidScrollContainer;
                var clickedVidMsid = state.vidScrollContainer.find("iframe").contents().find('#msid').val() || "";
                var secId = state.vidScrollContainer.find("iframe").contents().find('#sectionId').val() || "";
                var gaCat = TimesApps.GA.getGACategory();
                gaCat = gaCat.indexOf('/') >= 0 ? gaCat.replace('/','$slash$') : gaCat;
                var source = gaCat + '_overlay_playlist';
                TimesApps.VideoListPlayer.fetchPlaylist(event, clickedVideo, clickedVidMsid, secId, addPlaylist, null, source);
            }else{
                fn._collapseToDock();
            }
        },
        _changeVideoInOverlay : function(e){
            e.preventDefault();
            var currentVideo = $(this);
            var src = TimesApps.VideoListPlayer.getVideoSrc(currentVideo, true);
            state.vidContainer.find("iframe").attr("src", src);
            
            var title = currentVideo.find('a').attr("title");
            var url = currentVideo.find('a').attr("href");
            state.vidContainer
                .find(".jPlaylist li")
                .removeClass("active");
            currentVideo.addClass("active");
            
            state.vidContainer
                    .find(".jTitle")
                    .text(title);
            data.vidUrl = url;
            var dataObj = {
                url : url, 
                obj: undefined, 
                playlistDom: state.vidContainer, 
                title: title,
                vidSource: state.vidSource,
                vidUrl : data.vidUrl,
                isOverlay : true
            };
            require("tiljs/event").publish("onVideoOverlayUpdate", dataObj);
        },
        _removePlaylist :  function(){
            $('.jPlaylist').remove();
        },
        _closeDock : function(){
            $(".vidbox").css("background-image","")
                        .css("background-color","black");
            
            $(".vidContainer")
                        .removeClass("dockedVideo animateDock dockedVideoSize fixed belowHeader")
                        .css({'margin-left':'', 'width':''})
                        .find(".jTitle")
                        .addClass("hidden");
            state.isDocked = false;
            fn._removeButtons();
        },
        _closeOverlay : function(){
            state.isOverlayOpen = false;
            fn._removePlaylist();
            $(".vidContainer")
                        .removeClass("expand-overlay")
                        .find(".jTitle")
                        .addClass("hidden");
            $("expand-overlay-box").addClass("hidden");
            fn._removeButtons();
            $("body")
                    .removeClass("overflowHidden");
            
            require(["tiljs/event"], function(eventBus){
                eventBus.publish("overlayClosed", {});
            });
        },
        _close :  function(closedByNonUserInteraction){
            if( !state.vidScrollContainer ){
                return;
            }
            if( closedByNonUserInteraction === true ){
                state.overlayClosedByUser = false;
            }else{
                state.overlayClosedByUser = true;
            }
            if( state.isDocked ){
                fn._closeDock();
            }else{
                fn._closeOverlay();
            }

            var vidIframe = state.vidScrollContainer.find("iframe");
            //pause video
            if( vidIframe
                && vidIframe[0]
                && vidIframe[0].contentWindow
                && vidIframe[0].contentWindow.TimesApps.VideoPlayer2.getPlayer("VOD")
                && vidIframe[0].contentWindow.TimesApps.VideoPlayer2.getPlayer("VOD").pause
            ){
                vidIframe[0].contentWindow.TimesApps.VideoPlayer2.getPlayer("VOD").pause();   
            }
            /*
            var videoList = TimesApps.VideoGalleryApp.getVideoList();
            if( 
                videoList 
                && videoList["ABOVEARTICLE"] 
                && videoList["ABOVEARTICLE"].pauseVideoCallBack )
            {
                videoList["ABOVEARTICLE"].pauseVideoCallBack();
            }*/
        },
        _removeButtons : function(){
            $(".vidContainer").find(".buttonContainer").addClass("hidden");
        },
        _getStatus : function(flag){
            return state[flag];
        },
        _setStatus : function(flag, value){
            state[flag] = value;
        },
        _isVideoDocked : function(){
            var status = {
                status : false,
                id : undefined
            }
            if( state.isDocked ){
                status = {
                    status : true,
                    id : state.msid
                };
            }
            
            return status;
        },
        _updateTitle : function(data){
            var title = data.title || "";
            state.vidContainer
                    .find(".jTitle")
                    .text(title);
        },
        _updateOverlay : function(data){
            fn._updateTitle(data);
            var playlistDom = state.vidContainer
                        .find('.jPlaylist');
            var video = state.vidContainer
                                .find(".jPlaylist ul [data-msid=" + data.id + "]");

            if( ! (video && video.length) ){
                return;
            }
            
            var url =   video
                        .eq(0).find("a")
                        .attr("href") || "";
                        
            var eventDataParams = {
                                    url : url,
                                    obj: data,
                                    playlistDom: playlistDom,
                                    title: title,
                                    isOverlay : true
                                };
            require("tiljs/event").publish("onVideoOverlayUpdate", eventDataParams);
        },
        _updateDock : function(data){
            fn._updateTitle(data);
        },
        _init : function(){
            bindEvents();
        }
    }
    
    api = {
        getStatus : function(flag){ return fn._getStatus(flag); },
        setStatus : function(flag, value){ fn._setStatus(flag, value); },
        isVideoDocked : function(){ return fn._isVideoDocked(); },
        close : function(closedByNonUserInteraction){ return fn._close(); } 
    }
    
    fn._init();
    
    return api;
}(jQuery));

define('gaanaplayer', ['jquery', "tiljs/logger", "tiljs/is"], function($, logger,is) {
    var mod_gaanaplayer = {};
    
    var onbeforeventfired =false;


    mod_gaanaplayer.api = {

        init: function() {
            TimesApps.checkGdprAndCall && TimesApps.checkGdprAndCall(mod_gaanaplayer.fn._init, null);

        }
    };

    mod_gaanaplayer.utils = {

        checkIfIE: function() {

            var ua = window.navigator.userAgent;
            var msie = ua.indexOf("MSIE ");
            if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) { // If Internet Explorer, return version number

                return true;
            } else { // If another browser, return 0
                return false;
            }

        }


    }

    // Private Functions
    mod_gaanaplayer.fn = {

        _bindEvents: function() {

            $('#gaanaplayer .box_head').on('click', function(e) {
                e.preventDefault();
                e.stopImmediatePropagation()
                /* Act on the event */

                if ($(this).closest('#gaanaplayer').hasClass('active')) {
                    
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Minimize',window.location.href);
                    mod_gaanaplayer.fn._removeCloseBtn();
                    $("#gaanaplayer").removeClass("active");
                    

                } else {
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Open',window.location.href);
                    
                    $("#gaanaplayer").addClass('active');
                    mod_gaanaplayer.fn._addCloseBtn();
                    mod_gaanaplayer.fn._setIframeLink();
                }
                
            });

            $(document).on('videodash.userAction videodash.videoEvents LIVE_TV_EVENTS MINI_TV_EVENTS', function(event, data, eventType) {
                mod_gaanaplayer.fn._handleVideodashEvents(event, data, eventType);


            });
             $(window).on('beforeunload', function(eventObject) {
                 onbeforeventfired = true;
                 if(document.getElementById('gaanatvplayer') && document.getElementById('gaanatvplayer').contentWindow){
                        var frame = document.getElementById('gaanatvplayer');
                        frame.contentWindow.postMessage('close_browser','*') 
                 }
                
                         
            }); 
            $( window ).unload(function() {
                if(!onbeforeventfired){
                    
                  var frame = document.getElementById('gaanatvplayer');
                frame.contentWindow.postMessage('close_browser','*')
                }
                
                });


            $('.gaanaplayer_box .box_head').on('click', '.close_gaanaplayer', function(event) {
                event.preventDefault();
                
                var frame = document.getElementById('gaanatvplayer');
                frame.contentWindow.postMessage('close_gaanawidget','*')
                mod_gaanaplayer.fn._analyticsFire('Gaana widget','Close',window.location.href);
                mod_gaanaplayer.fn._closeGaanaplayer();
            });



            window.addEventListener('message', mod_gaanaplayer.fn._messageHandler, false);


        },
        _createUI: function() {


            var $container = $('<div class="gaanaplayer_box" id ="gaanaplayer_box"></div>')
            var $header = $('<div class="box_head"><span class="gaanaplayer_title"><img src="/photo/58243404.cms" alt="gaana icon" /> of the Day</span></div>');
            var $iframe = $('<iframe frameborder="0" width="100%" allow="autoplay" height="310px" id="gaanatvplayer" class="jLivePlayer"></iframe>');
            $container.append($header).append($iframe);

            $('#gaanaplayer').append($container);

        },
        _analyticsFire : function(catg, action, label){
	    
	    
	    
	    if(window.ga){
	        ga('send', 'event', catg, action, label, {'nonInteraction': 1});
	    }else{
	        setTimeout(function () {ga('send', 'event', catg, action, label, {'nonInteraction': 1});},5000);
	    }
	    return true;
	},

        _init: function() {

            
            $("#gaanatvplayer").attr('src', '');

            if (
                typeof is.IE== 'function' &&
                is.IE()
            ) {
                // Hide for IE as we Gaana is not supported in IE
                $('#gaanaplayer').hide();

            } else {

                if ($('#minitv #streaming_box') && $('#minitv #streaming_box').is(':visible')) {
                    // Shift Gaana to Left if Minitv is visible
                    $('#gaanaplayer').addClass('shifttoleft');

                }
                
                mod_gaanaplayer.fn._createUI();
                $('#gaanaplayer').show();
                mod_gaanaplayer.fn._bindEvents();


            }

        },
        _addCloseBtn: function() {

            var $closeBtn = $('<a class="close_gaanaplayer"></a>');
            $('.gaanaplayer_box .box_head').append($closeBtn);
        },
        _removeCloseBtn: function() {
            $('.gaanaplayer_box .box_head .close_gaanaplayer').remove();
        },
        _messageHandler: function(message) {

            var trusteddomain = "https://gaana.com";

            //inspect the origin property of the message event to ensure the message originates from the same domain)
            if ( message.origin == trusteddomain ) {
                var status = message.data.status.replace(/\s/g,'').toLowerCase();
                if (status== 'play') {
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Play',message.data.title);
                    mod_gaanaplayer.fn._gaanaplayed();

                } else if (status == 'pause') {
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Pause',message.data.title);
                    mod_gaanaplayer.fn._gaanapaused();

                }
                else if (status=='languagedropdownopen'){
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Drop down open',window.location.href);
                    
                }
                else if (status=='languagechange'){
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Language',message.data.value);
                    
                }
                else if (status=='loading'){
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Loading',message.data.title);
                    mod_gaanaplayer.fn._gaanaplayed();
                    
                }
                else if (status=='seekbackward'){
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Seek backward',message.data.title);
                    
                }
                else if (status=='seekforward'){
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Seek forward',message.data.title);
                    
                }
                


            }

        },


        _pauseGaanaplayer: function() {

            document.getElementById('gaanatvplayer').contentWindow && document.getElementById('gaanatvplayer').contentWindow.postMessage('pause', '*')

        },

        _closeGaanaplayer: function() {

            // document.getElementById('gaanatvplayer').contentWindow && document.getElementById('gaanatvplayer').contentWindow.postMessage('pause', '*')
            // $('#gaanaplayer').hide();
            // $('#gaanatvplayer').attr('src','');
            $('#gaanaplayer').remove();

        },
        
        _pauseAndMinimizePlayer: function(){
            mod_gaanaplayer.fn._pauseGaanaplayer();
            $('#gaanaplayer')
                        .removeClass("active");
            mod_gaanaplayer.fn._removeCloseBtn();
        },

        _gaanaplayed: function() {

            $(document).trigger('GAANA_PLAYER_EVENTS', [{'source' :'GAANA_PLAYER'}, 'playing']);


        },
        _gaanapaused: function() {
            
            $(document).trigger('GAANA_PLAYER_EVENTS', [{'source' :'GAANA_PLAYER'}, 'paused']);


        },
        _triggerPlayerLoaded:function(){
            
            $(document).trigger('GAANA_PLAYER_LOADED', [{'source' : 'GAANA_PLAYER'},'GAANA_PLAYER_LOADED' , mod_gaanaplayer.fn._pauseAndMinimizePlayer]);
        },

        _playGaanaplayer: function() {

            document.getElementById('gaanatvplayer').contentWindow && document.getElementById('gaanatvplayer').contentWindow.postMessage('play', '*')

        },

        _setIframeLink: function() {


            if (!$("#gaanatvplayer").attr("isloadedfirsttime")) {
                mod_gaanaplayer.fn._triggerPlayerLoaded();
                
                var src = mod_gaanaplayer.data.iframeurl;
                $("#gaanatvplayer").attr("src", src).attr('isloadedfirsttime', 'true');
                $("#gaanatvplayer").on('load',function(){
                    document.getElementById('gaanatvplayer').contentWindow && document.getElementById('gaanatvplayer').contentWindow.postMessage('open_gaanawidget', '*')    
                })
                
            }

        },

        _handleVideodashEvents: function(event, eventData, eventType, pauseVideoCallBack) {


            if (eventType.toUpperCase() == 'START') {
                mod_gaanaplayer.fn._pauseGaanaplayer();
            }

        }



    };

    
    mod_gaanaplayer.data = {

        iframeurl: $("#gaanatvplayer").attr('data_src') || 'https://gaana.com/gaanawidget-v7'


    };

    




    return mod_gaanaplayer.api;

});


	

    /* To integrate login please do the following:
     * 1. Fork toiusermanagement_js and usermanagementcss and include it in your project
     * 2. Add below JS files in your project. These files should be added globally
     *  a) <script type="text/javascript" src="https://jssocdn.indiatimes.com/crosswalk/jsso_crosswalk_legacy_0.2.4.min.js"></script>
     *  b) <script src="https://www.google.com/recaptcha/api.js" async="true" defer="true"></script>
     * 3. Update GA events category in the toiusermanagement_js as per your project needs
     * 4. Update usermanagementcss file to change skin of Login modal
    */
    var __PROD_LOGIN__ = false;
    if (__PROD_LOGIN__ || (window.location.hostname.indexOf('timesofindia.indiatimes.com') > -1)){
        window.__jsso_domain = 'https://jsso.indiatimes.com/';
        window.__mytime_domain = '//m.timesofindia.com/mytimesfeed/';
        window.__social_domain = '//socialappsintegrator.indiatimes.com/';
    }else{
        window.__jsso_domain = 'https://jssostg.indiatimes.com/';
        window.__mytime_domain = '//spmdev.timesofindia.com/mytimesfeed/';
        window.__social_domain = '//testsocialappsintegrator.indiatimes.com/';
    }
    define('tiljs/apps/times/usermanagement',[
        "../../util",
        "module",
        "../../page",
        "../../ajax",
        "../times/api",
        "../../is",
        "../../cookie",
        "../../ui",
        "../../logger",
        "../../event",
        "../../load",
        "../../localstorage",
        "../../user",
        "../../analytics/mytimes",
        "primeuserhandler"
    ],
    function (util, module, page, ajax, api, is, cookie, ui, logger, event, load, localstorage, user, mytimes, puser) {
        window.newLogin = true;// This enables twitter share dialog in /share.cms

        var default_config = {
            autoinit: false,
            multiuser: false, //allows multiple users to login at a time
            login: "",
            logout: "",
            check_user_status: "",
            mapping: null,
            mapping1: null,
            renderer: true, //todo to be implemented
            primePaidSuccessHash: 'success',
            primePaidFailureHash: 'failure',
            primeFreeSuccessHash: 'freetrialsuccess',
            primeFreeFailureHash: 'freetrialfailure',
            msid:window.msid
        };
        var config = util.extend(true, {}, default_config, module.config());
        
        var errorConfig = {
            fpNoEmailOrMobile: 'Email/Mobile No. cannot be left blank.',
            fpInvalidEmail: 'Enter a valid Email/Mobile No.',
            fpInvalidEmailOnly: 'Enter a valid email.',
            fpInvalidMobileOnly: 'Enter a valid mobile no.',
            accountUnregistered: 'This account is not registered with us.',
            emptyPassword: 'Password cannot be left blank.',
            emptyName: 'Enter your full name.',
            wrongName: 'Enter your name without special character or numbers.',
            wrongPassword: 'Invalid Credentials',
            wrongMobile: 'Invalid Mobile number.',
            wrongEmail: 'Invalid Email Id.',
            expiredOTP: 'The OTP you entered has expired.',
            limitExceeded: 'Maximum number of unsuccessful attempts exceeded. Please try again later.',
            wrongOtp: 'Enter valid OTP sent to your mobile no.',
            wrongOtpEmail: 'Enter valid OTP sent to your email.',
            matchLastThree: 'Password cannot match your last three passwords.',
            passwordMismatch: 'Your passwords do not match.',
            captchaUnselected: 'Select the checkbox to proceed.',
            tncNotSelected: 'Accept Terms & Conditions to proceed.',
            tpPolicyNotSelected: 'Select the checkbox to proceed.',
            sharedDataNotSelected: 'Select the checkbox to proceed.',
            userAlreadyRegistered: 'This user is already registered with us.',
            serverError: 'An error occurred while processing your request. Please try again later.',
            connectionError: 'There was an error processing your request. Please check your internet connection and try again.',
            email_failure:"Username or password is incorrect. Please try again.",
            facebook_failure:"Username or password is incorrect. Please try again.",
            facebook_failure_user_denied:"Kindly authenticate facebook request. Please try again.",
            facebook_failure_no_email:"Could not login using this facebook account. Please try again with another account.",
            twitter_failure:"Kindly authenticate twitter request.",
            twitter_link_username_failure:"Username or password is incorrect. Please try again.",
            twitter_link_email_failure:"Email or password is incorrect. Please try again.",
            twitter_failure_unknown:"Kindly authenticate twitter request.",
            twitter_failure_user_denied:"Username or password is incorrect. Please try again.",
            twitter_failure_server_error:"Server did not respond. Please try again.",
            twitter_failure_already_exist:"It seems you have already registered with the Indiatimes network using this Email ID. Try linking your Twitter account with your existing Indiatimes account or use an alternate Email ID.",
            twitter_failure_invalid_email:"It seems you have entered and invalid Email ID. Try linking your Twitter account with your existing Indiatimes account or use an alternate Email ID.",
            unknown_error:"Unknown error has occurred. Please try again."
        };
        
        var constants = {
            oauthUrl: window.__jsso_domain + "sso/identity/login/socialLogin?channel={$channel}&oauthsiteid={$siteid}"
        };
        
        var cachedElements = {
            loginPopup: $('#login-popup'),
            emailLoginFormContainer: $('#user-sign-in'),
            mobileLoginFormContainer: $('#mobile-login'),
            formContainer: $('#user-sign-in'),
            closeBtn: $('#login-popup .close-btn')
        }
        
        var ssoLoginType = '', 
            jssoCrosswalkObj, 
            recaptchaCode = '', 
            recaptchaWidgetId = '', 
            pageName='', 
            screenName='Login_Screen',
            MeteredGa="",
            registerFormSubmitted = false,
            __isEUUser = true, // defaults to EU,
            callbackToCallAfterConsent,
            userObj,
            isUserCloseActionForConsentOverlay = true;
            
        
        var userList = {};
        
        var single_user_id = "SINGLE_USER";
        
        var call_sso = function () {
            if (localStorage.getItem('_ssodata') != null) {
                __sso(JSON.parse(localStorage.getItem('_ssodata')));
                localStorage.removeItem('_ssodata');
            }
        }
        // to handle ios chrome issue - where parent is undefined
        var sso = function (url, callback) {
            loginWindow = ui.window(url, {
                width: 850,
                height: 780,
                scrollbars: 0
            }, function (result) {
                if (result && result.code === "200") {
                    mod_login.isLoggedIn();
                } else {
                    if (callback) {
                        callback(null, result);
                    }
                }
            });
            loginWindow.moveTo(315, 250);
        };
        var mod_login = {};
        var loginCallback = null;
        var loginData = null;
        var setLoginError = function (loginErrorMsg) {
            setLoginData({
                error: {
                    code: loginErrorMsg,
                    message: config.messages[loginErrorMsg]
                }
            });
        };
        var setLoginData = function (data) {
            loginData = data;
        };
        var reset = function () {
            return;
            if (loginWindow) {
                loginWindow.close();
                loginWindow = null;
            }
            loginData = null;
        };
        
        var setLocation = function (href) {
            if (is.iframe(loginWindow)) {
                loginWindow.src = href;
            } else {
                loginWindow.document.location.href = href;
            }
        };
        var loginResponse = function (site, error) {
            if(site === 'facebook') {
                $("#sso-fblogin-error").html(errorConfig[error]).show();
            } else {
                $("#sso-gplus-error").html(errorConfig[error]).show();
            }         
        };
        
        var loginResponseTwitter = function (url, error, data) {
            setLocation(url);
            if (error) {
                setLoginError(error);
            } else if (data) {
                setLoginData(data);
            }
        };
        
        var loginWindow = null;
        
        var setCriOS;
        
        if (config.autoinit === true) {
            mod_login.init();
        }
        
        try {
            document.domain = page.getDomain();
        } catch (e) {
            logger.info("Domain cannot be set:" + page.getDomain());
        }
        
        // to handle ios chrome issue - where parent is undefined
        if (navigator.userAgent.match('CriOS')) {
            localStorage.removeItem('_ssodata');
            setCriOS = setCriOS || setInterval(function () {
                    call_sso();
                }, 1000);
        }

        mod_login.getLoginCallback = function () {
            return loginCallback;
        };

        window.getLoginCallback = function () {
            return loginCallback;
        };
        window.getLoginData = function () {
            return loginData;
        };
        window.getDomain = function () {
            return page.getDomain();
        };
        
        window.__sso = function (data, url) {
            var $loginPopup = cachedElements.loginPopup;
            logger.log("__sso called");
            logger.log(data);
            logger.log(loginWindow);
            if (data && loginWindow) {
                logger.log(url);
                var currLoginData = loginData ? loginData.data : null;
                var closeWindow = data.closeWindow,
                    isLogout = data.status === "logout",
                    signInSuccess = data.status === "signinsuccess" || data.status === "ssosigninsuccess",
                    fbOrGplusMappingUpdated = (data.site === "facebook" || data.site === "googleplus" ) && data.status === "MappingUpdated";
                data.site = data.site || "";
                if (closeWindow || isLogout || signInSuccess || fbOrGplusMappingUpdated) {
                    logger.log("Close pressed, closing window / popup");
                    loginWindow.close();
                    $("#sso-fblogin-error, #sso-gplus-error").html('').hide();
                    // Moved after once GA is fired
                    // if($loginPopup.is(':visible')) {
                    //     mod_login.closeBtnHandler();
                    // }
                    
                    if(data.site && (signInSuccess || fbOrGplusMappingUpdated)) {
                        if(window.loginViaComment){
                            mod_login.fireGAEvent(data.site === 'googleplus'? 'Login_Success_comment_Google': 'Login_Success_comment_FB');
                        }else if(window.loginViaRatestar){
                            mod_login.fireGAEvent(data.site === 'googleplus'? 'Login_Success_Rate_Google': 'Login_Success_Rate_FB');
                        }else{
                            mod_login.fireGAEvent(data.site === 'googleplus'? 'Login_Success_Google': 'Login_Success_FB');
                        }
                    }
                    // Moved here
                    if($loginPopup.is(':visible')) {
                        mod_login.closeBtnHandler();
                    }
                } else if (data.status == "ssosigninfailure" && data.ssoerror == "E119") { //E119-username with password incorrect
                    loginResponse(data.site, "email_failure");
                } else if (data.status == "ssosigninfailure" && data.ssoerror == "E104") { //E104-email with password incorrect
                    loginResponse(data.site, "email_failure");
                } else if (data.err == "E104" && data.facebooktoken) { //E104-facebook not sending email
                    loginResponse(data.site, "facebook_failure_no_email");
                } else if (data.status == "signinfailure" && data.error == "F101") {
                    loginResponse(data.site, data.site + "_failure");
                } else if (data.status == "signinfailure" && data.error == "user_denied" && data.site == "facebook") { //facebook user denied access to the account
                    loginResponse(data.site, "facebook_failure_user_denied");
                } /* else if (data.status == "signinfailure" && data.error == "twitter" && data.site == "twitter") { // twitter user denied access to account
                    loginResponseTwitter(config.base_url + "/loginview.cms?x=error&site=twitter", "twitter_failure_unknown");
                } else if (data.error == "E104" && data.site == "twitter") { //when log in with twitter and it is not linked
                    loginResponseTwitter(config.base_url + "/socialconnect.cms?site=twitter", null, {
                        data: data,
                        twitter_connect: true
                    });
                } else if (data.error == "E119" && data.site == "twitter") { //when log in for linking twitter, username/email with wrong pasword
                    loginResponseTwitter(config.base_url + "/socialconnect.cms?site=twitter", "twitter_link_username_failure");
                    loginData.data = currLoginData;
                } else if (data.status == "signinfailure" && data.error == "T102" && data.site == "twitter") { //when twitter server is not responding
                    loginResponseTwitter(config.base_url + "/socialconnect.cms?site=" + data.site, "twitter_failure_server_error");
                } else if (data.error == "E103" && data.site == "twitter") { //when trying to create a new account using already existing id after twitter connect
                    loginResponseTwitter(config.base_url + "/socialconnect.cms?site=" + data.site, "twitter_failure_already_exist", loginData ? loginData.data : null);
                    loginData.data = currLoginData;
                } else if (data.error == "SSO_INVALID_RES_CHK_MAIL_AV" && data.site == "twitter") { //when trying to create a new account a@b.com after twitter connect
                    loginResponseTwitter(config.base_url + "/socialconnect.cms?site=" + data.site, "twitter_failure_invalid_email");
                    loginData.data = currLoginData;
                }*/ else {
                    logger.warn("Login case not handled");
                    loginResponse(data.site, "unknown_error");
                }
            }
            logger.log("Checking user status in __sso");

            mod_login.isLoggedIn(loginCallback);
        };
        mod_login.closeWindow = window.closeLoginWindow = function () {
            if (loginWindow) {
                loginWindow.close();
            }
        };
        
        // mod_login.setPrcForUser = function(callback){
        //     var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
        //     jssoObj.getValidLoggedInUser(callback);
        //     return;
        // };
        
        mod_login.fireGAEvent = function (label) {
            label += ('-' + window.location.pathname);
            ga('send', 'event', 'WEB_Login', mod_login.getScreenName(), label);
        };
        mod_login.fireGAEventMetered = function (action,label) {
                require(["pgtrack"], function(pgtrack) {
                    pgtrack.track('#' + label + '~' + action);
                });
        };
        
        mod_login.setGa = function (name) {
            MeteredGa = name;
        };
        
        mod_login.getGa = function () {
            return MeteredGa;
        };    
        
        /**
         * Returns false if browser is Opera
         *
         * @param 
         * @param 
         */
        mod_login.showCaptcha = function () {
            return (navigator.userAgent.indexOf("Opera") === -1);
        };
        
        mod_login.registerFormSubmitted = function (isSubmitted) {
            registerFormSubmitted = !!isSubmitted;
        };
        
        mod_login.setLoginWindowDimension = window.setLoginWindowDimension = function (width, height) {
            if (loginWindow) {
                loginWindow.resizeTo(width, height);
                if (loginWindow.reposition) { //TODO not working for window.open - popup
                    loginWindow.reposition();
                }
                loginWindow.focus();
            }
        };
        mod_login.login = function (callback, action, identifier) {
            TimesApps.checkGdprAndCall(function() {
                __isEUUser = false;
                mod_login.showLoginScreen(callback, identifier);
                cachedElements.loginPopup.addClass('active');
            }, function() {
                mod_login.showLoginScreen(callback, identifier);
                cachedElements.loginPopup.addClass('active');
            });
        };
        mod_login.loginWithTwitter = function (callback) {
            loginCallback = function (user) {
                event.publish("user.login", user);
                if (callback) {
                    callback(user);
                }
                mod_login.closeBtnHandler();
            };   
            reset();
            
            TimesApps.checkGdprAndCall(function(){
                __isEUUser = false;
                var login_url = constants.oauthUrl.replace('{$channel}', page.getChannel().toLowerCase()).replace('{$siteid}', 'twitter');
                sso(login_url, callback);
            }, function(){
                var login_url = constants.oauthUrl.replace('{$channel}', page.getChannel().toLowerCase()).replace('{$siteid}', 'twitter');
                sso(login_url, callback);
            });
        };
        
        mod_login.loginWithFacebook = function (callback, initiator) {
            loginCallback = function (user) {
                event.publish("user.login", user);
                if (callback) {
                    callback(user);
                }
                mod_login.closeBtnHandler();
            };    

            reset();
            
            mod_login.initiateFbLogin(callback, initiator);
            
        };
        
        // Initiate FB Login
        mod_login.initiateFbLogin = function (callback, initiator) {
            var label = initiator === 'comment' ? 'Click_comment_FB': 'Click_FB';
            label = window.loginViaRatestar ? 'Click_Rate_FB': 'Click_FB';
            window.loginViaComment = initiator === 'comment' ? true : false;
            TimesApps.checkGdprAndCall(function(){
                __isEUUser = false;
                mod_login.setScreenName('Login_Screen');
                mod_login.fireGAEvent(label);
                var login_url = constants.oauthUrl.replace('{$channel}', page.getChannel().toLowerCase()).replace('{$siteid}', 'facebook');
                sso(login_url, callback);
            }, function(){
                mod_login.setScreenName('Login_Screen');
                mod_login.fireGAEvent(label);
                var login_url = constants.oauthUrl.replace('{$channel}', page.getChannel().toLowerCase()).replace('{$siteid}', 'facebook');
                sso(login_url, callback);
            });
        };
        
        mod_login.loginWithGoogle = function (callback, initiator) {
            loginCallback = function (user) {
                event.publish("user.login", user);
                if (callback) {
                    callback(user);
                }
                mod_login.closeBtnHandler();
            };   
            reset();
            mod_login.initiateGplusLogin(callback, initiator);
        };
        
        // Initiates Google login 
        mod_login.initiateGplusLogin = function ( callback, initiator) {
            var label = initiator === 'comment' ? 'Click_comment_Google': 'Click_Google';
            label = window.loginViaRatestar ? 'Click_Rate_Google': 'Click_Google';
            window.loginViaComment = initiator === 'comment' ? true : false;
            TimesApps.checkGdprAndCall(function(){
                __isEUUser = false;
                mod_login.setScreenName('Login_Screen');
                mod_login.fireGAEvent(label);
                var login_url = constants.oauthUrl.replace('{$channel}', page.getChannel().toLowerCase()).replace('{$siteid}', 'googleplus');
                sso(login_url, callback);
            }, function(){
                mod_login.setScreenName('Login_Screen');
                mod_login.fireGAEvent(label);
                var login_url = constants.oauthUrl.replace('{$channel}', page.getChannel().toLowerCase()).replace('{$siteid}', 'googleplus');
                sso(login_url, callback);
            });
        };
        
        mod_login.handleConsentChange = function(e){
            if ($('#toi-forgot-password').is(':visible')) {
                mod_login.fpInputKeyupHandler(e);
                return;
            }
            var $clickedCB = $(this),
                clickedCBID = $clickedCB.attr('id'),
                $consentCBs = $clickedCB.closest('ul').find('.js-contentCB'),
                mandatoryCBIds = ['sharedDataAllowed', 'agree'],
                mandatoriesCheckedCount = 0;

            $.each($consentCBs, function(){
                var $cb = $(this),
                    cbID = $cb.attr('id');
                
                if(mandatoryCBIds.indexOf(cbID) > -1 && $cb.is(':checked')){
                    mandatoriesCheckedCount++;
                }
            });
            
            // mandatory consent items are checked
            if(mandatoryCBIds.length === mandatoriesCheckedCount){
                // enable buttons
                $('#sso-registerBtn').removeAttr('disabled');
                $('#sso-signInButtonDiv > input').removeAttr('disabled');
                $('#consentAcceptButton').removeAttr('disabled');
            }
            // mandatory consent items are NOT checked
            else{
                // disable buttons
                $('#sso-registerBtn').attr('disabled', 'disabled');
                $('#sso-signInButtonDiv > input').attr('disabled', 'disabled');
                $('#consentAcceptButton').attr('disabled', 'disabled');
            }
        }
        
        mod_login.getConsentHTML = function(){
            var consentHTML = '<li class="checkbox">'
                            +     '<p>'
                            +         '<input type="checkbox" class="js-contentCB" id="agree" name="agree" ' + (!__isEUUser? 'checked="checked"': '') + '>'
                            +         '<label for="agree">I warrant that I am 18 years old, and agree with the '
                            +         '<a href="https://jssocdn.indiatimes.com/policy/termsandcondition.html" target="_blank" rel="noopener noreferrer">Terms & Conditions</a> and '
                            +         '<a href="https://jssocdn.indiatimes.com/policy/' + (__isEUUser? 'euprivacypolicy.html': 'privacypolicy.html') + '" target="_blank" rel="noopener noreferrer">Privacy Policy</a> of Times Internet Ltd.<span class="mandatory-field">*</span></label>'
                            +     '</p>'
                            +     '<div class="errorMsg"></div>'
                            + '</li>'
                            + '<li class="checkbox">'
                            +     '<p>'
                            +         '<input type="checkbox" class="js-contentCB" id="sharedDataAllowed" name="sharedDataAllowed" ' + (!__isEUUser? 'checked="checked"': '') + '>'
                            +         '<label for="sharedDataAllowed">I agree to a single sign on for seamless experience across TIL sites<span class="mandatory-field">*</span></label>'
                            +     '</p>'
                            +     '<div class="errorMsg"></div>'
                            + '</li>';
                            
            // return consentHTML;
            return '';
        }
        
        
        mod_login.getNewsletterConsentHTML = function(){
            mod_login.newsletterConsent = true;
            var newsletterConsentHTML = `
                <li class="checkbox">
                    <p>
                        <input type="checkbox" id="newsletter_subscribe" checked>
                        <label for="newsletter_subscribe">Yes, Subscribe to TOI newsletters!</label>
                    </p>
                </li>`
            return newsletterConsentHTML;
        }
        
        mod_login.newsletterConsent = true;
        
        
        mod_login.handleNewsletterConsent = function(e){
            mod_login.newsletterConsent = !mod_login.newsletterConsent
        }
        
        /**
         * Creates Login Screen UI and inserts in page
         *
         * @param 
         * @param 
         */
        mod_login.showLoginScreen = function (callback, loginScreenHtml, loginEventDataObj) {
            var isMobileLogin = false;
            if(loginEventDataObj){
                isMobileLogin = loginEventDataObj.isMobileLogin || false;
            }
            $('#user-sign-in').removeClass('extra-content');
            
            window.loginViaRatestar = loginScreenHtml === 'rate' ? true : false;
            
            loginCallback = function (user) {
                if(isMobileLogin){
                    puser.actionPostMobileLogin(user, loginEventDataObj);
                }
                event.publish("user.login", user);
                // Trigger GA Event for All Login
                if (window.ga) {
                    if(mod_login.newsletterConsent && user && user.getEmail() && user.getUid() && !user.getEmail().includes(user.getUid())){
                        $.ajax({
                            type: "POST",
                            url: 'https://toifeeds.indiatimes.com/treact/feeds/toi/web/post/subscribe-newsletters',
                            data:  JSON.stringify({
                                "emailId": user.getEmail(),
                                "nlIds":[1029,1003,1004,1006],
                                "source":"Etimes_Desktop"
                            }),
                            dataType:"json",
                            contentType: "application/json",
                            success: function(data) {
                                if (data && data.isSuccess === true) {
                                    console.log("Newsletter has been subscribed");
                                }
                            }
                        })
                    }
                    ga('send', 'event', 'Login', 'Mast Head', document.location.href, {'nonInteraction': 1});
                }
                if (callback) {
                    callback(user);
                }
                
            };
            var loginScreen = '';
            loginScreen +=  '<div id="toi-login">'
                        +       '<div class="signin-section">'
                        +           '<figure class="user-icon"><img src="/photo/63379366.cms" src="user-icon" /></figure>'
                        +           '<div id="socialConnectImgDiv">'
                        // +               '<button type="button" id="sso-fb-login" class="fb">Sign in with Facebook</button>'
                        // +               '<span id="sso-fblogin-error" class="errorMsg"></span>'
                        +               '<button type="button" id="sso-gplus-login" class="gplus">Sign in with Google</button>'
                        +               '<span id="sso-gplus-error" class="errorMsg"></span>'
                        +           '</div>'
                        +           '<h4 class="heading small">'
                        +               '<span>or go the traditional way</span>'
                        +           '</h4>'
                        +           '<form class="form" autocomplete="off">'
                        +               '<ul>'
                        +                   '<li class="input-field email">'
                        +                       '<p>'
                        +                           '<input autocomplete="off" type="text" name="emailId" placeholder="Sign In/Sign Up with Email or Mobile No." maxlength="100" />'
                        +                       '</p>'
                        +                       '<div class="errorMsg"></div>'
                        +                       '<a href="javascript:void(0)" id="changeEmailIdDiv" class="secondary-link" style="display: none">Change Email Or Mobile No.</a>'
                        +                   '</li>'
                        +                   '<li class="input-field password" id="sso-pwdDiv">'
                        +                       '<p>'
                        +                           '<input autocomplete="off" type="password" name="password" placeholder="Password" maxlength="14" />'
                        +                           '<span class="view-password"></span>'
                        +                       '</p>'
                        +                       '<div class="errorMsg"></div>'
                        +                       '<a id="sso-generate-otp" href="javascript:void(0)" class="secondary-link">Generate OTP to Login</a>'
                        +                   '</li>'
                        +                   '<li id="sso-login-otp-msg" class="text-field">'
                        +                       '<p></p>'
                        +                   '</li>'
                        +                   '<li class="input-field password" id="sso-otpLoginDiv">'
                        +                       '<p>'
                        +                           '<input type="password" name="otplogin" maxlength="6" placeholder="Enter the verification code"/>'
                        +                       '</p>'
                        +                       '<div class="errorMsg"></div>'
                        +                       '<div class="successMsg"></div>'
                        +                       '<span class="regenerate-otp">Didn\'t receive OTP?</span>'
                        +                       '<a id="sso-regenerate-otp" href="javascript:void(0)" class="secondary-link">Re-Generate OTP</a>'
                        +                   '</li>'
                        +                   '<li class="agree">'
                        +                       '<p>By signing in or creating an account, you agree with our  <a href="https://jssocdn.indiatimes.com/policy/termsandcondition.html" target="_blank" rel="noopener noreferrer"> Terms & Conditions  </a>' 
                        +                             ' and ' 
                        +                            '<a href="https://jssocdn.indiatimes.com/policy/privacypolicy.html" target="_blank" rel="noopener noreferrer"> Privacy Policy. </a>' 
                        +                       '</p>'
                        +                   '</li>'
                        +                   mod_login.getNewsletterConsentHTML()
                        +                   '<li id="sso-signInButtonDiv" class="submit">'
                        +                       '<input type="submit" class="submit-btn disabled" value="Continue" disabled="disabled" />'
                        +                   '</li>'
                        +               '</ul>'
                        +               '<a href="javascript:void(0)" id="sso-forgot-pass" class="forget-password">Forgot Password?</a>'
                        +           '</form>'
                        +       '</div>'
                        +       '<div class="powered-by">'
                        +           '<img src="https://static.toiimg.com/photo/72142679.cms" />'
                        +       '</div>'
                        +       '<div class="teams-logo">'
                        +          '<span>One Network. One Account</span>'
                        +           '<a href="http://timesofindia.indiatimes.com/" target="_blank" class="toi"/><a href="http://economictimes.indiatimes.com/" target="_blank" class="et"/><a href="http://navbharattimes.indiatimes.com/" class="nbt" target="_blank"/><a href="http://maharashtratimes.indiatimes.com/" class="sm" target="_blank"/><a href="http://www.speakingtree.in/" class="st" target="_blank"/><a href="http://itimes.com/" class="itimes" target="_blank"/><a href="http://www.timespoints.com" class="tp" target="_blank"/>'
                        +       '</div>'
                        +   '</div>';
            //cachedElements.formContainer = isMobileLogin ? cachedElements.mobileLoginFormContainer : cachedElements.emailLoginFormContainer;                        
            /*if(isMobileLogin){
                cachedElements.emailLoginFormContainer.hide();
                cachedElements.mobileLoginFormContainer.show();
            }else{
                cachedElements.mobileLoginFormContainer.hide();
                cachedElements.emailLoginFormContainer.show();
            }*/
            cachedElements.formContainer.html((loginScreenHtml !== 'rate') && loginScreenHtml || loginScreen).find('#toi-login').attr(isMobileLogin ? { 'data-login-type' : 'mobile' } : {'data-login-type' : 'email'});
            $('#user-sign-in').find('input[name="emailId"]').focus();
        };
        
        /**
         * Creates Register Screen UI and inserts in page
         *
         * @param 
         * @param 
         */
        mod_login.showRegisterScreen = function (callback) {
            var inputVal = $('#toi-login input[name="emailId"]').val();
            var loginType = mod_login.getLoginType();
            var registerScreen = '';
            registerScreen  +=      '<div id="toi-register">'
                            +           '<div class="signup-section">'
                            +               '<h4 class="heading">'
                            +                   '<span>Complete Your Profile</span>'
                            +               '</h4>'
                            +               '<form class="form" action="#" autocomplete="off">'
                            +                   '<input type="hidden" id="register-inputVal" value="' + inputVal + '"/>'
                            +                   '<ul>'
                            +                       '<li class="input-field ' + (loginType !== 'email'? 'mobile-no': 'email') + '">'
                            +                           '<p>'
                            +                               (loginType !== 'email'? '<span class="country-code">+91 - </span>': '')
                            +                               '<input autocomplete="off" type="text" name="' + (loginType === 'email'? 'emailId': 'mobile') + '" maxlength="100" disabled="disabled" value="' + inputVal  + '" />'
                            +                           '</p>'
                            +                           '<a href="javascript:void(0)" id="changeRegisterEmailId" class="secondary-link">Change Email Or Mobile No.</a>'
                            +                       '</li>'
                            +                       '<li class="input-field user-name">'
                            +                           '<p>'
                            +                               '<input autocomplete="off" type="text" name="fullname" placeholder="Full Name" maxlength="30" />'
                            +                           '</p>'
                            +                           '<div class="errorMsg"></div>'
                            +                       '</li>'
                            +                       '<li class="input-field password">'
                            +                           '<p>'
                            +                               '<input autocomplete="off" type="password" name="registerPwd" placeholder="Password" maxlength="14" />'
                            +                               '<span class="view-password"></span>'
                            +                           '</p>'
                            +                           '<div class="password-conditions">'
                            +                               '<p>Password must have:</p>'
                            +                               '<ul>'
                            +                                   '<li id="charCnt" class="error">6-14 characters</li>'
                            +                                   '<li id="lwCnt" class="error">1 Lower case character (a-z)</li>'
                            +                                   '<li id="numCnt" class="error">1 Numeric character (0-9)</li>'
                            +                                   '<li id="spclCharCnt" class="error">1 special character (Such as #, $, %, &, !)</li>'
                            +                               '</ul>'
                            +                           '</div>'
                            +                       '</li>'
                            +                       '<li class="input-field password">'
                            +                           '<p>'
                            +                               '<input autocomplete="off" type="password" name="registerCnfrmPwd" placeholder="Confirm Password" maxlength="14" />'
                            +                               '<span class="view-password"></span>'
                            +                           '</p>'
                            +                           '<div class="errorMsg"></div>'
                            +                       '</li>'
                            +                       '<li class="input-field ' + (loginType === 'email'? 'mobile-no': 'email') + '">'
                            +                           '<p>'
                            +                               (loginType === 'email'? '<span class="country-code">+91 - </span>': '')
                            +                               '<input autocomplete="off" type="text" name="' + (loginType === 'email'? 'mobile': 'emailId') + '" maxlength="' + (loginType === 'email'? '10': '100') + '" placeholder="' + (loginType === 'email'? 'Mobile Number': 'Email') + ' (Optional)" />'
                            +                           '</p>'
                            +                           '<div class="errorMsg"></div>'
                            +                       '</li>';
                            if(mod_login.showCaptcha()) {
                                registerScreen  +=  '<li class="recaptcha-wrapper">'
                                            +           '<div id="recaptcha-container"></div>'
                                            +           '<div class="errorMsg"></div>'
                                            +       '</li>';    
                            }
                            
                            registerScreen += mod_login.getConsentHTML();
                            
                            registerScreen  +=       '<li class="agree">'
                            +                       '<p>By signing in or creating an account, you agree with our  <a href="https://jssocdn.indiatimes.com/policy/termsandcondition.html" target="_blank" rel="noopener noreferrer"> Terms & Conditions  </a>' 
                            +                               ' and ' 
                            +                            '<a href="https://jssocdn.indiatimes.com/policy/privacypolicy.html" target="_blank" rel="noopener noreferrer"> Privacy Policy. </a>' 
                            +                       '</p>'
                            +                   '</li>'
                            
                            registerScreen +=       '<li class="submit">'
                            +                           '<input type="submit" id="sso-registerBtn" class="submit-btn" value="Update" ' + (__isEUUser? 'disabled="disabled"': '') + '/>'
                            +                       '</li>'
                            +                   '</ul>'
                            +               '</form>'
                            +           '</div>'
                            +       '</div>';
            cachedElements.formContainer.html(registerScreen);
            mod_login.setRecaptchaCode('');
            // Render racaptcha widget.
            if(typeof grecaptcha === 'object' && mod_login.showCaptcha()) {
                recaptchaWidgetId = grecaptcha.render(
                    'recaptcha-container',
                    {
                        "sitekey": "6LcXeh0TAAAAAO1DsEX1iEF8n8-E_hQB67bIpxIw", 
                        "theme": "light",
                        "callback": mod_login.recaptchaResponse,
                        "error-callback": mod_login.recaptchaErrorCallback,
                        "expired-callback": mod_login.recaptchaExpiredCallback
                    }
                )
            }
        };
        
        /**
         * Creates Forgot Password Screen UI and inserts in page
         *
         * @param 
         * @param 
         */
        mod_login.showForgotPasswordScreen = function (callback, showConsentHtml) {
            var inputVal = $('#toi-login input[name="emailId"]').val();
            var loginType = mod_login.getLoginType();
            var fpScreen = '';
            fpScreen +=  '<div id="toi-forgot-password">'
                        +       '<div class="signin-section">'
                        +           '<h4 class="heading">'
                        +               '<span>Forgot Password</span>'
                        +           '</h4>'
                        +           '<p id="forgot-password-sent">'
                        +               'We have sent a 6 digit verification code ' + (loginType !== 'email'? 'on <strong>+91-': 'to <strong>') + inputVal + '</strong>'
                        +           '</p>'
                        +           '<form class="form" autocomplete="off">'
                        +               '<input type="hidden" id="fp-inputVal" value="' + inputVal + '"/>'
                        +               '<ul>'
                        +                   '<li class="input-field password">'
                        +                       '<p>'
                        +                           '<input type="password" name="otpfp" maxlength="6" placeholder="Enter the verification code"/>'
                        +                       '</p>'
                        +                       '<div class="errorMsg"></div>'
                        +                       '<div class="successMsg"></div>'
                        +                       '<span class="regenerate-otp">Didn\'t receive OTP?</span>'
                        +                       '<a id="sso-fp-regenerate-otp" href="javascript:void(0)" class="secondary-link">Re-Generate OTP</a>'
                        +                   '</li>'
                        +                   '<li class="input-field password">'
                        +                       '<p>'
                        +                           '<input autocomplete="off" type="password" name="registerPwd" placeholder="Enter new password" maxlength="14" />'
                        +                           '<span class="view-password"></span>'
                        +                       '</p>'
                        +                           '<span class="subtext">Should not match last 3 passwords.</span>'
                        +                           '<div class="errorMsg"></div>'
                        +                           '<div class="password-conditions">'
                        +                               '<p>Password must have:</p>'
                        +                               '<ul>'
                        +                                   '<li id="charCnt" class="error">6-14 characters</li>'
                        +                                   '<li id="lwCnt" class="error">1 Lower case character (a-z)</li>'
                        +                                   '<li id="numCnt" class="error">1 Numeric character (0-9)</li>'
                        +                                   '<li id="spclCharCnt" class="error">1 special character (Such as #, $, %, &, !)</li>'
                        +                               '</ul>'
                        +                           '</div>'
                        +                   '</li>';
                        if (showConsentHtml) {
                            fpScreen += mod_login.getConsentHTML();
                        }
            fpScreen    +=                  '<li class="submit">'
                        +                       '<input type="submit" id="sso-fp-btn" class="submit-btn disabled" value="Verify & Login" disabled="disabled" />'
                        +                   '</li>'
                        +               '</ul>'
                        +           '</form>'
                        +       '</div>'
                        +   '</div>';
            cachedElements.formContainer.html(fpScreen);
        };
        
        /**
         * Creates Verify OTP Screen UI to be shown after Register page and inserts in page
         *
         * @param Mobile will be set when user tries to Register with mobile and email
         * @param emailId will be set once user verifies Mobile. Format email#mobile
         */
        mod_login.showSignUpOtpScreen = function (ssoid, mobile, emailId, callback) {
            var emailIdArr = emailId && emailId.length > 0? emailId.split('#'): [];
            var inputVal = emailIdArr[0] || $('#register-inputVal').val();
            var email = '';
            var pageName = '';
            var loginType = mod_login.getLoginType();
            if(loginType === 'email' && mobile && mobile.length) {
                pageName = 'mobile';
            } else if(emailIdArr && emailIdArr.length > 0) {
                pageName = 'email';
            } else if(loginType === 'email') {
                pageName = 'email';
            } else {
                pageName = 'mobile';
            }
            
            mod_login.setPageName(pageName);
            
            if(mobile && mobile.length) {
                loginType = 'mobile';
                email = inputVal;
                inputVal = mobile;
            }
            var fpScreen = '';
            fpScreen +=  '<div id="toi-verifyotp-password">'
                        +       '<div class="signin-section">'
                        +           '<h4 class="heading">'
                        +               '<span>Complete Your Profile</span>'
                        +           '</h4>';
            if(emailIdArr.length > 0) {
                fpScreen    +=      '<p class="mn-verified">Mobile number verified: <strong>+91-' + emailIdArr[1] + '</strong><i class="tick"></i>'
                            +       '<p>Verify your email id</p>';
            } else {
                fpScreen    +=      '<p>We have sent a 6 digit verification code on your ' + (loginType !== 'email'? 'Mobile Number': 'Email Id') + '</p>';
            }
                        
            fpScreen    +=          '<form class="form" autocomplete="off">'
                        +               '<input type="hidden" id="verify-inputVal" value="' + inputVal + '"/>'
                        +               '<input type="hidden" id="verify-email" value="' + email + '"/>'
                        +               '<input type="hidden" id="verify-ssoid" value="' + ssoid + '"/>'
                        +               '<input type="hidden" id="verify-logintype" value="' + loginType + '"/>'
                        +               '<ul>'
                        +                   '<li class="input-field ' + (loginType !== 'email'? 'mobile-no': 'email') + '">'
                        +                       '<p>'
                        +                           (loginType !== 'email'? '<span class="country-code">+91 - </span>': '')
                        +                           '<input autocomplete="off" type="text" name="verify-emailid" maxlength="100" disabled="disabled" value="' + inputVal  + '" />'
                        +                       '</p>'
                        +                       '<a href="javascript:void(0)" id="changeRegisterEmailId" class="secondary-link">Change Email/Mobile No.</a>'
                        +                   '</li>'
                        +                   '<li class="input-field password">'
                        +                       '<p>'
                        +                           '<input type="password" name="otpverify" maxlength="6" placeholder="Enter the verification code"/>'
                        +                       '</p>'
                        +                       '<div class="errorMsg"></div>'
                        +                       '<div class="successMsg"></div>'
                        +                       '<span class="regenerate-otp">Didn\'t receive OTP?</span>'
                        +                       '<a id="sso-verify-regenerate-otp" href="javascript:void(0)" class="secondary-link">Re-Generate OTP</a>'
                        +                   '</li>'
                        +                   '<li class="submit">'
                        +                       '<input type="submit" id="' + (emailId? 'sso-verify-email-btn': 'sso-verify-btn') + '" class="submit-btn disabled" value="' + (emailId? 'Verify': 'Verify and Login') + '" disabled="disabled" />'
                        +                   '</li>'
                        +               '</ul>'
                        +           '</form>'
                        +           '<div class="mandatory-box"><p>*Email or mobile no. verification is mandatory to complete the registration process.</p></div>'
                        +       '</div>'
                        +   '</div>';
            cachedElements.formContainer.html(fpScreen);
        };
        
        mod_login.showSuccessMsgScreen = function (isForgotPassword, data) {
            var successScreen = '';
            successScreen   +=  '<div id="toi-success-screen">'
                            +       '<div class="signin-section">'
                            +           '<h4 class="heading">'
                            +               '<span>' + (isForgotPassword? 'Forgot Password': 'Complete Your Profile') + '</span>'
                            +           '</h4>';
            if(isForgotPassword) {
                successScreen   +=      '<div class="fp-success">'
                                +           '<i class=""></i>'
                                +           '<div class="fp-success-msg">Password changed successfully.</div>'
                                +       '</div>';
            } else {
                successScreen   +=      '<div class="register-success">'
                                +           '<div class="verified">'
                                +               '<div>' + (data.email? 'Email Id': 'Mobile Number') + ' verified:</div>'
                                +               '<div><strong>' + (data.email || data.mobile) + '</strong><i class="tick"></i></div>'
                                +           '</div>'
                                +           '<div class="success-wrapper">'
                                +               '<i class="success-user"></i>'
                                +               '<div class="fp-success-msg">Thank you for registering.</div>'
                                +           '</div>'
                                +       '</div>';
            }
            
            successScreen   +=      '</div>'
                            +   '</div>';
                        
            cachedElements.formContainer.html(successScreen);
            
            setTimeout(function(){
                var $loginPopUp = $("#login-popup");
                if($loginPopUp.hasClass('active')) {
                    mod_login.closeBtnHandler();
                }
            }, 5000);
        };
        
        /**
         * Sets recaptcha code once it is validated
         *
         * @param data - Recaptcha string returned in callback
         * @param 
         */
        mod_login.recaptchaResponse = function (data) {
            var $errorElement = $('li.recaptcha-wrapper');
            mod_login.handleError($errorElement);
            mod_login.setRecaptchaCode(data);
        };
        mod_login.recaptchaErrorCallback = function (err) {
            var $errorElement = $('li.recaptcha-wrapper');
            mod_login.handleError($errorElement, errorConfig.serverError);
        };
        mod_login.recaptchaExpiredCallback = function (data) {
            
        };
        /**
         * Sets recaptcha code
         *
         * @param data - Recaptcha string
         * @param 
         */
        mod_login.setRecaptchaCode = function (data) {
            recaptchaCode = data;
        };
        /**
         * returns recaptcha code
         *
         * @param
         * @param 
         */
        mod_login.getRecaptchaCode = function () {
            return recaptchaCode;
        };
        
        mod_login.setMobileNumber =  function (ticketId, callback){
            require(["tiljs/cookie"], function(cookie) {
                var url = window.__jsso_domain + 'sso/crossdomain/v1liteUserProfile?ticketId=' + ticketId + '&channel=' + page.getChannel().toLowerCase();
    		    $.getJSON(url, function (data) {
    		         $.getJSON(url, function (data) {
        		        var exist = data.code=='200' && data.verifiedMobile && data.verifiedMobile.length ==10;
        		        callback(exist);
                    });
                });
            });
        };
        
        mod_login.checkMobileInfo = function(ticketId, force, callback){
            var tthis = this;
            require(["tiljs/cookie"], function(cookie) {
                var ckVal = cookie.get('usermn');
    		    if (ckVal && ckVal=='1' && !force){
    		        return;
    		    }
    		    
    		    function setCookieForMobileNumber(status){
    		        var ckVal = status ? 1 : 2;
    	            cookie.set('usermn', ckVal, 1,  '/', document.domain);
                    callback(status);
    		    }
    		    
    		    if (!ticketId){
        		    var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
    			    jssoObj.getValidLoggedInUser(function(response){
    			         if (response.code=='200'){
    			            tthis.setMobileNumber(response.data.encTicket, setCookieForMobileNumber);
    			         }
    			    });
    		    }else{
    		        tthis.setMobileNumber(ticketId, setCookieForMobileNumber);
    		    }
            });
		};
        
        
        mod_login.logout = function (callback) {
            loginCallback = function () {
                event.publish("user.logout");
                if (callback) {
                    callback();
                }
            };
            if(typeof ga =='function'){
            ga('set', 'dimension10', -1); 
            ga('set', 'dimension21', 0);
            ga('set', 'dimension22', null);
            }
            reset();
            var logout_url = window.__jsso_domain + "sso/identity/profile/logout/external?channel=" + page.getChannel().toLowerCase();
            var ifr = load.iframe(logout_url);
            $(ifr).load(function () {
                $(ifr).remove();
                mod_login.removeUser();
                if (window.__sso) {
                    window.__sso();
                }
            });
            localstorage.remove("sso_user");
            var domain = page.getDomain();
            var cookieList = [
                {name: 'ssoid', path: '/', domain: domain},
                {name: 'Fbsecuritykey', path: '/', domain: domain},
                {name: 'fbookname', path: '/', domain: domain},
                {name: 'CommLogP', path: '/', domain: domain},
                {name: 'CommLogU', path: '/', domain: domain},
                {name: 'FaceBookEmail', path: '/', domain: domain},
                {name: 'Fbimage', path: '/', domain: domain},
                {name: 'fbooklocation', path: '/', domain: domain},
                {name: 'Fboauthid', path: '/', domain: domain},
                {name: 'fbname', path: '/', domain: domain},
                {name: 'fbLocation', path: '/', domain: domain},
                {name: 'fbimage', path: '/', domain: domain},
                {name: 'fbOAuthId', path: '/', domain: domain},
                {name: 'MSCSAuth', path: '/', domain: domain},
                {name: 'MSCSAuthDetail', path: '/', domain: domain},
                {name: 'MSCSAuthDetails', path: '/', domain: domain},
                {name: 'Twimage', path: '/', domain: domain},
                {name: 'TwitterUserName', path: '/', domain: domain},
                {name: 'Twoauthid', path: '/', domain: domain},
                {name: 'Twsecuritykey', path: '/', domain: domain},
                {name: 'ssosigninsuccess', path: '/', domain: domain},
                {name: 'prc', path: '/', domain: domain},
                {name: 'ipr', path: '/', domain: domain},
                {name: 'gdpr', path: '/', domain: domain},
                {name: 'usermn', path: '/', domain: domain},
                {name: 'ssoid'},
                {name: 'MSCSAuthDetail'},
                {name: 'articleid'},
                {name: 'txtmsg'},
                {name: 'tflocation'},
                {name: 'tfemail'},
                {name: 'setfocus'},
                {name: 'fbookname'},
                {name: 'CommLogP'},
                {name: 'CommLogU'},
                {name: 'FaceBookEmail'},
                {name: 'Fbimage'},
                {name: 'fbooklocation'},
                {name: 'Fboauthid'},
                {name: 'Fbsecuritykey'},
                {name: 'fbname'},
                {name: 'fbLocation'},
                {name: 'fbimage'},
                {name: 'fbOAuthId'},
                {name: 'MSCSAuth'},
                {name: 'MSCSAuthDetails'},
                {name: 'ssosigninsuccess'},
                {name: 'Twimage'},
                {name: 'TwitterUserName'},
                {name: 'Twoauthid'},
                {name: 'Twsecuritykey'},
                {name: 'prc'},
                {name: 'ipr'},
                {name: 'usermn'}
            ];
            var counter = 0;

            for(; counter < cookieList.length; counter++) {
                if(cookieList[counter].path) {
                    cookie.remove(cookieList[counter].name, cookieList[counter].path, cookieList[counter].domain);
                } else {
                    cookie.remove(cookieList[counter].name);
                }
            };
            
            // Remove GDPR cookie.
            // document.cookie = 'gdpr=null; expires=Thu, 01 Jan 1970 00:00:01 GMT;'
            
            callbackToCallAfterConsent = null;
            userObj = null;
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
            jssoObj.signOutUser();
            sessionStorage.removeItem('_etnativePrc');
            console.log('logout check');
            if (
              typeof google !== 'undefined' &&
              typeof google.accounts.id.disableAutoSelect === 'function'
            ) {
              google.accounts.id.disableAutoSelect();
            }
            
            // if (typeof toiprops === 'object' && toiprops.toipr === 1) {
            //     toiprops.toipr = -1;
            // }
        };
        var mod_login_config = {
            check_user_status: function (params, callback) {
                var ssoid = cookie.get("ssoid") || cookie.get("ssoId");
                var MSCSAuthDetails = cookie.get("MSCSAuthDetails");
                if (!ssoid && MSCSAuthDetails) {
                    ssoid = MSCSAuthDetails.split("=")[1];
                }
                
                
                if(ssoid && ssoid.length > 0) {
                    var jssoCrosswalkObj = mod_login.setAndGetJssoCrosswalkObj();
					jssoCrosswalkObj.getUserDetails( function (response)
					{
					    if (callback) {
							callback(response.data);
						}
					});
                }else{
    			    var jssoCrosswalkObj = mod_login.setAndGetJssoCrosswalkObj();
    			    jssoCrosswalkObj.getValidLoggedInUser(function(response){
    			        if (response.code=='200'){
    			            var data = response.data;    
    			            var jssonappcdurl = 'https://jsso.indiatimes.com/sso/crossdomain/v1validateTicket?ticketId=' + data.encTicket + '&channel=' + page.getChannel().toLowerCase();
        						ajax.getJSONP(jssonappcdurl, function (data) {
        						
                                    fetch('https://pauth.indiatimes.com/prime-auth/prime/status/setCookies',{
                                        method: "GET",
                                        credentials: 'include'
                                    }).then(function(response){
                                        console.log("*****success",response)
                                        
                                    }).catch(function(err){
                                        console.log("***err",err)
                                        
                                    }).finally(function(){
                                            if (location.hostname.indexOf(".indiatimes.com") > -1) {
                                            var prc = cookie.get("prc");
                                            if(prc){sessionStorage.setItem('_etnativePrc', prc);}
                                             jssoCrosswalkObj.getUserDetails( function (response)
                            					{
                            					    if (callback) {
                            							callback(response.data);
                            						}
                            					});
                                        } 
                                        });
                               
        						   
        						});
    				// 		}
    				            
    				        
    			        }else {
    						if (callback) {
    							callback(null);
    						}
    					}
			    });
                }
            },
            mapping: {
                "uid": "uid",
                "email": "EMAIL", // map email
                "mobileNumber": "M_N", // map mobile
                "id": "_id",
                "name": "FL_N",
                "username": "D_N_U",
                "fullName": "FL_N",
                "firstName": "F_N",
                "lastName": "L_N",
                "icon": "tiny",
                "link": "profile",
                "CITY": "CITY",
                "thumb": "thumb",
                "followersCount": "F_C",
                "FE_C": "FE_C",
                "I_U_A": "I_U_A",
                "I_I_L": "I_I_L",
                "badges": "badges",
                "rewards": "rewards",
                "whatsonid": "W_ID",
                "ps": "SUB_U_J",
                "primestatus": "U_P_S"
            },
			mapping1: {
				//to : from
				"uid": "ssoid",
				"email": "primaryEmail", // map email
				"id": "_id",
				"name": "firstName",
				"username": "D_N_U",
				"fullName": "firstName",
				"firstName": "firstName",
				"lastName": "lastName",
				"icon": "tinyImageUrl",
				"link": "profileImageUrl",
				"CITY": "city",
				"thumb": "thumbImageUrl",
				"followersCount": "F_C",
				"FE_C": "FE_C",
				"I_U_A": "I_U_A",
				"I_I_L": "I_I_L",
				"badges": "badges",
				"rewards": "rewards",
				"whatsonid": "W_ID"
			}
        };
        mod_login.renderPlugins = function (user) {
            user = user || mod_login.getUser();
            $(function () {
                if (user) {
                    $("[data-plugin='user-isloggedin']").show();
                    $("[data-plugin='user-notloggedin']").hide();
                    $("[data-plugin='user-name']").text(user.getFirstName());
                    $("[data-plugin='user-icon']").attr("src", user.getIcon()); //todo debug data-src, was not working, fix in html also
                    $("[data-plugin='user-thumb']").attr("src", user.getThumb());
                    api.getRewards({
                        uid: user.getUid()
                    }, function (rewards) {
                        if (rewards && rewards.output && rewards.output.user && rewards.output.user.levelName) {
                            $("[data-plugin='user-points']").text(( rewards.output.user.statusPoints ));
                            $("[data-plugin='user-level']").text(( rewards.output.user.levelName ));
                            $("[data-plugin='user-points-wrapper']")
                                .show()
                                .addClass("points_" + rewards.output.user.levelName.toLowerCase());
                        } else {
                            $("[data-plugin='user-points-wrapper']").hide();
                        }
                    });
                } else {
                    $("[data-plugin='user-icon']").attr("src", config.default_user_icon); //todo debug data-src, was not working, fix in html also
                    $("[data-plugin='user-thumb']").attr("src", config.default_user_icon);
                    $("[data-plugin='user-isloggedin']").hide();
                    $("[data-plugin='user-notloggedin']").show();
                }

                $("body").toggleClass("loggedin", !!user);
                $("body").toggleClass("notloggedin", !user);
            });
        };
        
        mod_login.register = function () {
            logger.info("Register event called.");
        };
        	var timeDifference = function (dt1, dt2){
        var diff = (dt2.getTime() - dt1.getTime()) / 1000;
        diff /= 60 * 60;
        return Math.abs(Math.round(diff)) > 24;
      };
      var checkForSSOInSavingUserObjAndUpdate = function (
            obj,
            forceExhaustCount
            ) {
            var ssoId = obj.ssoId;
            var ticketId = obj.ticketId;
            var usersSavingData =
              localStorage.getItem('usersSavingData') &&
              localStorage.getItem('usersSavingData') !== null &&
              JSON.parse(localStorage.getItem('usersSavingData'));
          
            if (
              usersSavingData &&
              Object.keys(usersSavingData).length > 0 &&
              usersSavingData[ssoId] &&
              !forceExhaustCount
            ) {
              usersSavingData[ssoId].ticketId = ticketId;
              usersSavingData[ssoId].ssoId = ssoId;
          
              if (obj.articleCount) {
                usersSavingData[ssoId].articleCount = obj.articleCount;
              }
              if (obj.plusArticleCount) {
                usersSavingData[ssoId].plusArticleCount = obj.plusArticleCount;
              }
              usersSavingData[ssoId].ticketId = ticketId;
              localStorage.setItem('usersSavingData', JSON.stringify(usersSavingData));
              return usersSavingData[ssoId];
            }
            var singleUserSavingData = usersSavingData || {};
          
            singleUserSavingData[ssoId] = {
              ssoId:ssoId,
              ticketId:ticketId,
              articleCount: 0,
              plusArticleCount: 0,
              stored_at: new Date()
            };
            localStorage.setItem('usersSavingData', JSON.stringify(singleUserSavingData));
            return null;
          };
     
      	mod_login.getMsid = function ( url ) {
		try {
			if( !url || url.length === 0 || url === "#" ) {
				url = location.href;
				//                return /\/(\d*)\.cms/.exec(url)[1];
				return /(\d*)\.cms/.exec( url )[ 1 ];
			} else {
				return config.msid;
			}
		} catch( e ) {
			return config.msid;
		}
	}

        var timesPrimeSavingApi = function (isPrime, msid){
            require(['tiljs/cookie'], function(cookie){
                var date = new Date();
                var ssoId = cookie.get('ssoid') || cookie.get('ssoId');
                var ticketId = cookie.get('TicketId') || cookie.get('ticket') ||  cookie.get('ticketId');
                var getUserSavingObject = checkForSSOInSavingUserObjAndUpdate({
                  ssoId:ssoId,
                  ticketId:ticketId
                },false);
                if (getUserSavingObject) {
                  if (msid) {
                    if (isPrime) {
                      getUserSavingObject.plusArticleCount += 1;
                    } else {
                      getUserSavingObject.articleCount += 1;
                    }
                  }
                  var dateComp = timeDifference(
                    new Date(getUserSavingObject.stored_at),
                    date
                  );
                  checkForSSOInSavingUserObjAndUpdate(getUserSavingObject,false);
                  if (dateComp || sessionStorage.getItem('savingApiCallTest')) {
                    // comparing two dates if greater than 24 hours
                    var object = {
                      user: {
                        ticketId:ticketId,
                        ssoId:ssoId
                      },
                      otherDetails: {
                        plusArticleCount: getUserSavingObject.plusArticleCount,
                        articleCount: getUserSavingObject.articleCount
                      }
                    };
                    $.ajax({
                       type: "POST",
                       url: 'https://api.timesprime.com/prime/external/updateTOISavings',
                      data: JSON.stringify(object),
                      dataType:"json",
                      contentType: "application/json",
                      success: function(data) {
                        
                        if (data && data.success === true) {
                          checkForSSOInSavingUserObjAndUpdate({ ssoId:ssoId, ticketId:ticketId }, true);
                        }
                    }
                      
                    });
                  }
                }
            });
        };
        var savingCallIfTimesPrime = function (
        isArticleshowV2,
        isPrimeArticle,
        msid
          ){
            if (!window.callSavingApiOnce) {
              window.callSavingApiOnce = true;
                  if (!isArticleshowV2) {
                    timesPrimeSavingApi(false, msid);
                  } else if (isArticleshowV2 && isPrimeArticle) {
                    timesPrimeSavingApi(true, msid);
                  } else if (isArticleshowV2) {
                    timesPrimeSavingApi(false, msid);
                  }
            }
          };
		mod_login.getPrcData=function(){
        require(['tiljs/cookie'], function(cookie) {
            var ssoId = cookie.get('ssoid') || cookie.get('ssoId');
            var ticketId = cookie.get('TicketId') || cookie.get('ticket') ||  cookie.get('ticketId');
            if(ssoId && ticketId){
                $.ajax({
                    // url: 'https://stgpauth.indiatimes.com/prime-auth/mweb/prime/status?rspBody=true&version=2',
                    url: 'https://pauth.indiatimes.com/prime-auth/mweb/prime/status?rspBody=true&version=2',
                    headers: {"ssoId": ssoId, "ticketId": ticketId},
                    success: function(data) {
                        
                        if(data){
                            if(data.accessType === 'TIMESPRIME'){
                                savingCallIfTimesPrime(true, false, mod_login.getMsid(window.location.href))
                            }
                        }
                    },
                    error: function(XMLHttpRequest, textStatus, errorThrown) {
                          console.log("check!!!errr");
                    }
                })
            }
            
        })
    }
        mod_login.isLoggedIn = function (callback, dontCheckConsent) {
            ajax.get(config.check_user_status, {}, function (result) {
                var _user = user.getNewUser(result, config.mapping1);
                var __ssoid = document.cookie.match(/(?:\s)?ssoid=(\w+);?/);
                var __prc = document.cookie.match(/(?:\s)?prc=(\w+);?/);
                if (_user) {
                    _user.loginType = cookie.get("LoginType");
                    _user.facebook = {
                        name: cookie.get("fbookname"),
                        location: cookie.get("fbooklocation"),
                        image: cookie.get("Fbimage"),
                        email: cookie.get("FaceBookEmail"),
                        oauth: cookie.get("Fboauthid")
                    };
                    _user.twitter = {
                        name: cookie.get("TwitterUserName"),
                        image: cookie.get("Twimage"),
                        oauth: cookie.get("Twoauthid")
                    };
                    mod_login.setUser(_user);
                    mod_login.getPrcData();
                    var gdprConsentFn = function() {
                        var gdprConsentObj = { 
                            'toi_gdprcookieconsent' : result.toi_gdprcookieconsent, 
                            'toi_gdprpersonalizedconsent' : result.toi_gdprpersonalizedconsent,
                        }
                        mod_login.checkAndUpdateGDPRConsent(_user, gdprConsentObj);
                    };
                    TimesApps.checkGdprAndCall(null, gdprConsentFn);
                    mod_login.checkAndUpdateTimespointValue();
                    //******* Added by Yatin to track GRX login event *********/
                    if (typeof grx === 'function' && typeof common_utility !="undefined" && typeof grx_module!= "undefined") {
            					grx('track', 'click', {
            						'category': common_utility.getScreenType() + "|" + grx_module.getconfig().platform,
            						'action': "login",
            						'label': window.location.href,
            						'url':window.location.href,
            						'location':common_utility.getLocation(),
            						'screen_type':common_utility.getScreenType(),
            						'network':common_utility.getNetwork(),
            						'subProject' : grx_module.getconfig().grx_subproject,
            						'section':grx_module.getSectionFromUrl(window.location.href),
            						'subSection':grx_module.getSubSectionFromUrl(window.location.href),
            						'email':_user.getEmail()
            					});
            				}
                    /*****************/
                    if(typeof ga=='function'){
                        ga('set', 'dimension21', 1); 
                        ga('set', 'dimension22', __ssoid[1]); 
                        ga('set', 'dimension10', ((__prc && __prc[1]) ? __prc[1] : 0));
                    }
                } else {
                    if(typeof ga=='function'){
                    ga('set', 'dimension10', -1); 
                    ga('set', 'dimension21', 0);
                    }
                    mod_login.removeUser();
                    if (typeof callback === 'function') {
                        callback();
                    }
                }
                
                if (callback) {
                    if (dontCheckConsent || mod_login.isConsentGiven()) {
                        callback(_user);
                    } else {
                        callbackToCallAfterConsent = callback;
                        userObj = _user;
                    }
                }
            });
        };
        mod_login.removeUser = function (userId) {
            if (config.multiuser) {
                if (userId) {
                    delete userList[userId];
                } else {
                    throw new Error("'userId' is required to remove a user.");
                }
            } else {
                delete userList[single_user_id];
            }
            mod_login.statusChange(null);
        };
        mod_login.setUser = mod_login.addUser = function (_user) {
            if (typeof _user !== 'undefined' && !user.isUser(_user)) {
                throw new Error("Object is not an instance of User, use 'user.getNewUser()' to get a User object.");
            }
            if (config.multiuser) {
                userList[_user.id](_user);
            } else {
                userList[single_user_id] = _user;
            }
            mod_login.statusChange(_user);
        };
        mod_login.getUser = function (userId) {
            if (config.multiuser) {
                return util.extend(true, {}, userList[userId]);
            } else {
                return userList[single_user_id];
            }
        };
        
        /*This flow works in EU region only - function call from EU users only*/
        mod_login.checkAndUpdateGDPRConsent = function (user, consentObj) {
            var userId =  user.getUid();
            
            var _mytGdprConsent = consentObj.toi_gdprcookieconsent;
            var _mytGdprPersonalizedConsent = consentObj.toi_gdprpersonalizedconsent;
            
            var _gdprConsentCookie = cookie.get('ckns_policyV2');
            var _gdprPersonalizedConsentCookie = cookie.get('optoutV2');
            
            /*consent is present in myt - sync it to cookie*/
            if(typeof _mytGdprConsent !== 'undefined' && typeof _mytGdprPersonalizedConsent !== 'undefined'){
                //Set it to cookie, if cookie are not present
                TimesApps.checkGdprAndCall(null, function(){
                    _gdprConsentCookie = _mytGdprConsent ? 1 : 0;
                    _gdprPersonalizedConsentCookie = _mytGdprPersonalizedConsent ? 0 : 1;
                    TimesGDPR.common.consentModule.setConsentToCookies(_gdprConsentCookie, _gdprPersonalizedConsentCookie);    
                });
            }
            /*consent is present in cookie - sync it to myt*/
            /*Set myt consent to cookie- as it might be updated through other site*/
            else if(typeof _gdprConsentCookie !== 'undefined' && typeof _gdprPersonalizedConsentCookie !== 'undefined'){
                var toi_gdprcookieconsentVal = !!(parseInt(_gdprConsentCookie, 10));
                var toi_gdprpersonalizedconsentVal = !(parseInt(_gdprPersonalizedConsentCookie, 10));
                //FYI - optout cookie is sync to toi_gdprpersonalizedconsent field in myt.
                var consentObj = { toi_gdprcookieconsent : toi_gdprcookieconsentVal, toi_gdprpersonalizedconsent : toi_gdprpersonalizedconsentVal };
                mytimes.updateGDPRConsent(userId, consentObj, function(data) { console.log('Consent updated for EU: ' + data)} );
            }
        };
        mod_login.statusChange = function (user) {
            logger.info("User Status:" + ( user ? user.toString() : null ));
            event.publish("user.status", user);
            // Refresh Iframes with data-refreshState attr
            mod_login.refreshIframes();
        };

        mod_login.refreshIframes = function () {


            $(window.parent.document).find('iframe[data-refreshstate]').each(function (i, ele) {

                $(ele).attr('src', $(ele).attr('src'))
            })
        };
        mod_login.onStatusChange = function (callback) {
            event.subscribe("user.status", callback);
        };
        mod_login.updateConfig = function (init_config) {
            if (init_config) {
                config = util.extend(true, {}, config, init_config);
            }
        };
        
        /**
         * Callback that calls forgot password API
         *
         * @param
         * @param 
         */
        mod_login.forgotPasswordBtnHandler = function (e) {
            e.preventDefault();
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                loginType = mod_login.getLoginType(),
                inputVal = $('#fp-inputVal').val(),
                $fpScreen = $('#toi-forgot-password'),
                otp = $fpScreen.find('input[name="otpfp"]').val(),
                password = $fpScreen.find('input[name="registerPwd"]').val(),
                fnCall;
            var checkboxLen = $fpScreen.find('.js-contentCB').length;
            if (checkboxLen > 0 && !mod_login.areMandatoryFieldsSelected($fpScreen)) {
                return;
            }
            fnCall = (loginType === 'email'? jssoObj.loginEmailForgotPassword: jssoObj.loginMobileForgotPassword);
            if(typeof fnCall === 'function') {
                mod_login.showLoader();
                fnCall.call(jssoObj, inputVal, otp, password, password, mod_login.handleForgotPasswordVerifyCallback);
                mod_login.fireGAEvent(mod_login.getPageName() + '_PW_Verify');  
            }
        };
        
        mod_login.getTimespointValue = function() {
            return (__isEUUser? '0': '1');
        }
        
        /**
         * Callback returned by Forgot password API with response
         *
         * @param response - Object
         * @param 
         */
        mod_login.handleForgotPasswordVerifyCallback = function (response) {
            var $errorElementOtp = $('#toi-forgot-password input[name="otpfp"]').closest('li');
            var $errorElementPass = $('#toi-forgot-password input[name="registerPwd"]').closest('li');
            var consentCheckboxLen = $('#toi-forgot-password input.js-contentCB').length;
            var loginType = mod_login.getLoginType();
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
            if(response.code === 200) {
                // $('#user-sign-in').html('').hide();
                mod_login.fireGAEvent( 'Login_Success_' + mod_login.getPageName());
                // $('#login-popup .close-btn').click();
                if (consentCheckboxLen > 0) {
                    jssoObj.updateUserPermissions('1', '1', mod_login.getTimespointValue(), function() {
                        mod_login.hideLoader();
                        mod_login.showSuccessMsgScreen(true);
                        mod_login.isLoggedIn(loginCallback);
                        // jssoObj.getValidLoggedInUser(function() {
                        //     mod_login.hideLoader();
                        //     mod_login.showSuccessMsgScreen(true);
                        //     mod_login.isLoggedIn(loginCallback);
                        // });
                    });
                } else {
                    mod_login.hideLoader();
                    mod_login.showSuccessMsgScreen(true);
                    mod_login.isLoggedIn(loginCallback);
                }
            } else {
                // Reset error and success messages
                mod_login.handleError($errorElementOtp);
                mod_login.handleError($errorElementPass);
                $('.successMsg').hide();
                switch(response.code) {
                    case 414: 
                        mod_login.handleError($errorElementOtp, (loginType === 'email'? errorConfig.wrongOtpEmail: errorConfig.wrongOtp));
                        break;
                    case 415:
                        mod_login.handleError($errorElementOtp, errorConfig.expiredOTP);
                        break;
                    case 416:
                        mod_login.handleError($errorElementOtp, errorConfig.limitExceeded);
                        break;
                    case 418:
                        mod_login.handleError($errorElementPass, errorConfig.matchLastThree);
                        break;
                    case 503:
                        mod_login.handleError($errorElementPass, errorConfig.connectionError);
                        break;
                    default:
                        mod_login.handleError($errorElementPass, errorConfig.serverError);
                        
                }
                mod_login.fireGAEvent('API_Error_' + response.code);
            } 
        };
        
        /**
         * Click handler of Forgot password link on Login Screen.
         *
         * @param
         * @param 
         */
        mod_login.forgotPasswordHandler = function (e) {
            if($('#sso-forgot-pass').hasClass('disabled')) {
                return;
            }
            var $emailId = $('#toi-login input[name="emailId"]');
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                loginType = mod_login.getLoginType(),
                inputVal = $('#toi-login input[name="emailId"]').val(),
                $errorElement = $('#toi-login li.email'),
                fnCall;
                
            
            if(inputVal.length === 0) {
                mod_login.handleError($errorElement, errorConfig.fpNoEmailOrMobile);
                return;
            } else if(!loginType) {
                mod_login.handleError($errorElement, errorConfig.fpInvalidEmail);
                return;
            }
            
            mod_login.handleError($errorElement);
            inputVal = (loginType === 'email'? mod_login.getValidEmailId(inputVal): mod_login.getValidMobileNumber(inputVal));
            fnCall = (loginType === 'email'? jssoObj.getEmailForgotPasswordOtp: jssoObj.getMobileForgotPasswordOtp);
            if(typeof fnCall === 'function') {
                mod_login.showLoader();
                fnCall.call(jssoObj, inputVal, mod_login.handleForgotPasswordOTPCallback);
            }
            
            mod_login.setPageName(mod_login.getLoginType());
            mod_login.fireGAEvent(mod_login.getPageName() + '_Forgot_PW');
        };
        
        /**
         * Sets error messages on screens
         *
         * @param $errorElement - Parent element within which error messages have to be set
         * @param msg - Error message to be set
         */
        mod_login.handleError = function ($errorElement, msg) {
            if(msg) {
                $errorElement.parent().addClass('error')
                $errorElement.find('p').addClass('error');
                $errorElement.find('.errorMsg').html(msg).show();
            } else {
                $errorElement.find('p').removeClass('error');
                $errorElement.find('.errorMsg').html('').hide();
                $errorElement.parent().removeClass('error')
            }
        };
        
        mod_login.showForgotPasswordScreenAfterConsentCheck = function (response) {
            mod_login.hideLoader();
            var $errorElement = $('#toi-login li.email');
            var $emailId = $('#toi-login input[name="emailId"]');
            var loginType = mod_login.getLoginType();
            var showConsentHtml = false;
            if(response && response.code === 200 && response.data) {
                if(response.data.termsAccepted !== '1' || response.data.shareDataAllowed !== '1'){
                    showConsentHtml = true;
                }
                mod_login.showForgotPasswordScreen(undefined, showConsentHtml); 
                // var loginType = mod_login.getLoginType();
                mod_login.setScreenName('Forgot_PW');
            } else {
                if(response.code === 410) {
                    mod_login.handleError($errorElement, (loginType === 'email'? errorConfig.fpInvalidEmailOnly: errorConfig.fpInvalidMobileOnly));
                } else if(response.code === 503) {
                    mod_login.handleError($errorElement, errorConfig.connectionError);
                } else {
                    mod_login.handleError($errorElement, errorConfig.serverError);
                }
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        /**
         * Callback after sending OTP for Forgot password
         *
         * @param response - Object
         * @param 
         */     
        mod_login.handleForgotPasswordOTPCallback = function (response) {
            mod_login.hideLoader();
            var $errorElement = $('#toi-login li.email');
            var loginType = mod_login.getLoginType();
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                inputVal = $('#toi-login input[name="emailId"]').val();
            inputVal = (loginType === 'email'? mod_login.getValidEmailId(inputVal): mod_login.getValidMobileNumber(inputVal));
            if(response && response.code === 200) {
                if(typeof jssoObj.checkUserExists === 'function') {
                    mod_login.showLoader();
                    jssoObj.checkUserExists(inputVal, mod_login.showForgotPasswordScreenAfterConsentCheck);
                }
            } else {
                if([405, 406, 407, 408].indexOf(response.code) !== -1) {
                    mod_login.handleError($errorElement, errorConfig.accountUnregistered);
                } else if(response.code === 503) {
                    mod_login.handleError($errorElement, errorConfig.connectionError);
                } else if (response.code === 416) {
                    mod_login.handleError($errorElement, errorConfig.limitExceeded);
                    $('#sso-regenerate-otp, #sso-generate-otp, #sso-forgot-pass').addClass('disabled');
                } else {
                    mod_login.handleError($errorElement, errorConfig.serverError);
                }
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        /**
         * Keyup event handler for Forgot Password page
         *
         * @param response - Object
         * @param 
         */
        mod_login.fpInputKeyupHandler = function (e) {
            var $this = $(this);
            // setTimeout required for paste events.
            setTimeout(function () {
                var $fpScreen = $('#toi-forgot-password');
                var otp = $fpScreen.find('input[name="otpfp"]').val();
                var password = $fpScreen.find('input[name="registerPwd"]').val();
                var $fbBtn = $('#sso-fp-btn');
                var enableFpBtn = true;
                var checkboxLen = $fpScreen.find('.js-contentCB').length;
                
                // check if OTP is number and length is 6 and password is valid
                if(!(!isNaN(otp) && otp.length === 6) || !mod_login.isPasswordValid(password) || (checkboxLen > 0 && !mod_login.areMandatoryFieldsSelected($fpScreen))) {
                    enableFpBtn = false;
                }
                
                $fbBtn.prop('disabled', !enableFpBtn);
                if(enableFpBtn) {
                    $fbBtn.removeClass('disabled');
                } else {
                    $fbBtn.addClass('disabled');
                }
                
                // If keyup is for password field call password error function to handle its errors
                if($this.attr('name') === 'registerPwd') {
                    mod_login.passwordErrors.call($this, e);
                }
            }, 0);
        };
        
        mod_login.areMandatoryFieldsSelected = function(parentElem) {
            var $agree = parentElem.find('input[name="agree"]');
            var $sharedDataAllowed = parentElem.find('input[name="sharedDataAllowed"]');
            var sharedDataAllowed = $sharedDataAllowed.is(':checked');
            var agree = $agree.is(':checked');
            return (sharedDataAllowed && agree);
        };
        
        /**
         * Handles Change Email/Mobile link click
         *
         * @param
         * @param 
         */
        mod_login.changeEmailIdHandler = function (e) {
            $('#sso-pwdDiv, #changeEmailIdDiv, #sso-otpLoginDiv, #sso-login-otp-msg').hide();
            // $('#toi-login li.checkbox').remove();
            mod_login.newsletterConsent = true;
            $("#newsletter_subscribe").prop("checked", true);
            $("#newsletter_subscribe").prop("disabled", false);
            $('#user-sign-in').removeClass('extra-content');
            $('#toi-login input[name="emailId"]').prop('disabled', false).val('').focus();
            $('#sso-signInButtonDiv input[type="submit"]').prop('disabled', true).addClass('disabled');
            $('.errorMsg, .successMsg').hide();
            $('.error').removeClass('error');
            $('#sso-signInButtonDiv > input').val('Continue');
            $('#sso-pwdDiv input[name="password"]').val('');
            $('#sso-otpLoginDiv input[type="password"]').val('');
            $('#sso-regenerate-otp, #sso-fp-regenerate-otp, #sso-verify-regenerate-otp, #sso-generate-otp, #sso-forgot-pass').removeClass('disabled');
            mod_login.fireGAEvent(mod_login.getPageName() + '_Change');
            mod_login.setScreenName('Login_Screen');
        };
        
        /**
         * Shows login screen when user clicks change email on Register page
         *
         * @param
         * @param 
         */
        mod_login.changeRegisterEmailIdHandler = function (e) {
            mod_login.showLoginScreen();
            mod_login.fireGAEvent( mod_login.getPageName() + '_Change');
        };
        
          /**
         * Handles OTP input field on Login page
         *
         * @param
         * @param 
         */
         
        mod_login.handleOtploginKeyUp  = function(e) {
               var $this = $(this);
                var val = $this.val();
                if(val.length>0){
                     $('.errorMsg').html('');
                }
                if(val != '' && val.length == 6) {
                      enableSignIn = true;
                     $('.errorMsg').html('');
                }else {
                    enableSignIn = false;
                }
                 $ssoSignInInputBtn = $('#sso-signInButtonDiv > [type="submit"]');
                 $ssoSignInInputBtn.prop('disabled', !enableSignIn);
        }
         /**
         * Handles Password input field on Login page
         *
         * @param
         * @param 
         */
        mod_login.handlePasswordKeyUp = function(e) {
              var $this = $(this);
                var val = $this.val();
                if(val.length > 0) {
                    enableSignIn = true;
                     $('.errorMsg').html('');
                }else {
                    enableSignIn = false;
                }
                 $ssoSignInInputBtn = $('#sso-signInButtonDiv > [type="submit"]');
                 $ssoSignInInputBtn.prop('disabled', !enableSignIn);
                
               
            
        }
        /**
         * Handles Email Id/ Mobile input field on Login page
         *
         * @param
         * @param 
         */
        mod_login.handleEmailIdKeyUp = function (e) {
            var $this = $(this);
            setTimeout(function (e) {
                var val = $this.val(),
                    checkIsEmail = val.indexOf('@'),
                    checkIsMobile = !isNaN(val) && val.length >= 10,
                    enableSignIn = false,
                    $errorElement = $('#toi-login li.email'),
                    $ssoSignInInputBtn = $('#sso-signInButtonDiv > [type="submit"]');
                    
                $("#newsletter_subscribe").prop("disabled", false);
                    
                    
                if(checkIsEmail && mod_login.getValidEmailId(val).length > 0) {
                    mod_login.setLoginType('email');
                    enableSignIn = true;
                } else if(checkIsMobile && mod_login.getValidMobileNumber(val).length > 0) {
                    mod_login.setLoginType('mobile');
                    enableSignIn = true;
                } else {
                    mod_login.setLoginType('');
                }
                
                $ssoSignInInputBtn.prop('disabled', !enableSignIn);
                mod_login.handleError($errorElement);
                if(enableSignIn) {
                    $ssoSignInInputBtn.removeClass('disabled');
                } else {
                    $ssoSignInInputBtn.addClass('disabled');
                    
                }
            }, 0);
        };
        
        /**
         * API callback of checkUserExists
         *
         * @param response - Response object
         * @param 
         */
        mod_login.checkUserExists = function(response) {
            mod_login.hideLoader();
            var $errorElement = $('#toi-login li.email');
            var $emailId = $('#toi-login input[name="emailId"]');
            var $signInBtn = $('#sso-signInButtonDiv > input');
            var errorMsg = '';
            var loginType = mod_login.getLoginType();
            mod_login.handleError($errorElement);
            if(response && response.code === 200 && response.data) {
                if(response.data.statusCode === 212 || response.data.statusCode === 213) {
                    $('#sso-pwdDiv, #changeEmailIdDiv').show();
                    $signInBtn.val('Sign In');
                    var inputVal = $('#toi-login input[name="emailId"]').val();
                    if(inputVal==''){
                          $signInBtn.attr('disabled', 'disabled');
                    }
                    if(response.data.statusCode === 212){
                        mod_login.newsletterConsent = false;
                        $("#newsletter_subscribe").prop("checked", false);
                        $("#newsletter_subscribe").prop("disabled", true);
                    } else if (response.data.statusCode === 213) {
                        $("#newsletter_subscribe").prop("disabled", false);
                    }
                    if(response.data.termsAccepted !== '1' || response.data.shareDataAllowed !== '1'){
                        if (__isEUUser) {
                            $signInBtn.attr('disabled', 'disabled');
                        }
                        
                        // show and handle consent checkboxes
                        $(mod_login.getConsentHTML()).insertBefore($signInBtn.closest('#sso-signInButtonDiv'));
                        // to handle both fb and google buttons in single line when checkboxes are visible
                        $('#user-sign-in').addClass('extra-content');
                    }
                } else if(response.data.statusCode === 205 || response.data.statusCode === 206 || response.data.statusCode === 214 || response.data.statusCode === 215) {
                    mod_login.registerUser();
                    mod_login.setScreenName('Register_New_User');
                } else {
                    $emailId.prop('disabled', false);
                    errorMsg = response.data.statusCode === 216 ? errorConfig.fpInvalidEmailOnly: errorConfig.fpInvalidEmail;
                    mod_login.handleError($errorElement, errorMsg);
                }
            } else {
                $emailId.prop('disabled', false);
                if(response.code === 410) {
                    mod_login.handleError($errorElement, (loginType === 'email'? errorConfig.fpInvalidEmailOnly: errorConfig.fpInvalidMobileOnly));
                } else if(response.code === 503) {
                    mod_login.handleError($errorElement, errorConfig.connectionError);
                } else {
                    mod_login.handleError($errorElement, errorConfig.serverError);
                }
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        /**
         * Shows register screen
         *
         * @param
         * @param 
         */
        mod_login.registerUser = function() {
            mod_login.showRegisterScreen();
        };
        
        /**
         * Handles Register button click and validates Register form
         *
         * @param
         * @param 
         */
        mod_login.registerButtonHandler = function (e) {
            e.preventDefault();
            mod_login.registerFormSubmitted(true);
            var $register = $('#toi-register');
            var $email = $register.find('input[name="emailId"]');
            var $fullname = $register.find('input[name="fullname"]');
            var $password = $register.find('input[name="registerPwd"]');
            var $cnfrmPassword = $register.find('input[name="registerCnfrmPwd"]');
            var $mobile = $register.find('input[name="mobile"]');
            var recaptcha = mod_login.getRecaptchaCode();
            var $agree = $register.find('input[name="agree"]');
            var $sharedDataAllowed = $register.find('input[name="sharedDataAllowed"]');
            var agree = $agree.is(':checked');
            var isSendOffer = $register.find('input[name="promotions"]').is(':checked');
            // this is to be changed for new value of personalization check box field
            var email = $email.val();
            var fullname = $fullname.val();
            var password = $password.val().trim();
            var cnfrmPassword = $cnfrmPassword.val().trim();
            var mobile = $mobile.val() || '';
            var username = {};
            var validForm = true;
            var loginType = mod_login.getLoginType();
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(), fnCall;
            var $fullNameParent = $fullname.closest('li');
            var $passwordParent = $password.closest('li');
            var $cnfrmPasswordParent = $cnfrmPassword.closest('li');
            var $mobileParent = $mobile.closest('li');
            var $emailParent = $email.closest('li');
            var $agreeParent = $agree.closest('li');
            var $sharedDataAllowedParent = $sharedDataAllowed.closest('li');
            var $recaptchaParent = $('#recaptcha-container').closest('li');
            
            var isValidName = mod_login.checkAndSetFullNameError($fullname, $fullNameParent);
            var isValidCnfrmPassword = mod_login.checkAndSetConfirmPasswordError($cnfrmPassword, $cnfrmPasswordParent);
            var isValidEmailOrMobile = true;
            var isSharedDataAllowed = true;
            // mod_login.checkAndSetSharedDataTnCError($sharedDataAllowed, $sharedDataAllowedParent);
            var isTnCAgreed = true;
            // mod_login.checkAndSetAgreeTnCError($agree, $agreeParent);
            
            if(loginType === 'email') {
                isValidEmailOrMobile = mod_login.checkAndSetEmailOrMobileToRegisterError($mobile, $mobileParent, 'mobile');
            } else {
                isValidEmailOrMobile = mod_login.checkAndSetEmailOrMobileToRegisterError($email, $emailParent, 'email');
            }
            
            if(!isValidName || !isValidCnfrmPassword || !isValidEmailOrMobile || !isTnCAgreed || !isSharedDataAllowed) {
                validForm = false;
            }
            
            if(!mod_login.isPasswordValid(password)) {
                validForm = false;
            }
            
            if(mod_login.showCaptcha()) {
                if(!recaptcha) {
                    validForm = false;
                    mod_login.handleError($recaptchaParent, errorConfig.captchaUnselected);
                } else {
                     mod_login.handleError($recaptchaParent);
                } 
            }
            
            $('.password-conditions').show();
            
            if(validForm) {
                username = mod_login.getFirstAndLastName(fullname);
                // Call registerUser API in case of Opera browser
                fnCall = mod_login.showCaptcha()? jssoObj.registerUserRecaptcha: jssoObj.registerUser;
                if(typeof fnCall === 'function') {
                    mod_login.showLoader();
                    if(mod_login.showCaptcha()) {
                        fnCall.call(jssoObj, username.firstName, username.lastName, '', '', email, mobile, password, isSendOffer, recaptcha, '1', '1', mod_login.getTimespointValue(), mod_login.registerUserCallback);
                    } else {
                        fnCall.call(jssoObj, username.firstName, username.lastName, '', '', email, mobile, password, isSendOffer, '1', '1', mod_login.getTimespointValue(), mod_login.registerUserCallback);
                    }
                }
            }
            
            mod_login.fireGAEvent( mod_login.getPageName() + '_Verify' );
        };
        
        /**
         * Handles keyup events on register button
         *
         * @param
         * @param 
         */
        mod_login.registerFormErrorHandler = function (e) {
            if(!registerFormSubmitted) {
                return;
            }
            
            var $inputElem = $(e.target);
            var inputFieldName = $inputElem.attr('name');
            var $elemParent = $inputElem.closest('li');
            
            if(inputFieldName === 'fullname') {
                mod_login.checkAndSetFullNameError($inputElem, $elemParent);
            } else if (inputFieldName === 'registerCnfrmPwd') {
                mod_login.checkAndSetConfirmPasswordError($inputElem, $elemParent);
            } else if (inputFieldName === 'emailId') {
                mod_login.checkAndSetEmailOrMobileToRegisterError($inputElem, $elemParent, 'email');
            } else if (inputFieldName === 'mobile') {
                mod_login.checkAndSetEmailOrMobileToRegisterError($inputElem, $elemParent, 'mobile');
            } else if (inputFieldName === 'agree') {
                mod_login.checkAndSetAgreeTnCError($inputElem, $elemParent);
            } else if (inputFieldName === 'sharedDataAllowed') {
                mod_login.checkAndSetSharedDataTnCError($inputElem, $elemParent);
            }
        };
        
        mod_login.checkAndSetFullNameError = function (inputElem, elemParent) {
            var nameRegex = /^[a-zA-Z\s]*$/;
            var fullname = inputElem.val();
            var validField = true;
            
            if(!(fullname && fullname.length > 0 && nameRegex.test(fullname))) {
                validField = false;
                if(fullname.length === 0) {
                    mod_login.handleError(elemParent, errorConfig.emptyName);
                } else {
                    mod_login.handleError(elemParent, errorConfig.wrongName);
                }
            } else {
                mod_login.handleError(elemParent);
            }
            
            return validField;
        };
        
        mod_login.checkAndSetConfirmPasswordError = function (inputElem, elemParent) {
            var password = $('#toi-register input[name="registerPwd"]').val().trim();
            var confirmPassword = inputElem.val().trim();
            var validField = true;
            if(password !== confirmPassword) {
                validField = false;
                mod_login.handleError(elemParent, errorConfig.passwordMismatch);
            } else {
                mod_login.handleError(elemParent);
            }
            
            return validField;
        };
        
        mod_login.checkAndSetEmailOrMobileToRegisterError = function (inputElem, elemParent, loginType) {
            var inputFieldVal = inputElem.val();
            var validField = true;
            
            if(inputFieldVal.length === 0 ) {
                mod_login.handleError(elemParent);
            } else {
                inputFieldVal = loginType === 'email'? mod_login.getValidEmailId(inputFieldVal): mod_login.getValidMobileNumber(inputFieldVal, true);
                if(inputFieldVal.length === 0) {
                    validField = false;
                    mod_login.handleError(elemParent, (loginType === 'email'? errorConfig.wrongEmail: errorConfig.wrongMobile));
                } else {
                    mod_login.handleError(elemParent);
                }
            }
            
            return validField;
        };
        
        mod_login.checkAndSetAgreeTnCError = function (inputElem, elemParent) {
            var tncAgreed = inputElem.is(':checked');
            var validField = true;
            
            if(!tncAgreed) {
                validField = false;
                mod_login.handleError(elemParent, errorConfig.tncNotSelected);
            } else {
                mod_login.handleError(elemParent);
            }
            
            return validField;
        };
        
        mod_login.checkAndSetSharedDataTnCError = function (inputElem, elemParent) {
            var sharedDataAgreed = inputElem.is(':checked');
            var validField = true;
            
            if(!sharedDataAgreed) {
                validField = false;
                // mod_login.handleError(elemParent, errorConfig.sharedDataNotSelected);
            } else {
                // mod_login.handleError(elemParent);
            }
            
            return validField;
        };
        
        /**
         * Handles Verify button click on Verify OTP page
         *
         * @param
         * @param 
         */
        mod_login.verifyButtonHandler = function (e) {
            e.preventDefault();
            var $verifyParent = $('#toi-verifyotp-password');
            var intent = $("#verify-inputVal").val();
            var ssoId = $("#verify-ssoid").val();
            var otp = $verifyParent.find('input[name="otpverify"]').val();
            var actualLoginType = mod_login.getLoginType();
            var loginType = $('#verify-logintype').val();
            var emailId = $('#verify-email').val() || '';
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
            var fnCall = (loginType === 'email'? jssoObj.verifyEmailSignUp: jssoObj.verifyMobileSignUp);
            if(typeof fnCall === 'function') {
                mod_login.showLoader();
                fnCall.call(jssoObj, intent, ssoId, otp, mod_login.handleSignUpVerifyCallback((actualLoginType !== loginType && emailId? emailId: ''), ssoId));
                mod_login.fireGAEvent(mod_login.getPageName() + '_Verify');
            }
        };
        
        /**
         * Handles Verify Email button click on Verify OTP page
         *
         * @param
         * @param 
         */
        mod_login.verifyEmailButtonHandler = function (e) {
            e.preventDefault();
            // Duplicate method to handle any different functionality if any
            mod_login.verifyButtonHandler(e);
        };
        
        /**
         * Enable Verify button of valid OTP is entered on Verify OTP page
         *
         * @param
         * @param 
         */
        mod_login.enableVerifyButton = function (e) {
            var $this = $(this);
            setTimeout(function(){
                var otp = $this.val();
                var $submitBtn = $('#sso-verify-btn');
                if(!$submitBtn.is(':visible')) {
                    $submitBtn = $('#sso-verify-email-btn');
                }
                if(!isNaN(otp) && otp.length ===6 ) {
                    $submitBtn.prop('disabled', false).removeClass('disabled');
                } else {
                    $submitBtn.prop('disabled', true).addClass('disabled');
                }
            }, 0);
        };
        
        /**
         * Returns callback for Register User API
         *
         * @param emailId, sso - Sets in case user tries to register with both email and mobile
         * @param response - API response
         */
        mod_login.handleSignUpVerifyCallback = function (emailId, sso, response) {
            return function (response) {
                mod_login.hideLoader();
                var $errorElementOtp = $('#toi-verifyotp-password input[name="otpverify"]').closest('li');
                var loginType = $('#verify-logintype').val();
                var mobile = '';
                var $inputVal = $("#verify-inputVal");
                var verifiedData = {};
                if(response && response.code === 200) {
                    mod_login.fireGAEvent( 'Login_Success_' + mod_login.getPageName());
                    if(!emailId || !sso) {
                        if(loginType === 'email') {
                            verifiedData.email = $inputVal.val();
                        } else {
                            verifiedData.mobile = $inputVal.val();
                        }
                        mod_login.showSuccessMsgScreen(false, verifiedData);
                    } else {
                        mobile = $inputVal.val();
                        mod_login.showSignUpOtpScreen(sso, '', emailId + '#' + mobile);
                    }
                    
                    mod_login.isLoggedIn(loginCallback);
                } else {
                    $('.successMsg').hide();
                    switch(response.code) {
                        case 414: 
                            mod_login.handleError($errorElementOtp, (loginType === 'email'? errorConfig.wrongOtpEmail: errorConfig.wrongOtp));
                            break;
                        case 415:
                            mod_login.handleError($errorElementOtp, errorConfig.expiredOTP);
                            break;
                        case 416:
                            mod_login.handleError($errorElementOtp, errorConfig.limitExceeded);
                            break;
                        case 503:
                            mod_login.handleError($errorElementOtp, errorConfig.connectionError);
                            break;
                        default:
                            mod_login.handleError($errorElementOtp, (errorConfig.serverError));
                            
                    }
                    
                    mod_login.fireGAEvent('API_Error_' + response.code);
                }   
            }
        };
        
        
        mod_login.registerUserCallback = function (response) {
            mod_login.hideLoader();
            var $errorElement = $('#sharedDataAllowed').closest('li');
            var mobile = $('#toi-register input[name="mobile"]').val();
            if(response && response.code === 200) {
                mod_login.showSignUpOtpScreen(response.data.ssoid, mobile);
                mod_login.setScreenName('Complete_Profile');
            } else {
                if(response.code === 429) {
                    mod_login.handleError($errorElement, errorConfig.userAlreadyRegistered);
                } else if (response.code === 416) {
                    mod_login.handleError($errorElement, errorConfig.limitExceeded);
                } else if(response.code === 503) {
                    mod_login.handleError($errorElement, errorConfig.connectionError);
                } else {
                    mod_login.handleError($errorElement, errorConfig.serverError);
                }
                
                if(typeof grecaptcha === 'object' && mod_login.showCaptcha()) {
                    grecaptcha.reset(recaptchaWidgetId);
                }
                
                mod_login.setRecaptchaCode('');
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        mod_login.getFirstAndLastName = function (name) {
            var nameArr = [];
            var nameObj = {firstName: '', lastName: ''};
            if(name && name.length > 0) {
                name = name.replace(/  +/g, ' ');
                nameArr = name.split(' ');
                nameObj.firstName = nameArr[0] || '';
                if(nameArr.length > 1) {
                    nameArr.splice(0,1);
                    nameObj.lastName = nameArr.join(' ');
                }
            }
            
            return nameObj;
        };
        
        mod_login.loginWithOTP = function(e, isRegenerate) {
            // Do not perform any action if generate otp is disabled
            if($('#sso-generate-otp').hasClass('disabled')) {
                return;
            }
            
            var $emailId = $('#toi-login input[name="emailId"]');
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                loginType = mod_login.getLoginType(),
                inputVal = $('#toi-login input[name="emailId"]').val(),
                fnCall;
            
            inputVal = (loginType === 'email'? mod_login.getValidEmailId(inputVal): mod_login.getValidMobileNumber(inputVal));
            fnCall = (loginType === 'email'? jssoObj.getEmailLoginOtp: jssoObj.getMobileLoginOtp);
            if(typeof fnCall === 'function') {
                mod_login.showLoader();
                if($('#toi-login input[name="otplogin"]').val()==''){
                     $ssoSignInInputBtn = $('#sso-signInButtonDiv > [type="submit"]');
                     $ssoSignInInputBtn.prop('disabled',true);
                    
                }
                fnCall.call(jssoObj, inputVal, mod_login.handleLoginOTPCallback(isRegenerate));
                if(isRegenerate) {
                    mod_login.fireGAEvent( mod_login.getPageName() + '_Re_OTP');
                } else {
                    mod_login.fireGAEvent(mod_login.getPageName() + '_OTP_Submit');   
                }
            }
        };
        
        // Duplicate method in case any message needed for regenerate OTP logic        
        mod_login.regenerateLoginOTP = function() {
            // Do not perform any action if regenerate otp is disabled
            if($('#sso-regenerate-otp').hasClass('disabled')) {
                return;
            }
            
            mod_login.loginWithOTP({}, true);
        };
        
        mod_login.fpRegenerateOTP = function () {
            // Do not perform any action if regenerate OTP button is disabled
            if($(this).hasClass('disabled')) {
                return;
            }
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                loginType = mod_login.getLoginType(),
                inputVal = $('#fp-inputVal').val(),
                fnCall;
  
            fnCall = (loginType === 'email'? jssoObj.getEmailForgotPasswordOtp: jssoObj.getMobileForgotPasswordOtp);
            if(typeof fnCall === 'function') {
                mod_login.showLoader();
                fnCall.call(jssoObj, inputVal, mod_login.handleForgotPasswordRegenerateOTPCallback);
                mod_login.fireGAEvent(mod_login.getPageName() + '_Re_OTP');
            }
        };
        
        mod_login.handleForgotPasswordRegenerateOTPCallback = function (response) {
            mod_login.hideLoader();
            var $errorElement = $('input[name="otpfp"]').parent().parent();
            mod_login.handleError($errorElement);
            if(response && response.code === 200) {
                $('#toi-forgot-password input[name="otpfp"]').val('');
                $('.successMsg').text('OTP has been successfully sent.').show();
            } else {
                $('.successMsg').hide();
                switch(response.code) {
                    case 416:
                        mod_login.handleError($errorElement, errorConfig.limitExceeded);
                        $('#sso-fp-regenerate-otp').addClass('disabled');
                        $('#forgot-password-sent').hide();
                        break;
                    case 503:
                        mod_login.handleError($errorElement, errorConfig.connectionError);
                        break;
                    default:
                        mod_login.handleError($errorElement, errorConfig.serverError);
                    
                }
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        mod_login.verifyPageRegenerateOTP = function () {
            if($('#sso-verify-regenerate-otp').hasClass('disabled')) {
                return;
            }
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                loginType = $('#verify-logintype').val(),
                inputVal = $('#verify-inputVal').val(),
                ssoId = $('#verify-ssoid').val(),
                fnCall;
  
            fnCall = (loginType === 'email'? jssoObj.resendEmailSignUpOtp: jssoObj.resendMobileSignUpOtp);
            if(typeof fnCall === 'function') {
                mod_login.showLoader();
                fnCall.call(jssoObj, inputVal, ssoId, mod_login.handleSignUpVerifyRegenerateOTPCallback);
                mod_login.fireGAEvent(mod_login.getPageName() + '_Re_OTP');
            }
        };
        
        mod_login.handleSignUpVerifyRegenerateOTPCallback = function (response) {
            mod_login.hideLoader();
            var $errorElement = $('#toi-verifyotp-password li.password:visible');
            mod_login.handleError($errorElement);
            if(response && response.code === 200) {
                $('#toi-verifyotp-password input[name="otpverify"]').val('');
                $('.successMsg').text('OTP has been successfully sent.').show();
            } else {
                $('.successMsg').hide();
                switch(response.code) {
                    case 416:
                        mod_login.handleError($errorElement, errorConfig.limitExceeded);
                        $('#sso-verify-regenerate-otp').addClass('disabled');
                        break;
                    case 503:
                        mod_login.handleError($errorElement, errorConfig.connectionError);
                        break;
                    default:
                        mod_login.handleError($errorElement, errorConfig.serverError);
                    
                }
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        mod_login.handleLoginOTPCallback = function(isRegenerate) {
            return function (response) {
                mod_login.hideLoader();
                var $errorElement = $('#toi-login li.password:visible');
                mod_login.handleError($errorElement);
                if(response && response.code === 200) {
                    var loginType = mod_login.getLoginType();
                    var inputVal = $('#toi-login input[name="emailId"]').val();
                    inputVal = (loginType === 'email'? mod_login.getValidEmailId(inputVal): mod_login.getValidMobileNumber(inputVal));
                    $('#sso-pwdDiv').hide();
                    $('#sso-otpLoginDiv, #sso-login-otp-msg').show();
                    $('#sso-login-otp-msg > p').text('We have sent a 6 digit verification code ' + (loginType === 'email'? 'to ': 'on +91-') + inputVal);
                    if(isRegenerate) {
                        $('#toi-login input[name="otplogin"]').val('');
                        $('#sso-otpLoginDiv .successMsg').text('OTP has been successfully sent.').show();
                    }
                } else {
                    $('#sso-otpLoginDiv .successMsg').hide();
                    switch(response.code) {
                        case 416:
                            mod_login.handleError($errorElement, errorConfig.limitExceeded);
                            // Disable Regenerate OTP button and remove text message specifying OTP has been sent
                            $('#sso-regenerate-otp, #sso-generate-otp, #sso-forgot-pass').addClass('disabled');
                            $('#sso-login-otp-msg > p').text('');
                            break;
                        case 503:
                            mod_login.handleError($errorElement, errorConfig.connectionError);
                            break;
                        default:
                            mod_login.handleError($errorElement, errorConfig.serverError);
                        
                    }
                    
                    mod_login.fireGAEvent('API_Error_' + response.code);
                }
            }
        };
        
        mod_login.fbLoginHandler = function (e) {
            var callback = function () {
                mod_login.closeBtnHandler();
            };
            
            mod_login.initiateFbLogin(callback);
        };
        
        mod_login.gplusLoginHandler = function () {
            var callback = function () {
                mod_login.closeBtnHandler();
            };
            
            mod_login.initiateGplusLogin(callback);
        };
        
        mod_login.handleLoginCallback = function (response) {
            mod_login.hideLoader();
            var isOtpDivVisible = $('#sso-otpLoginDiv').is(':visible');
            var $errorElement = $('#toi-login li.password:visible');
            var loginType = mod_login.getLoginType();
            if(response && response.code === 200) {
                mod_login.closeBtnHandler();
                mod_login.isLoggedIn(loginCallback);
                mod_login.fireGAEvent('Login_Success_' + mod_login.getPageName());
                 $ssoSignInInputBtn = $('#sso-signInButtonDiv > [type="submit"]');
                 $ssoSignInInputBtn.prop('disabled', false);
                //   window.location.reload(false);
            } else {
                $('.successMsg').hide();
                switch(response.code) {
                    case 415:
                        mod_login.handleError($errorElement, (!isOtpDivVisible? errorConfig.wrongPassword: errorConfig.expiredOTP));
                        break;
                    case 416:
                        mod_login.handleError($errorElement, errorConfig.limitExceeded);
                        break;
                    case 503:
                        mod_login.handleError($errorElement, errorConfig.connectionError);
                        break;
                    default:
                        mod_login.handleError($errorElement, (!isOtpDivVisible? errorConfig.wrongPassword: (loginType === 'email'? errorConfig.wrongOtpEmail: errorConfig.wrongOtp )));
                        
                }
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        mod_login.handleEmailIdClick = function (e) {
            e.preventDefault();
            var $password = $('#sso-pwdDiv input[name="password"]');
            var $otp = $('#sso-otpLoginDiv input[type="password"]');
            var $emailId = $('#toi-login input[name="emailId"]');
            var password = '';
            var $errorMsgElem = $('#toi-login li.password:visible .errorMsg');
            
            var $loginCont = $('#toi-login');
            var $agree = $loginCont.find('input[name="agree"]');
            var $sharedDataAllowed = $loginCont.find('input[name="sharedDataAllowed"]');
            var $agreeParent = $agree.closest('li');
            var $sharedDataAllowedParent = $sharedDataAllowed.closest('li');
            var sharedDataAllowed = mod_login.checkAndSetSharedDataTnCError($sharedDataAllowed, $sharedDataAllowedParent) ? '1' : '0';
            var tnCAgreed = mod_login.checkAndSetAgreeTnCError($agree, $agreeParent) ? '1' : '0';
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                loginType = mod_login.getLoginType(),
                inputVal = $('#toi-login input[name="emailId"]').val(),
                fnCall,
                isGDPRSpecific = $('#toi-login input.js-contentCB').length > 0,
                inputVal = (loginType === 'email'? mod_login.getValidEmailId(inputVal): mod_login.getValidMobileNumber(inputVal));
            
            $emailId.prop('disabled', true);
            
            if($password.is(':visible') || $otp.is(':visible')) {
                // fnCall = (loginType === 'email'? jssoObj.verifyEmailLogin: jssoObj.verifyMobileLogin);
                if (isGDPRSpecific && (sharedDataAllowed !== '1' || tnCAgreed !== '1')) {
                    return;
                }
                fnCall = (function(){
                    var fn;
                    // consent checkboxes are visible on form use gdpr specific api methods
                    if(isGDPRSpecific){
                        if(loginType === 'email'){
                            fn = jssoObj.verifyEmailLoginGdpr;
                        }
                        else{
                            fn = jssoObj.verifyMobileLoginGdpr;
                        }
                    }
                    // use non gdpr api methods
                    else if(loginType === 'email'){
                        fn = jssoObj.verifyEmailLogin;
                    }
                    else{
                        fn = jssoObj.verifyMobileLogin;
                    }
                    return fn;
                })();
                password = $password.is(':visible')? $password.val(): $otp.val();
                mod_login.fireGAEvent(mod_login.getPageName() + ($password.is(':visible')? '_PW': '_OTP') + '_Entry');
                if(password.length === 0) {
                    $errorMsgElem.html(errorConfig.emptyPassword).show();
                    return;
                } else if(typeof fnCall === 'function') {
                    $('.errorMsg').html('').hide();
                    mod_login.showLoader();
                    $ssoSignInInputBtn = $('#sso-signInButtonDiv > [type="submit"]');
                    $ssoSignInInputBtn.prop('disabled', true);
                    if(isGDPRSpecific){
                        fnCall.call(jssoObj, inputVal, password, tnCAgreed, sharedDataAllowed, mod_login.getTimespointValue(), mod_login.handleLoginCallback);
                    }
                    else{
                        fnCall.call(jssoObj, inputVal, password, mod_login.handleLoginCallback);
                    }
                }
            } else {
                if(typeof jssoObj.checkUserExists === 'function') {
                    mod_login.showLoader();
                    jssoObj.checkUserExists(inputVal, mod_login.checkUserExists);
                    mod_login.setPageName(loginType);
                    mod_login.fireGAEvent(mod_login.getPageName() + '_Continue');
                } else {
                    $emailId.prop('disabled', false);
                }
            }
        };
        
        mod_login.getValidEmailId = function (email) {
            var regEmail = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,6})$/;
            var emailId = '';
            if(regEmail.test(email)) {
                emailId = email;
            }
            
            return emailId;
        };
        
        // withoutPrefix parameter is needed to check for valid number without +91 or 0 appended
        mod_login.getValidMobileNumber = function (mobile, withoutPrefix) {
            var regMobile = (withoutPrefix? /^[6789]\d{9}$/ : /^(\+91)?[0]?[6789]\d{9}$/);
            var notAllowedNumbers = ['6666666666', '7777777777', '8888888888', '9999999999'];
            var mobileNo = '';
            var length = mobile.length;
            if(regMobile.test(mobile)) {
                mobileNo = mobile.substring(mobile.length - 10, mobile.length);
            }
            
            if(notAllowedNumbers.indexOf(mobileNo) !== -1) {
                mobileNo = '';
            }
            
            return mobileNo;
        };
        
        mod_login.closeModalOnEscapeKeyPress = function (e) {
            if(!cachedElements.loginPopup.hasClass('active')) {
                return;
            }
            var keyCode = e.keyCode || e.which;
            if(keyCode === 27) {
                cachedElements.closeBtn.click();
            }
        };
        
        mod_login.isPasswordValid = function (password){
            return password && password.length >= 6 && password.length <= 14 && mod_login.hasNumber(password) && mod_login.hasSpecialCharacters(password) && mod_login.hasLowerCase(password);
        };
        
        mod_login.hasLowerCase = function (str) {
            return (/[a-z]/.test(str));
        };
        
        mod_login.hasNumber = function (str) {
            return (/[0-9]/.test(str));
        };
        
        mod_login.hasSpecialCharacters = function (str) {
            return (/[!@#$%^&*()]/.test(str));
        };
        
        mod_login.passwordErrors = function (e) {
            var $this = $(this);
            setTimeout(function(){
                var password= $this.val();
                if(password.length < 6 || password.length > 14){
                    $("#charCnt").removeClass('success').addClass('error');
                }else{
                    $("#charCnt").removeClass('error').addClass('success');
                }
                if(mod_login.hasLowerCase(password)){
                    $("#lwCnt").removeClass('error').addClass('success');
                }else{
                    $("#lwCnt").removeClass('success').addClass('error');
                }
                if(mod_login.hasNumber(password)){
                    $("#numCnt").removeClass('error').addClass('success');
                }else{
                    $("#numCnt").removeClass('success').addClass('error');
                }
                if(mod_login.hasSpecialCharacters(password)){
                    $("#spclCharCnt").removeClass('error').addClass('success');
                }else{
                    $("#spclCharCnt").removeClass('success').addClass('error');
                }
            }, 0);
            
            // return validPassword;
        };
        
        mod_login.showPassword = function (e) {
            var $this = $(this);
            $this.prev().attr('type', 'text');
            $this.removeClass('view-password').addClass('hide-password');
        };
        
        mod_login.hidePassword = function (e) {
            var $this = $(this);
            $this.prev().attr('type', 'password');
            $this.removeClass('hide-password').addClass('view-password');
        };
        
        mod_login.showPasswordCondition = function (e) {
            e.stopPropagation();
            $('.password-conditions').show();
        };
        
        mod_login.stopEventProp = function (e) {
            e.stopPropagation();  
        };
        
        mod_login.setLoginType = function (type) {
            if (type=='email'){
                mod_login.newsletterConsent = true;
                $("#newsletter_subscribe").prop("checked", true);
                $("#newsletter_subscribe").prop("disabled", false);
            }else if(type=='mobile'){
                mod_login.newsletterConsent = false;
                $("#newsletter_subscribe").prop("checked", false);
                $("#newsletter_subscribe").prop("disabled", true);
            }
            ssoLoginType = type;
        }
        
        mod_login.getLoginType = function () {
            return ssoLoginType;
        }
        
        mod_login.setPageName = function(loginType) {
            pageName = (loginType === 'email'? 'Email': 'MobNo');
        }
        
        mod_login.getPageName = function() {
            return pageName;
        }
        
        mod_login.setScreenName = function (name) {
            screenName = name;
        };
        
        mod_login.getScreenName = function (name) {
            return screenName;
        };
        
        mod_login.setAndGetJssoCrosswalkObj = function () {
            var jssoObj = {};
            if(typeof jssoCrosswalkObj === 'object') {
                jssoObj = jssoCrosswalkObj;
            } else if (typeof JssoCrosswalk === 'function') {
                jssoCrosswalkObj = new JssoCrosswalk('toi', 'web');
                jssoObj = jssoCrosswalkObj;
            }
            
            return jssoObj;
        }
        
        mod_login.showLoader = function() {
            cachedElements.formContainer.addClass('loader');
        }
        
        mod_login.hideLoader = function() {
            cachedElements.formContainer.removeClass('loader');
        }
        
        mod_login.closeBtnHandler = function() {
            window.loginViaRatestar = null;
            cachedElements.loginPopup.removeClass('active');
            mod_login.setScreenName('Login_Screen');
            $('body').removeClass('disable-scroll');
            $('#user-sign-in.toggle').removeClass("toi-user-login");
            if(typeof grecaptcha === 'object' && $('#toi-register').is(':visible') && mod_login.showCaptcha()) {
                grecaptcha.reset(recaptchaWidgetId);   
            }
        };
        
        mod_login.showConsentPopUp = function(){
            var popUpHtml = '<div class="userConsentPopUp">'
                          +     '<div class="consentHeader">'
                          +         '<h2>Welcome Back to THE TIMES OF INDIA</h2>'
                          +         '<span class="closeBtn">+</span>'
                          +     '</div>'
                          +     '<div class="consentDescription">'
                          +         '<p><strong>One Last Step!</strong></p>'
                          +         '<p>We tailor your experience and understand how you and other visitors use this website by using cookies and other technologies. This means we are able to keep this site free-of-charge to use.</p>'
                          +         '<p>Please provide consent for the following scenarios so that we can ensure an enjoyable experience for you on our websites and mobile apps.</p>'
                          +     '</div>'
                          +     '<ul class="consentItemsList">'
                          +         mod_login.getConsentHTML()
                          +     '</ul>'
                          +     '<div class="btn-container">'
                          +         '<input id="consentAcceptButton" type="button" value="AGREE" ' + (__isEUUser? 'disabled="disabled"': '') + '/>'
                          +     '</div>'
                          + '</div>';
            
            isUserCloseActionForConsentOverlay = true;
            
            TimesApps.overlayModule.create({
                id : 'userConsentPopUp',
                isFullscreen : true,
                html : popUpHtml,
                classString: 'login-consent',
                _onRenderCb: function(){
                    //bind events
                    //checkbx change
                    $('#vcw').off('change', 'input.js-contentCB').on('change', 'input.js-contentCB', mod_login.handleConsentChange);
                    //accept btn click
                    $('#consentAcceptButton').off('click').on('click', mod_login.consentPopUpAcceptBtnHandler);
                    $('#vcw .consentHeader .closeBtn').off('click').on('click', function() {
                        if(isUserCloseActionForConsentOverlay){
                            mod_login.logout();
                            TimesApps.overlayModule.close();
                        }
                    });
                    //handle overlay closed by user
                    require(["tiljs/event"], function(eventBus){
                        eventBus.subscribe("overlayClosed", function(overlay){
                            if(overlay.id === 'userConsentPopUp' && isUserCloseActionForConsentOverlay){
                                mod_login.logout();
                            }
                        });
                    });
                }
            })  
        };
        
        mod_login.consentPopUpAcceptBtnHandler = function(){
            var $overlay = $('#vcw');
            var $agree = $overlay.find('input[name="agree"]');
            var $sharedDataAllowed = $overlay.find('input[name="sharedDataAllowed"]');
            var $agreeParent = $agree.closest('li');
            var $sharedDataAllowedParent = $sharedDataAllowed.closest('li');
            var sharedDataAllowed = mod_login.checkAndSetSharedDataTnCError($sharedDataAllowed, $sharedDataAllowedParent) ? '1' : '0';
            var tnCAgreed = mod_login.checkAndSetAgreeTnCError($agree, $agreeParent) ? '1' : '0';
            var formValid = true;
            
            if(sharedDataAllowed !== '1' || tnCAgreed !== '1'){
                formValid = false;
            }
            
            if(formValid){
                mod_login.updateUserPermissions(true);
            }
        }
        
        mod_login.updateUserPermissions = function(allowCallbackAfterLogin) {
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
            if(typeof jssoObj.updateUserPermissions === 'function') {
                jssoObj.updateUserPermissions('1', '1', mod_login.getTimespointValue(), function(response){
                    isUserCloseActionForConsentOverlay = false;
                    TimesApps.overlayModule.close();
                    if (allowCallbackAfterLogin && typeof callbackToCallAfterConsent === 'function') {
                        callbackToCallAfterConsent(userObj);
                        callbackToCallAfterConsent = null;
                    }
                    
                    // jssoObj.getValidLoggedInUser();
                });
            }
            
        }
        
        mod_login.checkAndUpdateTimespointValue = function() {
            var consentAgreedVal = cookie.get('gdpr');
            if (consentAgreedVal && consentAgreedVal.substr(0, 4) === '1#1#') {
                if ((consentAgreedVal[4] !== '0' && __isEUUser) || (consentAgreedVal[4] !== '1' && !__isEUUser)) {
                    mod_login.updateUserPermissions();
                }   
            }
        };
        
        mod_login.isConsentGiven = function() {
            var consentAgreed = cookie.get('gdpr');
            return (consentAgreed === '1#1#1' || consentAgreed === '1#1#0');
        };
        
        mod_login.init = function (init_config) {
            var initCallback = function() {
                var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
                
                cachedElements.loginPopup.show();
                mod_login.updateConfig(init_config);
                if (config.renderer === true) {
                    mod_login.onStatusChange(function (_user) {
                        mod_login.renderPlugins(_user);
                    });
                }
                mod_login.isLoggedIn(function (user) {
                    var _cbq = window._cbq = (window._cbq || []);
                    if (user && typeof user === 'object') {
                        event.publish("user.autologgedin", user);
                        require(['primeuserhandler'], function(puser) {
                            var isPrime = puser.isPrimeActiveUser();
                            if (isPrime) {
                                _cbq.push(['_acct', 'prime']);
                            } else {
                                _cbq.push(['_acct', 'lgdin']);
                            }
                            
                            TimesApps.loadChartBeatCalls();
                            var hashVal = window.location.hash.toLowerCase();
                            if ((hashVal === ('#' + config.primeFreeSuccessHash) || hashVal === ('#' + config.primePaidSuccessHash))) {
                                // slice off the remaining '#' in HTML5:
                                if (typeof window.history.replaceState == 'function') {
                                    window.history.replaceState({}, '', window.location.href.substr(0, window.location.href.indexOf('#')));
                                }
                               // mod_login.setPrcForUser(puser.getPrimeCongratsPopup.bind(puser, true, true));
                            }
                            /*else if( !puser.isPrimeActiveUser() && puser.isPrimeActiveUser(user.getPrimeStatus()) ){
                                mod_login.setPrcForUser(puser.getPrimeCongratsPopup.bind(puser, true, true));
                            }*/
                            
                            // if (isPrime && typeof TimesApps.SavingsAPI === 'object') {
                            //     TimesApps.SavingsAPI.initializeApi();
                            // }
                            
                            // if (typeof TimesApps.SavingsAPI === 'object') {
                            //     TimesApps.SavingsAPI.initializeApi();
                            // }
                        }); 
                    } else {
                        _cbq.push(['_acct', 'anon']);
                        TimesApps.loadChartBeatCalls();
                    }
                });
                
                mod_login.onStatusChange(function (_user) {
                    if(__isEUUser && _user && !mod_login.isConsentGiven()){
                        mod_login.showConsentPopUp();
                    }
                });
                
                
                mod_login.initActions();
            }
            
            TimesApps.checkGdprAndCall(function(){
                __isEUUser = false;
                initCallback();
            }, function(){
                initCallback();
            });
        };
        
        mod_login.getConfig = function(){
            return config;
        }
        
        mod_login.getErrorConfig = function(){
            return errorConfig;
        }
        
        mod_login.initActions = function () {
            cachedElements.closeBtn
                .on("click", function() {
                    mod_login.closeBtnHandler();
                    mod_login.fireGAEvent('Close');
                });
            
            $("[data-plugin='user-isloggedin']")
                .on("click", "[data-plugin='user-logout']", function () {
                    mod_login.logout();
                });
            $("[data-plugin='user-notloggedin']")
                .on("click", "[data-plugin='user-login']", function () {
                    // handled by mobile login
                    if(typeof toiprops !== 'undefined' && toiprops.primetemplate === true){
                        return;
                    }
                    $('body').addClass('disable-scroll');
                    cachedElements.loginPopup.addClass('active');
                    mod_login.showLoginScreen(mod_login.subscribeNewletters);
                    mod_login.setScreenName('Login_Screen');
                    mod_login.fireGAEvent('Load');
                })
                .on("click", "[data-plugin='user-register']", function () {
                    mod_login.register();
                })
                .on("click", "[data-plugin='user-login-facebook']", function () {
                    mod_login.loginWithFacebook();
                })
                .on("click", "[data-plugin='user-login-twitter']", function () {
                    mod_login.loginWithTwitter();
                })
                .on("click", "[data-plugin='user-login-google']", function () {
                    mod_login.loginWithGoogle();
                });
                
            $(document).on('keyup', mod_login.closeModalOnEscapeKeyPress);
            
            cachedElements.formContainer
                .off('keyup paste', '#toi-login input[name="emailId"]').on('keyup paste', '#toi-login input[name="emailId"]', mod_login.handleEmailIdKeyUp)
                 .off('keyup paste', '#toi-login input[name="password"]').on('keyup paste', '#toi-login input[name="password"]', mod_login.handlePasswordKeyUp)
                  .off('keyup paste', '#toi-login input[name="otplogin"]').on('keyup paste', '#toi-login input[name="otplogin"]', mod_login.handleOtploginKeyUp)
                .off('click', '#toi-login[data-login-type="email"] #sso-signInButtonDiv [type="submit"]').on('click', '#toi-login[data-login-type="email"] #sso-signInButtonDiv input[type="submit"]', mod_login.handleEmailIdClick)
                .off('submit', '#toi-login[data-login-type="email"] #toi-login form').on('submit', '#toi-login[data-login-type="email"] #toi-login form', mod_login.handleEmailIdClick)
                .off('click', '#toi-login[data-login-type="email"] #changeEmailIdDiv').on('click', '#toi-login[data-login-type="email"] #changeEmailIdDiv', mod_login.changeEmailIdHandler)
                .off('click', '#changeRegisterEmailId').on('click', '#changeRegisterEmailId', mod_login.changeRegisterEmailIdHandler)
                .off('click', '#sso-forgot-pass').on('click', '#sso-forgot-pass', mod_login.forgotPasswordHandler)
                .off('click', '#sso-fb-login').on('click', '#sso-fb-login', mod_login.fbLoginHandler)
                .off('click', '#sso-gplus-login').on('click', '#sso-gplus-login', mod_login.gplusLoginHandler)
                .off('click', '#sso-generate-otp').on('click', '#sso-generate-otp', mod_login.loginWithOTP)
                .off('click', '#toi-login[data-login-type="email"] #sso-regenerate-otp').on('click', '#sso-regenerate-otp', mod_login.regenerateLoginOTP)
                .off('click', '#sso-fp-regenerate-otp').on('click', '#sso-fp-regenerate-otp', mod_login.fpRegenerateOTP)
                .off('click', '#sso-verify-regenerate-otp').on('click', '#sso-verify-regenerate-otp', mod_login.verifyPageRegenerateOTP)
                .off('click', '#sso-registerBtn').on('click', '#sso-registerBtn', mod_login.registerButtonHandler)
                .off('submit', '#toi-register form').on('submit', '#toi-register form', mod_login.registerButtonHandler)
                .off('click', '#sso-verify-btn').on('click', '#sso-verify-btn', mod_login.verifyButtonHandler)
                .off('click', '#sso-verify-email-btn').on('click', '#sso-verify-email-btn', mod_login.verifyEmailButtonHandler)
                .off('submit', '#toi-verifyotp-password form').on('submit', '#toi-verifyotp-password form', mod_login.verifyButtonHandler)
                .off('click', '#sso-fp-btn').on('click', '#sso-fp-btn', mod_login.forgotPasswordBtnHandler)
                .off('submit', '#toi-forgot-password form').on('submit', '#toi-forgot-password form', mod_login.forgotPasswordBtnHandler)
                .off('focus', 'input[name="registerPwd"]').on('focus', 'input[name="registerPwd"]', mod_login.showPasswordCondition)
                .off('keyup paste', '#toi-register input[name="registerPwd"]').on('keyup paste', '#toi-register input[name="registerPwd"]', mod_login.passwordErrors)
                .off('keyup paste', '#toi-register input[type="text"]').on('keyup paste', '#toi-register input[type="text"]', mod_login.registerFormErrorHandler)
                .off('keyup paste', '#toi-register input[name!="registerPwd"][type="password"]').on('keyup paste', '#toi-register input[name!="registerPwd"][type="password"]', mod_login.registerFormErrorHandler)
                .off('change', '#toi-register input[name="agree"]').on('change', '#toi-register input[name="agree"]', mod_login.registerFormErrorHandler)
                // .off('focus blur', '[placeholder]:not(input[name="registerPwd"])').on('focus blur', '[placeholder]:not(input[name="registerPwd"])', mod_login.stopEventProp)
                .off('focus blur', '[placeholder]').on('focus blur', '[placeholder]', mod_login.stopEventProp)
                .off('keyup paste', '#toi-forgot-password input').on('keyup paste', '#toi-forgot-password input', mod_login.fpInputKeyupHandler)
                .off('keyup paste', '#toi-verifyotp-password input[name="otpverify"]').on('keyup paste', '#toi-verifyotp-password input[name="otpverify"]', mod_login.enableVerifyButton)
                .off('click', '.view-password').on('click', '.view-password', mod_login.showPassword)
                .off('click', '.hide-password').on('click', '.hide-password', mod_login.hidePassword)
                .off('change', '#toi-register input[name="sharedDataAllowed"]').on('change', '#toi-register input[name="sharedDataAllowed"]', mod_login.registerFormErrorHandler)
                .off('change', 'input.js-contentCB').on('change', 'input.js-contentCB', mod_login.handleConsentChange)
                .off('change', '#newsletter_subscribe').on('change', '#newsletter_subscribe', mod_login.handleNewsletterConsent)
        };
        
        cachedElements.loginPopup.off('click').on('click', function(e){
           if(e.srcElement && e.srcElement.id === 'login-popup') {
               cachedElements.closeBtn.click();
           }
        });
        mod_login.updateConfig(mod_login_config);
        return mod_login;
    });
    
    define( 'login',[ "tiljs/apps/times/usermanagement" ],
    function ( login) {

        return login;
    } );


    /* To integrate login please do the following:
     * 1. Fork toiusermanagement_js and usermanagementcss and include it in your project
     * 2. Add below JS files in your project. These files should be added globally
     *  a) <script type="text/javascript" src="https://jssocdn.indiatimes.com/crosswalk/jsso_crosswalk_legacy_0.2.4.min.js"></script>
     *  b) <script src="https://www.google.com/recaptcha/api.js" async="true" defer="true"></script>
     * 3. Update GA events category in the toiusermanagement_js as per your project needs
     * 4. Update usermanagementcss file to change skin of Login modal
    */
	define('tiljs/apps/times/mobilelogin',[
        "../../util",
        "module",
        "../../page",
        "../../ajax",
        "../times/api",
        "../../is",
        "../../cookie",
        "../../ui",
        "../../logger",
        "../../event",
        "../../load",
        "../../localstorage",
        "../../user",
        "../../analytics/mytimes",
        "primeuserhandler",
        "tiljs/apps/times/usermanagement"
    ], 
    function(util, module, page, ajax, api, is, cookie, ui, logger, event, load, localstorage, user, mytimes, puser, mod_login){
	    
	    var mod_mobilelogin = {};
	    var config = {
	        resendTimeInSec: 60,
	        headingText:'Log in to your account',
	        completeprofile:'COMPLETE </br>YOUR PROFILE',
	        bottomText:''
	    };
	    var config_default = {
	        headingText:'Log in to your account',
	        bottomText:'',

	    };
	    
	    config.primemessages={headingText:'START YOUR </br>FREE TRIAL',bottomText:'Enjoy exclusive articles </br>& premium benefits from'}
	    config.adfreeprimemessages={headingText:'START </br>AD-FREE TRIAL',bottomText:'Enjoy an ad-free experience </br>& premium benefits from'}
	    config.verifymobile={headingText:'VERIFY MOBILE </br>TO SUBSCRIBE',bottomText:''}
	    config.subscribe={headingText:'LOGIN </br>TO SUBSCRIBE',bottomText:''}
	    var errorConfig = {
	        wrongOtp: 'Please Enter a valid OTP',
	        limitExceeded:'Maximum number of attempts to generate otp is exceeded. Please try again later.'
	    }
	    
	    var cachedElements = {
            loginPopup: $('#login-popup'),
            formContainer: $('#user-sign-in'),
            mobileLoginFormContainer: $('#mobile-login'),
            closeBtn: $('#login-popup .close-btn')
        }
        
        var loginCallback = null;
        var updateMobileCallback = null;
        var resendTimeInterval;
        
        var fireGAEvent = function(_action, _label) {
            require(["pgtrack"], function(pgtrack) {
            	pgtrack.track('#' + _label + '~' + _action);
            });
        };
        
        mod_mobilelogin.loginWithOTP = function(e, isRegenerate) {
            // Do not perform any action if generate otp is disabled
            // if($('#sso-generate-otp').hasClass('disabled')) {
            //     return;
            // }
            
            var $emailId = $('#toi-login input[name="emailId"]');
            var $errorElem = $('#sso-otpLoginDiv');
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                inputVal = $('#toi-login input[name="emailId"]').val();
            
            inputVal = mod_login.getValidMobileNumber(inputVal);
            // fnCall = (loginType === 'email'? jssoObj.getEmailLoginOtp: jssoObj.getMobileLoginOtp);
            mod_login.showLoader();
            if (!!config.updateMobileFlow) {
                mod_mobilelogin.updateUserMobile(inputVal, mod_mobilelogin.updateUserMobileCallback(isRegenerate, $errorElem));
            }
            else if (mod_login.getScreenName() === 'Register_New_User') {
                jssoObj.resendMobileSignUpOtp(inputVal, mod_login.ssoid, mod_mobilelogin.handleLoginOTPCallback(isRegenerate, $errorElem));
                mod_mobilelogin.showstate('.verifymobilenewuser');
            } else {
                jssoObj.getMobileLoginOtp(inputVal, mod_mobilelogin.handleLoginOTPCallback(isRegenerate, $errorElem));
                mod_mobilelogin.showstate('.verifymobile');
            }
            // fnCall.call(jssoObj, inputVal, mod_login.handleLoginOTPCallback(isRegenerate));
            if(isRegenerate) {
                if(mod_login.getGa()!=""){
                 mod_login.fireGAEventMetered('Login_screen_OTPScreen_OTPResend','MobNo_OTP_Entry' + '/'+mod_login.getGa());
                }
                else
                { 
                    mod_login.fireGAEvent( mod_login.getPageName() + '_Re_OTP');
                }
            } else {
                mod_login.fireGAEvent(mod_login.getPageName() + '_OTP_Submit');   
            }
        };
        
        // Duplicate method in case any message needed for regenerate OTP logic        
        mod_mobilelogin.regenerateLoginOTP = function() {
            // Do not perform any action if regenerate otp is disabled
            if($('#sso-regenerate-otp').hasClass('disabled')) {
                return;
            }
            mod_mobilelogin.loginWithOTP({}, true);
        };
        
        mod_mobilelogin.handleLoginOTPCallback = function(isRegenerate, $errorElement) {
            return function (response) {
                mod_login.hideLoader();
                // var $errorElement = $('#toi-login li.password:visible');
                mod_login.handleError($errorElement);
                if(response && response.code === 200) {
                    $('#regenerate-otp-container').show();
                    mod_mobilelogin.startResendOtpInterval();
                    var loginType = mod_login.getLoginType();
                    var inputVal = $('#toi-login input[name="emailId"]').val();
                    inputVal = (loginType === 'email'? mod_login.getValidEmailId(inputVal): mod_login.getValidMobileNumber(inputVal));
                    $('#sso-pwdDiv').hide();
                    $('#sso-otpLoginDiv, #sso-login-otp-msg').show();
                    $('#sso-mobile-input, .sso-signin-form-data, #sso-regenerate-otp, #sso-otpLoginDiv .errorMsg').hide();
                    $('#sso-otpLoginDiv, #sso-send-otp-screen').show();
                    $('#changeEmailIdDiv').css('display', 'inline-block');
                    // $('#sso-login-otp-msg > p').text('We have sent a 6 digit verification code ' + (loginType === 'email'? 'to ': 'on +91-') + inputVal);
                    if(isRegenerate) {
                        $('#toi-login input[name="otplogin"]').val('');
                        $('#toi-login .otpCodeInput').val('');
                        // $('#sso-otpLoginDiv .successMsg').text('OTP has been successfully sent.').show();
                    }
                } else {
                    $('#sso-otpLoginDiv .successMsg').hide();
                    switch(response.code) {
                        case 416:
                            mod_login.handleError($errorElement, errorConfig.limitExceeded);
                            // Disable Regenerate OTP button and remove text message specifying OTP has been sent
                            $('#sso-regenerate-otp, #sso-generate-otp, #sso-forgot-pass').addClass('disabled');
                            $('#sso-mobile-input > p #changeEmailIdDivSignUpOtp').show();
                            break;
                        case 503:
                            mod_login.handleError($errorElement, errorConfig.connectionError);
                            break;
                        default:
                            mod_login.handleError($errorElement, errorConfig.serverError);
                        
                    }
                    
                    mod_login.fireGAEvent('API_Error_' + response.code);
                }
            }
        };
        
        /**
         * API callback of checkUserExists
         *
         * @param response - Response object
         * @param 
         */
        mod_mobilelogin.checkUserExists = function(response) {
            mod_login.hideLoader();
            var $errorElement = $('#toi-login li.mobile');
            var $emailId = $('#toi-login input[name="emailId"]');
            var errorMsg = '', userName = '';
            var loginType = mod_login.getLoginType();
            var $signInBtn = $('#sso-signInButtonDiv');
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                inputVal = $('#toi-login input[name="emailId"]').val();

            inputVal = (loginType === 'email'? mod_login.getValidEmailId(inputVal): mod_login.getValidMobileNumber(inputVal));
            mod_login.handleError($errorElement);
            $('#sso-send-otp-screen span').text(inputVal);
            if(response && response.code === 200 && response.data) {
                if(response.data.statusCode === 212 || response.data.statusCode === 213) {
                    if(typeof jssoObj.getMobileLoginOtp === 'function') {
                        mod_login.showLoader();
                        mod_mobilelogin.showstate('.verifymobile');
                        $('.toi-user-login #sso-signInButtonDiv [type="submit"]').removeClass("arrow-btn").addClass("user-submit-btn").text("Submit")
                        
                        jssoObj.getMobileLoginOtp(inputVal, mod_mobilelogin.handleLoginOTPCallback(false, $errorElement));
                         if(mod_login.getGa()!=""){
                           mod_login.fireGAEventMetered('Login_screen_OTPScreen_view','MobNo_OTP_Entry' + '/'+mod_login.getGa())
                         }
                         else
                         {
                          mod_login.fireGAEvent(mod_login.getPageName() + '_OTP_Submit');
                         }
                    }
                    if(response.data.termsAccepted !== '1' || response.data.shareDataAllowed !== '1'){
                        $signInBtn.find('input[type="submit"]').attr('disabled', 'disabled');
                        // show and handle consent checkboxes
                        $(mod_login.getConsentHTML()).insertBefore($signInBtn);
                        // to handle both fb and google buttons in single line when checkboxes are visible
                        $('#user-sign-in').addClass('extra-content');
                    }
                } else if(response.data.statusCode === 205 || response.data.statusCode === 206 || response.data.statusCode === 214 || response.data.statusCode === 215) {
                    mod_login.setScreenName('Register_New_User');
                    mod_mobilelogin.showstate('.verifymobilenewuser');
                    $('#sso-register-form input[name="emailId"]').val(inputVal);
                    mod_mobilelogin.showRegisterView();
                    
                } else {
                    $emailId.prop('disabled', false);
                    errorMsg = response.data.statusCode === 216 ? errorConfig.fpInvalidEmailOnly: errorConfig.fpInvalidEmail;
                    mod_login.handleError($errorElement, errorMsg);
                }
            } else {
                $emailId.prop('disabled', false);
                if(response.code === 410) {
                    mod_login.handleError($errorElement, (loginType === 'email'? errorConfig.fpInvalidEmailOnly: errorConfig.fpInvalidMobileOnly));
                } else if(response.code === 503) {
                    mod_login.handleError($errorElement, errorConfig.connectionError);
                } else {
                    mod_login.handleError($errorElement, errorConfig.serverError);
                }
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        mod_mobilelogin.otpNotSucceedHandling = function (response) {
            var $errorElement = $('#sso-otpLoginDiv');
            $('.successMsg').hide();
            switch(response.code) {
                case 414:
                    mod_login.handleError($errorElement, errorConfig.wrongOtp);
                    break;
                case 415:
                    mod_login.handleError($errorElement, errorConfig.expiredOTP);
                    break;
                case 416:
                    mod_login.handleError($errorElement, errorConfig.limitExceeded);
                    break;
                case 503:
                    mod_login.handleError($errorElement, errorConfig.connectionError);
                    break;
                default:
                    mod_login.handleError($errorElement, errorConfig.wrongOtp );
                    
            }
            mod_login.fireGAEvent('API_Error_' + response.code);
        };
      
        mod_mobilelogin.handleLoginCallback = function (response) {
            mod_login.hideLoader();
            if(response && response.code === 200) {
                mod_login.closeBtnHandler();
                mod_login.isLoggedIn(mod_login.getLoginCallback());
                if(mod_login.getGa()!=""){
                    sessionStorage.setItem('meteredLoginSuccess', 1);
                }
                else
                {
                    mod_login.fireGAEvent('Login_Success_' + mod_login.getPageName());
                }
                
                if (resendTimeInterval) {
                    clearInterval(resendTimeInterval);
                }
            } else {
                mod_mobilelogin.otpNotSucceedHandling(response);
            }
        };
        
        mod_mobilelogin.handleEmailIdClick = function (e) {
            e.preventDefault();
            var $otp = $('#sso-otpLoginDiv');
            var $emailId = $('#toi-login input[name="emailId"]');
            var password = '';
            var $errorMsgElem = $('#toi-login li.password:visible .errorMsg');
            var _checkIsOTP;
            $emailId.prop('disabled', true);
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                loginType = mod_login.getLoginType(),
                inputVal = $('#toi-login input[name="emailId"]').val(),
                fnCall, $form, checkboxLen = 0;
            
            inputVal = mod_login.getValidMobileNumber(inputVal);
            
            if($otp.is(':visible')) {
                // fnCall = (mod_login.getScreenName() === 'Register_New_User'? jssoObj.verifyMobileSignUp: jssoObj.verifyMobileLogin);
                $('input.otpCodeInput').each(function(index, value) {
                    password += $(value).val().toString();
                });
                
                _checkIsOTP = mod_mobilelogin.checkIsOTP(password);
                // password = $otp.val();
                  if(mod_login.getGa()!=""){
                      mod_login.fireGAEventMetered('Login_screen_OTPScreen_Verify_OTP','MobNo_OTP_Entry/'+mod_login.getGa())
                      }
                    else
                    {
                      mod_login.fireGAEvent(mod_login.getPageName() + '_OTP_Entry');
                    }
                 
                if(!_checkIsOTP) {
                    $errorMsgElem.html(errorConfig.emptyPassword).show();
                    return;
                } else {
                    if(config.updateMobileFlow){
                        mod_mobilelogin.verifyUserMobile(inputVal, password, mod_mobilelogin.verifyUserMobileCallback);
                    }
                    else{
                        $form = $('#sso-login-form');
                        var checkboxLen = $form.find('.js-contentCB').length;
                        if (checkboxLen > 0 && !mod_login.areMandatoryFieldsSelected($form)) {
                            return;
                        }
                        $('.errorMsg').html('').hide();
                        mod_login.showLoader();
                        if (mod_login.getScreenName() === 'Register_New_User') {
                            jssoObj.verifyMobileSignUp(inputVal, mod_login.ssoid, password, mod_mobilelogin.handleLoginCallback);
                            mod_mobilelogin.showstate('.ftanew');
                        } else {
                            mod_mobilelogin.showstate('.fta');
                            $form = $('#sso-login-form');
                            checkboxLen = $form.find('.js-contentCB').length;
                            if (checkboxLen > 0 && !mod_login.areMandatoryFieldsSelected($form)) {
                                return;
                            }
                            
                            if(checkboxLen > 0){
                                jssoObj.verifyMobileLoginGdpr(inputVal, password, '1', '1', mod_login.getTimespointValue(), mod_mobilelogin.handleLoginCallback);
                            } else {
                                jssoObj.verifyMobileLogin(inputVal, password, mod_mobilelogin.handleLoginCallback);   
                            }
                        }
                        // fnCall.call(jssoObj, inputVal, password, mod_login.handleLoginCallback);    
                    }
                }
            } else {
                if(!!config.updateMobileFlow){
                    var $errorElement = $('#sso-mobile-input');
                    mod_mobilelogin.updateUserMobile(inputVal, mod_mobilelogin.updateUserMobileCallback(false, $errorElement));
                }
                else if(typeof jssoObj.checkUserExists === 'function') {
                    mod_login.showLoader();
                    jssoObj.checkUserExists(inputVal, mod_mobilelogin.checkUserExists);
                    mod_login.setPageName(loginType);
                     if(mod_login.getGa()!=""){
                        mod_login.fireGAEventMetered('Login_screen_Mobile_Submit','Mobno_Continue/'+mod_login.getGa())
                    }
                    else
                    {
                       mod_login.fireGAEvent(mod_login.getPageName() + '_Continue');
                    }
                } else {
                    $emailId.prop('disabled', false);
                }
            }
        };
        
        mod_mobilelogin.handleEmailIdKeyPress = function(e) {
            var $this = $(this);
            var keyCode = mod_mobilelogin.getKeyCode(e);
            
            if (keyCode === 13) {
                return true;
            }
            
            if((keyCode === 8) || !mod_mobilelogin.allowNumber(e)){
                return false;
            }    
        }
        
        mod_mobilelogin.changeRegisterMobileHandler = function(e) {
            e.stopPropagation();
            $('#sso-login-form, #sso-signin-form').show();
            $('#sso-register-form').hide();
            mod_mobilelogin.changeEmailIdHandler(e);
        };
        mod_mobilelogin.changeRegisterMobileHandlerOtp = function(e) {
            e.stopPropagation();
            $('#sso-mobile-input > p #changeEmailIdDivSignUpOtp').hide();
            mod_mobilelogin.changeEmailIdHandler(e);
        };
        
        /**
         * Handles Change Email/Mobile link click
         *
         * @param
         * @param 
         */
        mod_mobilelogin.changeEmailIdHandler = function (e) {
            $('#sso-pwdDiv, #changeEmailIdDiv, #sso-otpLoginDiv, #sso-login-otp-msg, #sso-send-otp-screen, #regenerate-otp-container, #sso-regenerate-otp').hide();
            $('#sso-mobile-input, .sso-signin-form-data').show();
            $('#toi-login input[name="emailId"]').prop('disabled', false).val('');
            $('#sso-signInButtonDiv [type="submit"]').prop('disabled', true).addClass('disabled');
            $('.errorMsg, .successMsg').hide();
            $('.error').removeClass('error');
            // $('#sso-signInButtonDiv > input').val('Continue');
            $('#sso-pwdDiv input[name="password"]').val('');
            $('#sso-otpLoginDiv input[type="password"]').val('');
            $('#sso-regenerate-otp, #sso-fp-regenerate-otp, #sso-verify-regenerate-otp, #sso-generate-otp, #sso-forgot-pass').removeClass('disabled');
            mod_login.fireGAEvent(mod_login.getPageName() + '_Change');
            mod_login.setScreenName('Login_Screen');
            mod_mobilelogin.showstate('.startscreen');
            $('#sso-signInButtonDiv [type="submit"]').removeClass("user-submit-btn").addClass("arrow-btn").text("")
            clearInterval(resendTimeInterval);
            mod_login.ssoid = '';
            $('#toi-login .otpCodeInput').val('');
            if($("#sso-signin-form").find(".checkbox").length > 0){
                $("#sso-signin-form").find(".checkbox").remove()
            }
        };
        
        mod_mobilelogin.allowNumber = function(event) {
            var keyCode = mod_mobilelogin.getKeyCode(event);
            if (event.target.value.length >= 10 || 
                $.inArray(keyCode, [0, 32]) > -1 || 
                (keyCode != 8 && isNaN(String.fromCharCode(keyCode)))) {
                event.preventDefault(); //stop character from entering input
                return false;
            }
            return true;
        };
        
        mod_mobilelogin.getKeyCode = function (event) {
            var keyCode = event.keyCode || event.which;
            if (keyCode == 0 || keyCode == 229) { //for android chrome keycode fix
                var value = event.target.value;
                keyCode = value.charCodeAt(value.length - 1);
            }
            return keyCode;
        }
        
        mod_mobilelogin.showConsentPopUp = function(){
            var popUpHtml = '<div class="userConsentPopUp">'
                          +     '<div class="consentHeader">'
                          +         '<h2>Welcome Back to THE TIMES OF INDIA</h2>'
                          +         '<span class="closeBtn">+</span>'
                          +     '</div>'
                          +     '<div class="consentDescription">'
                          +         '<p><strong>One Last Step!</strong></p>'
                          +         '<p>We tailor your experience and understand how you and other visitors use this website by using cookies and other technologies. This means we are able to keep this site free-of-charge to use.</p>'
                          +         '<p>Please provide consent for the following scenarios so that we can ensure an enjoyable experience for you on our websites and mobile apps.</p>'
                          +     '</div>'
                          +     '<ul class="consentItemsList">'
                          +         mod_login.getConsentHTML()
                          +     '</ul>'
                          +     '<div class="btn-container">'
                          +         '<input id="consentAcceptButton" type="button" value="AGREE" ' + (__isEUUser? 'disabled="disabled"': '') + '/>'
                          +     '</div>'
                          + '</div>';
            
            isUserCloseActionForConsentOverlay = true;
            
            TimesApps.overlayModule.create({
                id : 'userConsentPopUp',
                isFullscreen : true,
                html : popUpHtml,
                classString: 'login-consent',
                _onRenderCb: function(){
                    //bind events
                    //checkbx change
                    $('#vcw').off('change', 'input.js-contentCB').on('change', 'input.js-contentCB', mod_mobilelogin.handleConsentChange);
                    //accept btn click
                    $('#consentAcceptButton').off('click').on('click', mod_login.consentPopUpAceeptBtnHandler);
                    $('#vcw .consentHeader .closeBtn').off('click').on('click', function() {
                        if(isUserCloseActionForConsentOverlay){
                            mod_login.logout();
                            TimesApps.overlayModule.close();
                        }
                    });
                    //handle overlay closed by user
                    require(["tiljs/event"], function(eventBus){
                        eventBus.subscribe("overlayClosed", function(overlay){
                            if(overlay.id === 'userConsentPopUp' && isUserCloseActionForConsentOverlay){
                                mod_login.logout();
                            }
                        });
                    });
                }
            })  
        };
        
        //This is to handle enter valid OTP keys
        mod_mobilelogin.handleOTPCodeKeyPress = function(event) {
            var $this = $(this);
            var input_flds = $this.closest('form').find('input.otpCodeInput');
            var index = input_flds.index(this);
            var keyCode = mod_mobilelogin.getKeyCode(event);
            
            if((keyCode == 8) || !mod_mobilelogin.allowNumber(event)){
                return;
            }
            else if($this.val().length >= 1) {
                input_flds.eq(input_flds.index(this) + 1).focus();
            } else{
                input_flds.eq(input_flds.index(this) + 1).focus();
            }
        };
        
        mod_mobilelogin.handleUsernameKeyUp = function(e) {
            var $this = $(this);
            var $submit = $('#sso-registerButtonDiv [type="submit"]');
            var agreed = $('#sso-register-form input[name="agree"]').prop('checked');
            var sharedDataAgreed = $('#sso-register-form input[name="sharedDataAllowed"]').prop('checked');
            
            if (mod_login.checkAndSetFullNameError($this, $this.closest('li')) && agreed && sharedDataAgreed) {
                $submit.prop('disabled', false).removeClass('disabled');
            } else {
                $submit.prop('disabled', true).addClass('disabled');
            }
        };
        
        mod_mobilelogin.handleUsernameKeyPress = function(e) {
            var $this = $(this);
            var keyCode = mod_mobilelogin.getKeyCode(e);
            
            if (keyCode === 13) {
                return true;
            }
            
            if((keyCode === 8) || !((keyCode >= 65 && keyCode <= 90) || (keyCode >= 97 && keyCode <= 122) || keyCode === 32)){
                return false;
            }
        };
        
        /**
         * Shows login screen when user clicks change email on Register page
         *
         * @param
         * @param 
         */
        /* mod_login.changeRegisterEmailIdHandler = function (e) {
            mod_login.showLoginScreen();
            mod_login.fireGAEvent( mod_login.getPageName() + '_Change');
        }; */
        
        mod_mobilelogin.handleTnCCheckbox = function(e) {
            var $this = $(this);
            var $submit = $('#sso-registerButtonDiv [type="submit"]');
            var $fullname = $('#sso-register-form input[name="fullname"]');
            var sharedDataAllowed = $('#sso-register-form input[name="sharedDataAllowed"]').is(':checked')? '1': '0';
            
            if (sharedDataAllowed === '1' && mod_login.checkAndSetAgreeTnCError($this, $this.closest('li')) && mod_login.checkAndSetFullNameError($fullname, $fullname.closest('li'))) {
                $submit.prop('disabled', false).removeClass('disabled');
            } else {
                $submit.prop('disabled', true).addClass('disabled');
            }
        };
        
        mod_login.registerOnlyMobile = function(response) {
            mod_login.hideLoader();
            var $emailId = $('#toi-login input[name="emailId"]');
            var $errorElement = $('#toi-login li.user-name');
            if(response && response.code === 200 && response.data && response.data.ssoid) {
                $('#sso-mobile-input, .sso-signin-form-data').hide();
                $('#sso-otpLoginDiv, #sso-send-otp-screen').show();
                 if(mod_login.getGa()!=""){
                     mod_login.fireGAEventMetered('Login_screen_OTPScreen_view','MobNo_OTP_Entry' + '/'+mod_login.getGa())
                 }
                $('#changeEmailIdDiv').css('display', 'inline-block');
                mod_login.ssoid = response.data.ssoid;
                mod_mobilelogin.startResendOtpInterval();
                $('#sso-signin-form').show();
                $('#regenerate-otp-container').show();
                $('#sso-register-form').hide();
                $('#sso-signInButtonDiv [type="submit"]').removeClass("arrow-btn").addClass("user-submit-btn").text("Submit")
                mod_mobilelogin.showstate('.verifymobilenewuser');
                
            } else {
                $emailId.prop('disabled', false);
                if(response.code === 429) {
                    mod_login.handleError($errorElement, errorConfig.userAlreadyRegistered);
                } else if (response.code === 416) {
                    mod_login.handleError($errorElement, errorConfig.limitExceeded);
                } else if(response.code === 503) {
                    mod_login.handleError($errorElement, errorConfig.connectionError);
                } else {
                    mod_login.handleError($errorElement, errorConfig.serverError);
                }
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        mod_mobilelogin.showRegisterView = function() {
          $('#sso-signin-form').hide();
          $('#sso-register-form').show();
          mod_mobilelogin.showstate('.completeyourprofile');
          $(".toi-user-login .times-prime-benefits").hide()
          $(".toi-user-login .sso-signin-form-data").html(config.completeprofile);
          $(".toi-user-login #sso-mobile-input-filled").hide();
          if(mod_login.getGa()!=""){
               mod_login.fireGAEventMetered('Login_screen_Register_New_User_View','Register_New_User' + '/'+mod_login.getGa());
          }
        };
        
        mod_mobilelogin.handleRegisterBtnClick = function(e) {
            e.stopPropagation();
            e.preventDefault();
            var $register = $('#sso-register-form');
            var $fullname = $register.find('input[name="fullname"]');
            var fullname = $fullname.val();
            var username = mod_login.getFirstAndLastName(fullname);
            var $agree = $register.find('input[name="agree"]');
            var agree = $agree.is(':checked');
            var sharedDataAllowed = $register.find('input[name="sharedDataAllowed"]').is(':checked')? '1': '0';
            var areMandatoryFieldsSelected = mod_login.areMandatoryFieldsSelected($register);
            var isValidForm = mod_login.checkAndSetAgreeTnCError($agree, $agree.closest('li')) && mod_login.checkAndSetFullNameError($fullname, $fullname.closest('li')) && sharedDataAllowed === '1';
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
            var inputVal = $('#toi-login input[name="emailId"]').val();
            var isGDPRSpecific = $register.find('input.js-contentCB').length > 0;
            if(isValidForm && typeof jssoObj.registerOnlyMobile === 'function') {
                mod_login.showLoader();
                jssoObj.registerOnlyMobile(username.firstName, username.lastName, '', inputVal, '1', '1', mod_login.getTimespointValue(), mod_login.registerOnlyMobile);
                mod_login.setPageName('mobile');
                if(mod_login.getGa()!=""){
                    mod_login.fireGAEventMetered('Login_screen_Register_New_User_SubmitProfile','Register_New_User' + '/'+mod_login.getGa())
                }
                else
                {
                    mod_login.fireGAEvent(mod_login.getPageName() + '_Continue');
                }
                
            } 
        };
        
        mod_mobilelogin.checkIsOTP = function(otpCode){
            return (!isNaN(otpCode) && otpCode.length == 6);
        };
        
        //This is handle back space functionality
        mod_mobilelogin.handleOTPCodeKeyUp = function(event) {
            var newValue = "";
            var $this = $(this);
            var input_flds = $this.closest('form').find('input.otpCodeInput');
            var index = input_flds.index(this);
            var keyCode = mod_mobilelogin.getKeyCode(event);
            
            
            if(keyCode == 8) {
                  if(index > 0){
                    input_flds.eq(input_flds.index(this) - 1).focus();
                }
            }
            setTimeout(function(event) {
                $('input.otpCodeInput').each(function(index, value) {
                    newValue += $(value).val().toString();
                });
                var enableVerify = true,
                    _checkIsOTP = mod_mobilelogin.checkIsOTP(newValue),
                    $sso_verifyotp_submit_btn = $('#sso-signInButtonDiv [type="submit"]');
                
                var $form = $this.closest('form');
                var checkboxLen = $form.find('.js-contentCB').length;
                if (!_checkIsOTP || (checkboxLen > 0 && !mod_login.areMandatoryFieldsSelected($form))) {
                    enableVerify = false;
                }
                $sso_verifyotp_submit_btn.prop("disabled", !enableVerify);
                if (enableVerify) {
                    $sso_verifyotp_submit_btn.removeClass("disabled");
                } else {
                    $sso_verifyotp_submit_btn.addClass("disabled");
                }
            }, 0);
        };
        
        mod_mobilelogin.startResendOtpInterval = function() {
            var currentTime = config.resendTimeInSec;
            var regenerateTimer = $('#regenerate-timer span');
            clearInterval(resendTimeInterval);
            regenerateTimer.text(config.resendTimeInSec);
            $('#regenerate-timer').show();
            resendTimeInterval = setInterval(function() {
                currentTime -= 1;
                regenerateTimer.text(currentTime);
                if (currentTime <= 0) {
                    clearInterval(resendTimeInterval);
                    $('#sso-regenerate-otp').show();
                    $('#regenerate-timer').hide();
                }
            }, 1000);
        };
        
        mod_mobilelogin.updateConfig = function (init_config) {
            if (init_config) {
                config = util.extend(true, {}, config, init_config);
            }
        };
        
	    mod_mobilelogin.setConfig = function(){
	        mod_mobilelogin.updateConfig(mod_login.getConfig());
	        //mod_login.updateConfig(mod_login.getConfig());
	    };
	    
	    mod_mobilelogin.updateErrorConfig = function (init_config) {
            if (init_config) {
                errorConfig = util.extend(true, {}, errorConfig, init_config);
            }
        };
        
	    mod_mobilelogin.setErrorConfig = function(){
	        mod_mobilelogin.updateErrorConfig(mod_login.getErrorConfig());
	    };
	    
	    mod_mobilelogin.getValidLoggedInUser = function(callback) {
	        var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
	        if(typeof jssoObj.getValidLoggedInUser === 'function'){
	            jssoObj.getValidLoggedInUser(callback);    
	        }
        };
        
        mod_mobilelogin.verifyUserMobile = function(mobileNumber, otpCode, callback) {
	        var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
	        if (typeof jssoObj.verifyMobile === "function") {
                mod_login.showLoader();
                jssoObj.verifyMobile(mobileNumber, otpCode, callback);
            } else {
                //Close verify flow and show try later message
            }
        };
        
        mod_mobilelogin.verifyUserMobileCallback = function (response) {
            mod_login.hideLoader();
            if(response && response.code === 200) {
                if (resendTimeInterval) {
                    clearInterval(resendTimeInterval);
                }
            } else {
                mod_mobilelogin.otpNotSucceedHandling(response);
            }
            //this callback would trgigger flow, if response id 200 otherwise trigger GA.
            if(typeof updateMobileCallback === 'function'){
                updateMobileCallback(response);    
            }
        };
        
        mod_mobilelogin.updateUserMobile = function (mobileNumber, callback) {
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
            if(typeof jssoObj.updateMobile === 'function'){
                mod_login.showLoader();
                //mod_mobilelogin.getValidLoggedInUser(function(){
                    jssoObj.updateMobile(mobileNumber, function(response){
                        mod_login.hideLoader();
                        if(typeof callback === 'function'){
                            callback(response);    
                        }
                    });        
                //});
            }
        };
        
        mod_mobilelogin.updateUserMobileCallback = function (isRegenerate, $errorElem) {
            return function (response) {
                mod_login.hideLoader();
                var _isRegenerate = isRegenerate || false;
                var fnCall = mod_mobilelogin.handleLoginOTPCallback(_isRegenerate, $errorElem);
                switch (response.code) {
                    case 200:
                        if(!isRegenerate){
                            fireGAEvent('prime-login_blocker|mobile_submit', 'success');    
                        }
                        mod_mobilelogin.showstate('.verifymobile');
                        $('.toi-user-login #sso-signInButtonDiv [type="submit"]').removeClass("arrow-btn").addClass("user-submit-btn").text("Submit");
                        fnCall(response);
                        break;
                    case 433:
                        /* user is already verified with mobile no*/
                        if(typeof updateMobileCallback === 'function'){
                            updateMobileCallback(response);    
                        }
                        break;
                    default:
                        if(!isRegenerate){
                            fireGAEvent('prime-login_blocker|mobile_submit', 'failure-'+ response.message);
                        }
                        fnCall(response);
                }
            };
        };
        
	    mod_mobilelogin.attachMobileToLoggedInUser = function (callback, flowObj, e, dataObj) {
	        var isLoggedInUser = mod_login.getUser();
	        if(isLoggedInUser){
	            updateMobileCallback = callback;
	            config.updateMobileFlow = true;
	            mod_mobilelogin.loginScreenCaller(null, flowObj, e, dataObj);    
	        }
        };
        
	    mod_mobilelogin.login = function (callback, action, flowObj, e, dataObj) {
	        //we have set config.action in case of update mobile
	        config.updateMobileFlow = false;
	        mod_mobilelogin.loginScreenCaller(callback, flowObj, e, dataObj);
        };
        
        mod_mobilelogin.loginScreenCaller = function (callback, flowObj, e, dataObj) {
            TimesApps.checkGdprAndCall(function() {
                mod_mobilelogin.showLoginScreen(callback, e, flowObj, dataObj);
                cachedElements.loginPopup.addClass('active');
                if(mod_login.getGa()!=""){mod_login.fireGAEventMetered('Login_screen_View','Mobno_Continue' + '/'+mod_login.getGa());}
            }, mod_login.logout);
        };
        
        mod_mobilelogin.handleConsentChange = function(e){
            var $clickedCB = $(this),
                clickedCBID = $clickedCB.attr('id'),
                $consentCBs = $clickedCB.closest('ul').find('.js-contentCB'),
                mandatoryCBIds = ['sharedDataAllowed', 'agree'],
                mandatoriesCheckedCount = 0;
                
            $.each($consentCBs, function(){
                var $cb = $(this),
                    cbID = $cb.attr('id');
                
                if(mandatoryCBIds.indexOf(cbID) > -1 && $cb.is(':checked')){
                    mandatoriesCheckedCount++;
                }
            });
            
            // mandatory consent items are checked
            if(mandatoryCBIds.length === mandatoriesCheckedCount){
                // enable buttons
                // $('#sso-registerBtn').removeAttr('disabled');
                $('#sso-signInButtonDiv [type="submit"]').removeAttr('disabled').removeClass("disabled");
                $('#consentAcceptButton').removeAttr('disabled');
            }
            // mandatory consent items are NOT checked
            else{
                // disable buttons
                // $('#sso-registerBtn').attr('disabled', 'disabled');
                $('#sso-signInButtonDiv [type="submit"]').attr('disabled', 'disabled').addClass("disabled");
                $('#consentAcceptButton').attr('disabled', 'disabled');
            }
        }
	    
	    mod_mobilelogin.showLoginScreen = function(callback, e, flowObj, dataObj){
	        var dataObj = dataObj || {};
	        dataObj.isMobileLogin = true;
	        mod_login.showLoginScreen(callback, mod_mobilelogin.getLoginScreenWithMobileHtml(e, flowObj), dataObj);
	        cachedElements.loginPopup.addClass('active');
	    }
	    
	    mod_mobilelogin.getUser = function (userId) {
            return mod_login.getUser(userId);
        };
	    
	    mod_mobilelogin.initActions = function () {
	        mod_mobilelogin.setConfig();
	        mod_mobilelogin.setErrorConfig();
            cachedElements.closeBtn
                .on("click", function() {
                    mod_login.closeBtnHandler();
                    if(mod_login.getGa()!=""){
                      mod_login.fireGAEventMetered('Login_screen_Dismiss','Mobno_entry' + '/'+mod_login.getGa());
                      mod_login.setGa("");
                    }
                    else
                    { 
                      mod_login.fireGAEvent('Close');
                    }
                });
            $("[data-plugin='user-notloggedin']")
            .on("click", "[data-plugin='user-login']", function () {
                //.on("click", "[data-plugin='mobile-user-login']", function () {
                    // handled by normal login
                    if(typeof toiprops !== 'undefined' && toiprops.primetemplate !== true){
                        return;
                    }
                    $('body').addClass('disable-scroll');
                    cachedElements.loginPopup.addClass('active');
                    //mod_login.showLoginScreen();
                    mod_mobilelogin.showLoginScreen();
                    mod_login.setScreenName('Login_Screen');
                    mod_login.fireGAEvent('Load');
                    mod_login.ssoid = '';
                    if (resendTimeInterval) {
                        clearInterval(resendTimeInterval);
                    }
                });
                /*.on("click", "[data-plugin='user-register']", function () {
                    mod_login.register();
                });*/
                
            $(document).on('keyup', mod_login.closeModalOnEscapeKeyPress);
            
            cachedElements.formContainer
                .off('keypress', '#toi-login[data-login-type="mobile"] input[name="emailId"]').on('keypress', '#toi-login[data-login-type="mobile"] input[name="emailId"]', mod_mobilelogin.handleEmailIdKeyPress)
                .off('click', '#toi-login[data-login-type="mobile"] #sso-signInButtonDiv [type="submit"]').on('click', '#toi-login[data-login-type="mobile"] #sso-signInButtonDiv [type="submit"]', mod_mobilelogin.handleEmailIdClick)
                .off('submit', '#toi-login[data-login-type="mobile"] #sso-login-form form').on('submit', '#toi-login[data-login-type="mobile"] #sso-login-form form', mod_mobilelogin.handleEmailIdClick)
                .off('click', '#toi-login[data-login-type="mobile"] #changeEmailIdDiv').on('click', '#toi-login[data-login-type="mobile"] #changeEmailIdDiv', mod_mobilelogin.changeEmailIdHandler)
                .off('click', '#toi-login[data-login-type="mobile"] #changeEmailIdDivSignUp').on('click', '#toi-login[data-login-type="mobile"] #changeEmailIdDivSignUp', mod_mobilelogin.changeRegisterMobileHandler)
                .off('click', '#toi-login[data-login-type="mobile"] #changeEmailIdDivSignUpOtp').on('click', '#toi-login[data-login-type="mobile"] #changeEmailIdDivSignUpOtp', mod_mobilelogin.changeRegisterMobileHandlerOtp)
                .off('click', '#toi-login[data-login-type="mobile"] #changeEmailIdDivSignUp').on('click', '#toi-login[data-login-type="mobile"] #changeEmailIdDivSignUp', mod_mobilelogin.changeRegisterMobileHandler)
                .off('click', '#toi-login[data-login-type="mobile"] #sso-regenerate-otp').on('click', '#toi-login[data-login-type="mobile"] #sso-regenerate-otp', mod_mobilelogin.regenerateLoginOTP)
                //.off('click', '#toi-login[data-login-type="mobile"] .view-password').on('click', '#toi-login[data-login-type="mobile"] .view-password', mod_login.showPassword)
                //.off('click', '#toi-login[data-login-type="mobile"] .hide-password').on('click', '#toi-login[data-login-type="mobile"] .hide-password', mod_login.hidePassword)
                .off("keypress", '#toi-login[data-login-type="mobile"] #sso-otpLoginDiv input.otpCodeInput').on("keypress, input", '#toi-login[data-login-type="mobile"] #sso-otpLoginDiv input.otpCodeInput', mod_mobilelogin.handleOTPCodeKeyPress)
                .off("keyup", '#toi-login[data-login-type="mobile"] #sso-otpLoginDiv input.otpCodeInput').on("keyup", '#toi-login[data-login-type="mobile"] #sso-otpLoginDiv input.otpCodeInput', mod_mobilelogin.handleOTPCodeKeyUp)
                .off('keyup paste', '#toi-login[data-login-type="mobile"] #sso-register-form input[name="fullname"]').on('keyup paste', '#toi-login[data-login-type="mobile"] #sso-register-form input[name="fullname"]', mod_mobilelogin.handleUsernameKeyUp)
                .off('keypress', '#toi-login[data-login-type="mobile"] #sso-register-form input[name="fullname"]').on('keypress', '#toi-login[data-login-type="mobile"] #sso-register-form input[name="fullname"]', mod_mobilelogin.handleUsernameKeyPress)
                .off('change', '#toi-login[data-login-type="mobile"] #sso-register-form input[name="agree"]').on('change', '#toi-login[data-login-type="mobile"] #sso-register-form input[name="agree"]', mod_mobilelogin.handleTnCCheckbox)
                .off('change', '#toi-login[data-login-type="mobile"] #sso-register-form input[name="sharedDataAllowed"]').on('change', '#toi-login[data-login-type="mobile"] #sso-register-form input[name="sharedDataAllowed"]', mod_mobilelogin.handleTnCCheckbox)
                .off('click', '#toi-login[data-login-type="mobile"] #sso-register-form input[type="submit"]').on('click', '#toi-login[data-login-type="mobile"] #sso-register-form input[type="submit"]', mod_mobilelogin.handleRegisterBtnClick)
                .off('submit', '#toi-login[data-login-type="mobile"] #sso-register-form form').on('submit', '#toi-login[data-login-type="mobile"] #sso-register-form form', mod_mobilelogin.handleRegisterBtnClick)
        };
        
        mod_mobilelogin.initActions();
        mod_mobilelogin.showstate=function(state)
        {
            $(".toi-login-steps ul").hide();
            $(".toi-login-steps").find(state).css('display', 'flex');
            if(state=='.startscreen'){$(".sso-signin-form-data").html(config.headingText);$(".times-prime-benefits").show()}
            if(state!='.startscreen'){$(".times-prime-benefits").hide()}
        }
        
        mod_mobilelogin.getStates=function(flowObj){
            
            var _verifyOTPHTML = 'Verify OTP';
            if(typeof flowObj !== 'undefined' && flowObj.type !== '' && flowObj.timesPointsOnActivity > 0){
                var _iconClass = flowObj.timespointsIconClass ? flowObj.timespointsIconClass : 'tpIcon-onActivity';
                _verifyOTPHTML = '<i class="' + _iconClass +'"> +'+ flowObj.timesPointsOnActivity +'</i><span>Verify OTP</span>';    
            }
            
            var states = '<div class="toi-login-steps">'
            +'<ul class="startscreen"> <li class="active">Mobile Number</li> <li>Your Name</li> <li>'+ _verifyOTPHTML +'</li> </ul>'
            +'<ul class="hide completeyourprofile"> <li class="complete">Mobile Number</li> <li class="active">Your Name</li> <li>'+ _verifyOTPHTML +'</li> </ul>'
            +'<ul class="hide verifymobile"> <li class="complete">Mobile Number</li> <li class="smiley">WELCOME BACK</li> <li class="active">'+ _verifyOTPHTML +'</li> </ul>'
            +'<ul class="hide verifymobilenewuser"> <li class="complete">Mobile Number</li> <li class="complete">Your Name</li> <li class="active">'+ _verifyOTPHTML +'</li> </ul>'
            +'<ul class="hide fta"> <li class="complete">Mobile Number</li> <li class="smiley">WELCOME BACK</li> <li class="complete">'+ _verifyOTPHTML +'</li></ul>'
            +'<ul class="hide ftanew"> <li class="complete">Mobile Number</li> <li class="complete">Your Name</li> <li class="complete">'+ _verifyOTPHTML +'</li></ul>'
            +'</div>'
            return states;
        }

        mod_mobilelogin.getLoginScreenWithMobileHtml = function(e, flowObj){
            var that = this;
            var uitype="";;
            try{uitype=e.currentTarget.getAttribute('data-prime-loginui');}catch(e){}
            var loginScreenWithMobileHtml;
            var tpMsgBeforeSignInButton = '';
            var isTablet = is.tablet();
                
                if(config.updateMobileFlow==true && uitype=="metered-paywall")
                {
                    Object.assign(config, config.verifymobile);
                     $('#user-sign-in.toggle').addClass("toi-user-login")
                }
                else if(uitype=="metered-paywall")
                {    var headingtext=e.currentTarget.getAttribute('logintext'); 
                     if(headingtext!=""){
                         var obj_logintext={headingText:headingtext}
                         Object.assign(config, obj_logintext);
                     }
                }
                else if(uitype=="prime-subscribe"){
                    var user = that.getUser();
                    if (user){
                        Object.assign(config, config.verifymobile);   
                    }else{
                        Object.assign(config, config.subscribe);
                    }
                     $('#user-sign-in.toggle').addClass("toi-user-login")
                }
                else if(uitype=="prime-adfreetrial"){
                     Object.assign(config, config.adfreeprimemessages);
                     $('#user-sign-in.toggle').addClass("toi-user-login")
                }
                else if(uitype=="prime-freetrial"){
                     Object.assign(config, config.primemessages);
                     $('#user-sign-in.toggle').addClass("toi-user-login")
                }   
                else{
                    $('#user-sign-in.toggle').removeClass("toi-user-login");
                     Object.assign(config, config_default);
                }
                if(typeof flowObj !== 'undefined' && flowObj.type !== '' && flowObj.timesPointsOnActivity > 0){
                    loginScreenWithMobileHtml = '<div id="toi-login" data-flow-type="' + flowObj.type + '">';
                    if(flowObj.type === 'freetrial_activate'){
                        tpMsgBeforeSignInButton = '<div class="tpMsg-on-freetrial"><i></i>Continue to earn <strong>+'+ flowObj.timesPointsOnActivity +'</strong> TimesPoints</div>';
                    }
                }
                else{
                    loginScreenWithMobileHtml = '<div id="toi-login">';
                }
                loginScreenWithMobileHtml +=mod_mobilelogin.getStates(flowObj);
                    loginScreenWithMobileHtml +=''
                        +       '<div class="signin-section">'
                  
                        +           '<figure class="user-icon"><img src="/photo/63379366.cms" src="user-icon" /></figure>'
                        +           '<h3 class="sso-signin-form-data">'+config.headingText+'</h3>'
                        +           '<div id="sso-login-form">'
                        +               '<form class="form" autocomplete="off">'
                        +                   '<ul id="sso-signin-form">'
                        +                       '<li id="sso-mobile-input" class="input-field mobile">'
                                                 
                        +                           '<p>'
                        +                                '<span class="country-code">+91</span>'
                        +                               '<input class="enter-num" autocomplete="off" type="text" name="emailId" placeholder="ENTER MOBILE NUMBER" maxlength="10" />'
                        +                           '<i id="changeEmailIdDivSignUpOtp" class="edit" style="display:none;position: absolute;right: 0;top: 4px;"></i>'
                        +                           '</p>'
                        +                           '<div class="errorMsg"></div>'
                        +                       '</li>'
                        +                       '<li id="sso-send-otp-screen" style="display: none;">'
                        +                           '<h3>VERIFY YOUR </br>MOBILE NUMBER</h3>'
                        +                           '<div class="enter-otp-wrap">'
                        +                           '<p>Please enter the OTP sent to</p>'
                        
                        +                           '<div><span></span><i id="changeEmailIdDiv" class="edit"></i></div>'
                        +                           '</div>'
                        +                       '</li>'
                        +                       '<li id="sso-otpLoginDiv" class="input-field" style="display: none;">'
                        +                           '<input class="otpCodeInput" name="otpCode_1" type="' + (isTablet? 'number': 'text') + '" id="otpCode_1" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
                        +                           '<input class="otpCodeInput" name="otpCode_2" type="' + (isTablet? 'number': 'text') + '" id="otpCode_2" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
                        +                           '<input class="otpCodeInput" name="otpCode_3" type="' + (isTablet? 'number': 'text') + '" id="otpCode_3" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
                        +                           '<input class="otpCodeInput" name="otpCode_4" type="' + (isTablet? 'number': 'text') + '" id="otpCode_4" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
                        +                           '<input class="otpCodeInput" name="otpCode_5" type="' + (isTablet? 'number': 'text') + '" id="otpCode_5" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
                        +                           '<input class="otpCodeInput" name="otpCode_6" type="' + (isTablet? 'number': 'text') + '" id="otpCode_6" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
                        +                           '<div class="errorMsg wrongotp"></div>'
                        +                           '<div class="successMsg"></div>'
    		            +                       '</li>'
                        +                       '<li id="sso-login-otp-msg" class="text-field">'
                        +                           '<p></p>'
                        +                       '</li>'
                        +                       '<li id="sso-signInButtonDiv" class="submit">' + tpMsgBeforeSignInButton
                        +                           '<button type="submit" class="submit-btn disabled arrow-btn" disabled="disabled" ></button>'
                        +                           '<div id="regenerate-otp-container" style="display: none;">'
                        +                               '<span class="regenerate-otp">Didn\'t receive OTP?</span>'
                        +                               '<div id="regenerate-timer">Resend OTP in <span>' + config.resendTimeInSec + '</span> sec</div>'
                        +                               '<a id="sso-regenerate-otp" href="javascript:void(0)" class="secondary-link" style="display: none;">Resend OTP</a>'
                        +                           '</div>'
                        +                       '</li>'
                        +                   '</ul>'
                        +               '</form>'
                        +           '</div>'
                        +           '<div id="sso-register-form" style="display: none">'
                        +               '<form class="form" autocomplete="off">'
                        +                   '<ul>'
                        +                       '<li id="sso-mobile-input-filled" class="input-field mobile typed">'
                        +                           '<p>'
                        +                               '<input autocomplete="off" type="text" name="emailId" maxlength="10" readonly />'
                        +                               '<i id="changeEmailIdDivSignUp" class="edit" />'
                        +                           '</p>'
                        +                           '<div class="errorMsg"></div>'
                        +                       '</li>'
                        +                       '<li id="sso-name-input" class="input-field user-name">'
                        +                           '<p>'
                        +                               '<input autocomplete="off" type="text" name="fullname" placeholder="ENTER YOUR NAME" maxlength="30" />'
                        +                           '</p>'
                        +                           '<div class="errorMsg"></div>'
                        +                       '</li>'
                        +                       '<li id="sso-registerButtonDiv" class="submit">'
                        +                           '<button type="submit" class="submit-btn disabled arrow-btn" value="SUBMIT" disabled="disabled" />'
                        // +                           '<input type="submit" class="submit-btn disabled" value="SUBMIT" disabled="disabled" />'
                        +                       '</li>';
            loginScreenWithMobileHtml += mod_login.getConsentHTML();
            loginScreenWithMobileHtml +=                  '</ul>'
                        +               '</form>'
                        +           '</div>'
                        +       '</div>'
                        //  +           '<div id="first-time-registration">'
                        //  +           '<h3>TOI+ FREE TRIAL ACTIVATED</h3>'
                        //  +           '<p class="heading">WELCOME ABOARD,<span id="free-trial-name"></span></p>'
                        //  +           '<p>Enjoy reading premius articles from TOI+ and access THE Times Of India ads free.Additionally, enjoy 1-month membership of Times of India </p>'
                        //  +           '</div>'
                         +      '<div class="times-prime-benefits"><h6>'+config.bottomText+'</h6>'
                     +'<figure><span><img src="https://static.toiimg.com/photo/74175758.cms" alt="times-prime"><span></figure>'
                     +'<ul><li><img src="https://static.timesprime.com/3x/gaana.png?v=2H1" alt="logo"></li><li><img src="https://static.toiimg.com/photo/76853668.cms" alt="logo"></li><li><img src="https://static.timesprime.com/3x/myntra.png?v=1H1" alt="logo"></li><li><span class="brands">20+ Brands</span></li></ul>'
                 +    '</div>'
                        +   '</div>'
                         +          '<div class="primefooterlogo">'
                              +       '<div class="powered-by">'
                        +           '<img src="https://static.toiimg.com/photo/72142679.cms" />'
                        +       '</div>'
                        +       '<div class="teams-logo">'
                        +          '<span>One Network. One Account</span>'
                        +           '<a href="http://timesofindia.indiatimes.com/" target="_blank" class="toi"/><a href="http://economictimes.indiatimes.com/" target="_blank" class="et"/><a href="http://navbharattimes.indiatimes.com/" class="nbt" target="_blank"/><a href="http://maharashtratimes.indiatimes.com/" class="sm" target="_blank"/><a href="http://www.speakingtree.in/" class="st" target="_blank"/><a href="http://itimes.com/" class="itimes" target="_blank"/><a href="http://www.timespoints.com" class="tp" target="_blank"/>'
                        +       '</div>'
                        +     '</div>';
            // }
            // else{
            // loginScreenWithMobileHtml = '<div id="toi-login">'
            //             +       '<div class="signin-section">'
            //             +           '<figure class="user-icon"><img src="/photo/63379366.cms" src="user-icon" /></figure>'
            //             +           '<h3 class="sso-signin-form-data">'+config.headingText+'</h3>'
            //             +           '<div id="sso-login-form">'
            //             +               '<form class="form" autocomplete="off">'
            //             +                   '<ul id="sso-signin-form">'
            //             +                       '<li id="sso-mobile-input" class="input-field mobile">'
            //             +                           '<p>'
            //             +                               '<input autocomplete="off" type="text" name="emailId" placeholder="ENTER MOBILE NUMBER" maxlength="10" />'
            //             +                           '</p>'
            //             +                           '<div class="errorMsg"></div>'
            //             +                       '</li>'
            //             +                       '<li id="sso-send-otp-screen" style="display: none;">'
            //             +                           '<h3>We have sent OTP to</h3>'
            //             +                           '<div><span></span><i id="changeEmailIdDiv" class="edit"></i></div>'
            //             +                       '</li>'
            //             +                       '<li id="sso-otpLoginDiv" class="input-field" style="display: none;">'
            //             +                           '<input class="otpCodeInput" name="otpCode_1" type="' + (isTablet? 'number': 'text') + '" id="otpCode_1" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
            //             +                           '<input class="otpCodeInput" name="otpCode_2" type="' + (isTablet? 'number': 'text') + '" id="otpCode_2" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
            //             +                           '<input class="otpCodeInput" name="otpCode_3" type="' + (isTablet? 'number': 'text') + '" id="otpCode_3" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
            //             +                           '<input class="otpCodeInput" name="otpCode_4" type="' + (isTablet? 'number': 'text') + '" id="otpCode_4" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
            //             +                           '<input class="otpCodeInput" name="otpCode_5" type="' + (isTablet? 'number': 'text') + '" id="otpCode_5" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
            //             +                           '<input class="otpCodeInput" name="otpCode_6" type="' + (isTablet? 'number': 'text') + '" id="otpCode_6" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
            //             +                           '<div class="errorMsg wrongotp"></div>'
            //             +                           '<div class="successMsg"></div>'
    		      //      +                       '</li>'
            //             +                       '<li id="sso-login-otp-msg" class="text-field">'
            //             +                           '<p></p>'
            //             +                       '</li>'
            //             +                       '<li id="sso-signInButtonDiv" class="submit">'
            //             +                           '<input type="submit" class="submit-btn disabled" value="SUBMIT" disabled="disabled" />'
            //             +                           '<div id="regenerate-otp-container" style="display: none;">'
            //             +                               '<span class="regenerate-otp">Didn\'t receive OTP?</span>'
            //             +                               '<div id="regenerate-timer">Resend OTP in <span>' + config.resendTimeInSec + '</span> sec</div>'
            //             +                               '<a id="sso-regenerate-otp" href="javascript:void(0)" class="secondary-link" style="display: none;">Resend OTP</a>'
            //             +                           '</div>'
            //             +                       '</li>'
            //             +                   '</ul>'
            //             +               '</form>'
            //             +           '</div>'
            //             +           '<div id="sso-register-form" style="display: none">'
            //             +               '<form class="form" autocomplete="off">'
            //             +                   '<ul>'
            //             +                       '<li id="sso-mobile-input-filled" class="input-field mobile typed">'
            //             +                           '<p>'
            //             +                               '<input autocomplete="off" type="text" name="emailId" maxlength="10" readonly />'
            //             +                               '<i id="changeEmailIdDivSignUp" class="edit" />'
            //             +                           '</p>'
            //             +                           '<div class="errorMsg"></div>'
            //             +                       '</li>'
            //             +                       '<li id="sso-name-input" class="input-field user-name">'
            //             +                           '<p>'
            //             +                               '<input autocomplete="off" type="text" name="fullname" placeholder="ENTER YOUR NAME" maxlength="30" />'
            //             +                           '</p>'
            //             +                           '<div class="errorMsg"></div>'
            //             +                       '</li>'
            //             +                       '<li id="sso-registerButtonDiv" class="submit">'
            //             +                           '<input type="submit" class="submit-btn disabled" value="SUBMIT" disabled="disabled" />'
            //             +                       '</li>';
            // loginScreenWithMobileHtml += mod_login.getConsentHTML();
            // loginScreenWithMobileHtml +=                  '</ul>'
            //             +               '</form>'
            //             +           '</div>'
            //             +       '</div>'
            //             +       '<div class="powered-by">'
            //             +           '<img src="https://static.toiimg.com/photo/72142679.cms" />'
            //             +       '</div>'
            //             +       '<div class="teams-logo">'
            //             +          '<span>One Network. One Account</span>'
            //             +           '<a href="http://timesofindia.indiatimes.com/" target="_blank" class="toi"/><a href="http://economictimes.indiatimes.com/" target="_blank" class="et"/><a href="http://navbharattimes.indiatimes.com/" class="nbt" target="_blank"/><a href="http://maharashtratimes.indiatimes.com/" class="sm" target="_blank"/><a href="http://www.speakingtree.in/" class="st" target="_blank"/><a href="http://itimes.com/" class="itimes" target="_blank"/><a href="http://www.timespoints.com" class="tp" target="_blank"/>'
            //             +       '</div>'
            //             +   '</div>';
            // }
            return loginScreenWithMobileHtml;
        }
        
        return mod_mobilelogin;
	})


/**
 * 'string' module.
 *
 * @module string
 */
 
define( 'tiljs/string',[], function () {
	var mod_string = {};
	mod_string.camelCase = function ( str ) {
		return str.replace( /(?:^|\s)\w/g, function ( match ) {
			return match.toUpperCase();
		} ).replace( /(\s|-|_)/g, "" );
	};
	mod_string.splice = function ( str, idx, rem, s ) {
		return( str.slice( 0, idx ) + s + str.slice( idx + Math.abs( rem ) ) );
	};
	mod_string.startsWith = function ( haystack, needle ) {
		return haystack.indexOf( needle ) === 0;
	};
	return mod_string;
} );

/**
 * 'util' module.
 *
 * @module util
 * @requires logger
 * @requires jquery
 * @requires is
 * @requires string
 * @requires json
 */
define( 'tiljs/util',[ "./logger", "jquery", "./is", "./string", "json" ], function ( logger, $, is, string, json ) {
	logger.log( "util loaded" );
	var mod_util = {};
	mod_util.extend = $.extend;
	/*

     function () {
     var arg = [true];
     for(var i=0;arguments[i];i++){
     arg.push(arguments[i]);
     }

     return mod_util.deepextend.apply(this,arg);
     };*/
	mod_util.deepextend = function () {
		//todo remove jquery dependency
		return $.extend.apply( this, arguments );
		//        for (var i = 1; i < arguments.length; i++)
		//            for (var key in arguments[i]){
		//                if (arguments[i].hasOwnProperty(key)){
		//                    if(arguments[i][key] instanceof Array || arguments[i][key] instanceof Object){
		////                        console.log(arguments[i][key]);
		//                        mod_util.extend(arguments[0][key],arguments[i][key]);
		//                    }else{
		//                        console.log(arguments[i][key]);
		//
		//                        arguments[0][key] = arguments[i][key];
		//                    }
		//                }
		//            }
		//        return arguments[0];
	};
	/**
	 * Get values in obj2 which are not there in obj1
	 *
	 * INPUT
	 * obj1 = {a:1,b:2,c:3}
	 * obj2 = {a:1,c:3,d:4}
	 *
	 * OUTPUT
	 * obj = {d:4}
	 *
	 * @param obj1
	 * @param obj2
	 * @returns {{}}
	 */
	mod_util.xor = function ( obj1, obj2 ) {
		var obj = {},o;
		for( o in obj2 ) {
			if( !obj1.hasOwnProperty( o ) ) {
				obj[ o ] = obj2[ o ];
			}
		}
		return obj;
	};
	mod_util.convertObj = function ( obj, callback ) {
		var objResult = {};
		util.each( obj, function ( k, v ) {
			objResult[ k ] = callback( k, v );
		} );
		return objResult;
	};
	mod_util.each = function ( obj, callback ) {
		var i,o;
		if( !callback ) {
			return null;
		}
		if( obj instanceof Array ) {
			for( i = 0; i < obj.length; i++ ) {
				if( callback( i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else if( obj instanceof Object ) {
			for( o in obj ) {
				if( obj.hasOwnProperty( o ) ) {
					if( callback( o, obj[ o ] ) === false ) {
						break;
					}
				}
			}
		} else {
			//callback(0, obj);
		}
	};
	mod_util.wrapCallback = function ( callback, arga ) {
		try {
			if( callback ) {
				callback.apply( this, args );
			}
		} catch( e ) {
			logger.error( e );
		}
	};
	//    mod_util.update = function (obj) {
	//        config = mod_util.extend(true, config, obj);
	//    };
	mod_util.formatNumber = function ( num ) {
		if( num >= 1000000000 ) {
			return( num / 1000000000 ).toFixed( 1 ) + 'G';
		}
		if( num >= 1000000 ) {
			return( num / 1000000 ).toFixed( 1 ) + 'M';
		}
		if( num >= 1000 ) {
			return( num / 1000 ).toFixed( 1 ) + 'K';
		}
		return num;
	};
	mod_util.getJsonFromString = function ( str, entitySeparator, keyValueSeparator ) {
		entitySeparator = entitySeparator || "&";
		keyValueSeparator = keyValueSeparator || "=";
		var json = {};
		var entities = str.split( entitySeparator );
		mod_util.each( entities, function ( i, entity ) {
			var keyValue = entity.split( keyValueSeparator );
			json[ keyValue[ 0 ] ] = keyValue[ 1 ];
		} );
		return json;
	};
	mod_util.val = function ( val, options ) {
		if( is.funct( val ) ) {
			return val( options );
		}
		return val;
	};
	/**
	 * Throttles the number of times a function is called, ignores rest of calls
	 * <br/>
	 * function called normally        ##############################<br/>
	 * function called with throttle   #     #     #     #     #    #<br/>
	 * <br/>
	 * Assuming one space as one milisecond & delay=5<br/>
	 * <br/>
	 * Usage : 'scroll'/'move' functions where events are fired on every scroll/move, calling of event can be throttled
	 *
	 * @function throttle
	 * @memberOf module:util#
	 * @param delay time after which that method is to be called
	 * @param callback method to be called after specified delay
	 * @returns {function} throttled instance of function which can be called on throttle
	 * @example
	 *
	 * function run(i){
	 *     console.log("run called : "+i);
	 * }
	 *
	 * //Normal Call
	 * for(var i=0;i<500;i++){
	 *     run(i);  //called 500 times
	 * }
	 *
	 * //Throttled call
	 * require(['util'],function(util){
	 *   var th = util.throttle(5,run);
	 *   for(var i=0;i<500;i++){
	 *     th(i);  //called (500/time taken by function) times
	 *   }
	 * });
	 *
	 */
	mod_util.throttle = function ( delay, callback ) {
		var _timeout;
		var _exec = 0;
		return function callable() {
			var elapsed = +new Date() - _exec;
			//                console.log("callable:elapsed:"+_exec);
			var tthis = this;
			var args = arguments;

			function run() {
				_exec = +new Date();
				//                    console.log("run_exec:"+_exec);
				callback.apply( tthis, args );
			}
			_timeout && clearTimeout( _timeout );
			//                console.log("elapsed>run : "+(elapsed+">"+delay));
			if( elapsed > delay ) run();
			else _timeout = setTimeout( run, delay - elapsed );
		};
	};
	mod_util.getDate = function ( str ) {
		try {
			if( is.number( str ) ) {
				return new Date( str );
			} else {
				str = str.replace( /(\d)(A|P)M/, "$1 $2M" ); //Changes "22 Nov 2013, 10:19AM" -> "22 Nov 2013, 10:19 AM"
			}
			return new Date( str );
		} catch( e ) {
			logger.error( e );
			return null;
		}
	};
	var __uuidCnt = 0;
	/**
	 * Generates uuid.
	 * @returns {number} unique id for a system
	 */
	mod_util.uuid = function () {
		var d = new Date().getTime();
		var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace( /[xy]/g, function ( c ) {
			var r = ( d + Math.random() * 16 ) % 16 | 0;
			d = Math.floor( d / 16 );
			return( c == 'x' ? r : ( r & 0x7 | 0x8 ) ).toString( 16 );
		} );
		return uuid;
	};
	/**
	 * Make getter setters for heirerchy less object supplied as parameter
	 * @param objName
	 * @param json
	 * @param setter
	 */
	//    mod_util.jsonToObj = function(objName,json,setter){
	//        this[objName] = function(attr){
	//            var tthis = this;
	//            mod_util.each(attr,function(k,v){
	//                tthis[k] = v;
	//            });
	//        };
	//        var obj = new this[objName](json);
	////        if(!is.object(obj)){
	////            throw new Error("Paramater is not an 'Object'. Cannot apply Getter-Setter");
	////        }
	//
	//        mod_util.each(json,function(k,v){
	//            var kCamelCase = string.camelCase(k);
	//            if(setter === true){
	//                obj['set'+kCamelCase] = function(kk){return this[k] = kk;};
	//            }
	//            obj['get'+kCamelCase] = function(){return this[k]};
	//        });
	//        return obj;
	//    };
	/**
	 * Changes the key for an object using the maping.
	 *
	 * Eg :
	 *    obj = {id:123, name:"Joe"};
	 *    mapping = {idd:id}
	 *
	 *    result = {idd:123}
	 *
	 *
	 * @param mapping
	 * @param obj
	 * @returns {{}}
	 */
	mod_util.mapObj = function ( mapping, obj ) {
		if( !is.object( mapping ) && !is.object( obj ) ) {
			throw new Error( 'Invalid Parameters' ); //todo give proper message
		}
		var newObj = {};
		mod_util.each( mapping, function ( k, v ) {
			if( is.funct( v ) ) {
				newObj[ k ] = v( obj );
			} else {
				newObj[ k ] = obj[ v ];
			}
		} );
		return newObj;
	};
	mod_util.getDomainOnly = function ( url ) {
		//        var separate = window.location.host.split('.');
		//        separate.shift();
		//        return "." + separate.join('.');
		return "." + ( url || document.location.host ).split( ":" )[ 0 ].split( "." ).reverse().slice( 0, 2 ).reverse().join( "." );
	};
	mod_util.format = function ( text, data ) { //todo move to format.js
		var formattedText = text;
		mod_util.each( data, function ( i, v ) {
			formattedText = formattedText.replace( "{{:" + i + "}}", data[ i ] ); //todo use better way
		} );
		//Removing text which could not be formatted, todo log it
		formattedText = formattedText.replace( /{{:[a-zA_Z0-9]+}}/, "" );
		return formattedText;
	};
	mod_util.stringify = JSON ? JSON.stringify : null;
	mod_util.checkNoScript = function ( url ) {
		//        $("noscript")
	};
	mod_util.getClick = function () {
		return is.touch() ? "touchstart" : "click";
	};
	mod_util.getParam = function ( key ) {
		var sanitizedParams = window.location.search.replace( "?", "" );
		if( is.defined( key ) ) {
			return mod_util.deparam( sanitizedParams )[ key ];
		} else {
			return mod_util.deparam( sanitizedParams );
		}
	};
	mod_util.deparam = function ( text ) {
		var data = {}; //todo mot handled 'a[]' or 'a[b][c]'
		mod_util.each( text.replace( /\+/g, ' ' ).split( "&" ), function ( i, pair ) {
			var kv = pair.split( "=" );
			data[ decodeURIComponent( kv[ 0 ] ) ] = decodeURIComponent( kv[ 1 ] || "" ); //todo all values are string
		} );
		return data
	};
	//todo implement setting and getting each attr
	mod_util.data = function ( element ) {
		var data = {};
		var attrMap = $( element )[ 0 ].attributes;
		$.each( attrMap, function ( i, e ) {
			var prefix = e.nodeName.substr( 0, 5 );
			if( prefix === "data-" ) { //It is a data attribute
				data[ e.nodeName.replace( prefix, "" ) ] = e.nodeValue; //TODO nodeValue depricated use node
			}
		} );
		return data;
	};
	var ManagedError = function ( message ) {
		Error.prototype.constructor.apply( this, arguments );
		this.message = message;
	};
	ManagedError.prototype = new Error();
	mod_util.wrapCallback = function ( fn ) {
		return function () {
			try {
				return fn.apply( this, arguments );
			} catch( e ) {
				if( e instanceof ManagedError ) {
					// re-throw immediately
					throw e;
				}
				logger.error( e );
				// re-throw to halt execution
				throw e;
			}
		};
	};
	/**
	 * MD5 (Message-Digest Algorithm) by WebToolkit
	 * @param s
	 * @returns {string}
	 */
	mod_util.md5 = function ( s ) {
		function L( k, d ) {
			return( k << d ) | ( k >>> ( 32 - d ) )
		}

		function K( G, k ) {
			var I, d, F, H, x;
			F = ( G & 2147483648 );
			H = ( k & 2147483648 );
			I = ( G & 1073741824 );
			d = ( k & 1073741824 );
			x = ( G & 1073741823 ) + ( k & 1073741823 );
			if( I & d ) {
				return( x ^ 2147483648 ^ F ^ H )
			}
			if( I | d ) {
				if( x & 1073741824 ) {
					return( x ^ 3221225472 ^ F ^ H )
				} else {
					return( x ^ 1073741824 ^ F ^ H )
				}
			} else {
				return( x ^ F ^ H )
			}
		}

		function r( d, F, k ) {
			return( d & F ) | ( ( ~d ) & k )
		}

		function q( d, F, k ) {
			return( d & k ) | ( F & ( ~k ) )
		}

		function p( d, F, k ) {
			return( d ^ F ^ k )
		}

		function n( d, F, k ) {
			return( F ^ ( d | ( ~k ) ) )
		}

		function u( G, F, aa, Z, k, H, I ) {
			G = K( G, K( K( r( F, aa, Z ), k ), I ) );
			return K( L( G, H ), F )
		}

		function f( G, F, aa, Z, k, H, I ) {
			G = K( G, K( K( q( F, aa, Z ), k ), I ) );
			return K( L( G, H ), F )
		}

		function D( G, F, aa, Z, k, H, I ) {
			G = K( G, K( K( p( F, aa, Z ), k ), I ) );
			return K( L( G, H ), F )
		}

		function t( G, F, aa, Z, k, H, I ) {
			G = K( G, K( K( n( F, aa, Z ), k ), I ) );
			return K( L( G, H ), F )
		}

		function e( G ) {
			var Z;
			var F = G.length;
			var x = F + 8;
			var k = ( x - ( x % 64 ) ) / 64;
			var I = ( k + 1 ) * 16;
			var aa = Array( I - 1 );
			var d = 0;
			var H = 0;
			while( H < F ) {
				Z = ( H - ( H % 4 ) ) / 4;
				d = ( H % 4 ) * 8;
				aa[ Z ] = ( aa[ Z ] | ( G.charCodeAt( H ) << d ) );
				H++
			}
			Z = ( H - ( H % 4 ) ) / 4;
			d = ( H % 4 ) * 8;
			aa[ Z ] = aa[ Z ] | ( 128 << d );
			aa[ I - 2 ] = F << 3;
			aa[ I - 1 ] = F >>> 29;
			return aa
		}

		function B( x ) {
			var k = "",
				F = "",
				G, d;
			for( d = 0; d <= 3; d++ ) {
				G = ( x >>> ( d * 8 ) ) & 255;
				F = "0" + G.toString( 16 );
				k = k + F.substr( F.length - 2, 2 )
			}
			return k
		}

		function J( k ) {
			k = k.replace( /rn/g, "n" );
			var d = "";
			for( var F = 0; F < k.length; F++ ) {
				var x = k.charCodeAt( F );
				if( x < 128 ) {
					d += String.fromCharCode( x )
				} else {
					if( ( x > 127 ) && ( x < 2048 ) ) {
						d += String.fromCharCode( ( x >> 6 ) | 192 );
						d += String.fromCharCode( ( x & 63 ) | 128 )
					} else {
						d += String.fromCharCode( ( x >> 12 ) | 224 );
						d += String.fromCharCode( ( ( x >> 6 ) & 63 ) | 128 );
						d += String.fromCharCode( ( x & 63 ) | 128 )
					}
				}
			}
			return d
		}
		var C = Array();
		var P, h, E, v, g, Y, X, W, V;
		var S = 7,
			Q = 12,
			N = 17,
			M = 22;
		var A = 5,
			z = 9,
			y = 14,
			w = 20;
		var o = 4,
			m = 11,
			l = 16,
			j = 23;
		var U = 6,
			T = 10,
			R = 15,
			O = 21;
		s = J( s );
		C = e( s );
		Y = 1732584193;
		X = 4023233417;
		W = 2562383102;
		V = 271733878;
		for( P = 0; P < C.length; P += 16 ) {
			h = Y;
			E = X;
			v = W;
			g = V;
			Y = u( Y, X, W, V, C[ P + 0 ], S, 3614090360 );
			V = u( V, Y, X, W, C[ P + 1 ], Q, 3905402710 );
			W = u( W, V, Y, X, C[ P + 2 ], N, 606105819 );
			X = u( X, W, V, Y, C[ P + 3 ], M, 3250441966 );
			Y = u( Y, X, W, V, C[ P + 4 ], S, 4118548399 );
			V = u( V, Y, X, W, C[ P + 5 ], Q, 1200080426 );
			W = u( W, V, Y, X, C[ P + 6 ], N, 2821735955 );
			X = u( X, W, V, Y, C[ P + 7 ], M, 4249261313 );
			Y = u( Y, X, W, V, C[ P + 8 ], S, 1770035416 );
			V = u( V, Y, X, W, C[ P + 9 ], Q, 2336552879 );
			W = u( W, V, Y, X, C[ P + 10 ], N, 4294925233 );
			X = u( X, W, V, Y, C[ P + 11 ], M, 2304563134 );
			Y = u( Y, X, W, V, C[ P + 12 ], S, 1804603682 );
			V = u( V, Y, X, W, C[ P + 13 ], Q, 4254626195 );
			W = u( W, V, Y, X, C[ P + 14 ], N, 2792965006 );
			X = u( X, W, V, Y, C[ P + 15 ], M, 1236535329 );
			Y = f( Y, X, W, V, C[ P + 1 ], A, 4129170786 );
			V = f( V, Y, X, W, C[ P + 6 ], z, 3225465664 );
			W = f( W, V, Y, X, C[ P + 11 ], y, 643717713 );
			X = f( X, W, V, Y, C[ P + 0 ], w, 3921069994 );
			Y = f( Y, X, W, V, C[ P + 5 ], A, 3593408605 );
			V = f( V, Y, X, W, C[ P + 10 ], z, 38016083 );
			W = f( W, V, Y, X, C[ P + 15 ], y, 3634488961 );
			X = f( X, W, V, Y, C[ P + 4 ], w, 3889429448 );
			Y = f( Y, X, W, V, C[ P + 9 ], A, 568446438 );
			V = f( V, Y, X, W, C[ P + 14 ], z, 3275163606 );
			W = f( W, V, Y, X, C[ P + 3 ], y, 4107603335 );
			X = f( X, W, V, Y, C[ P + 8 ], w, 1163531501 );
			Y = f( Y, X, W, V, C[ P + 13 ], A, 2850285829 );
			V = f( V, Y, X, W, C[ P + 2 ], z, 4243563512 );
			W = f( W, V, Y, X, C[ P + 7 ], y, 1735328473 );
			X = f( X, W, V, Y, C[ P + 12 ], w, 2368359562 );
			Y = D( Y, X, W, V, C[ P + 5 ], o, 4294588738 );
			V = D( V, Y, X, W, C[ P + 8 ], m, 2272392833 );
			W = D( W, V, Y, X, C[ P + 11 ], l, 1839030562 );
			X = D( X, W, V, Y, C[ P + 14 ], j, 4259657740 );
			Y = D( Y, X, W, V, C[ P + 1 ], o, 2763975236 );
			V = D( V, Y, X, W, C[ P + 4 ], m, 1272893353 );
			W = D( W, V, Y, X, C[ P + 7 ], l, 4139469664 );
			X = D( X, W, V, Y, C[ P + 10 ], j, 3200236656 );
			Y = D( Y, X, W, V, C[ P + 13 ], o, 681279174 );
			V = D( V, Y, X, W, C[ P + 0 ], m, 3936430074 );
			W = D( W, V, Y, X, C[ P + 3 ], l, 3572445317 );
			X = D( X, W, V, Y, C[ P + 6 ], j, 76029189 );
			Y = D( Y, X, W, V, C[ P + 9 ], o, 3654602809 );
			V = D( V, Y, X, W, C[ P + 12 ], m, 3873151461 );
			W = D( W, V, Y, X, C[ P + 15 ], l, 530742520 );
			X = D( X, W, V, Y, C[ P + 2 ], j, 3299628645 );
			Y = t( Y, X, W, V, C[ P + 0 ], U, 4096336452 );
			V = t( V, Y, X, W, C[ P + 7 ], T, 1126891415 );
			W = t( W, V, Y, X, C[ P + 14 ], R, 2878612391 );
			X = t( X, W, V, Y, C[ P + 5 ], O, 4237533241 );
			Y = t( Y, X, W, V, C[ P + 12 ], U, 1700485571 );
			V = t( V, Y, X, W, C[ P + 3 ], T, 2399980690 );
			W = t( W, V, Y, X, C[ P + 10 ], R, 4293915773 );
			X = t( X, W, V, Y, C[ P + 1 ], O, 2240044497 );
			Y = t( Y, X, W, V, C[ P + 8 ], U, 1873313359 );
			V = t( V, Y, X, W, C[ P + 15 ], T, 4264355552 );
			W = t( W, V, Y, X, C[ P + 6 ], R, 2734768916 );
			X = t( X, W, V, Y, C[ P + 13 ], O, 1309151649 );
			Y = t( Y, X, W, V, C[ P + 4 ], U, 4149444226 );
			V = t( V, Y, X, W, C[ P + 11 ], T, 3174756917 );
			W = t( W, V, Y, X, C[ P + 2 ], R, 718787259 );
			X = t( X, W, V, Y, C[ P + 9 ], O, 3951481745 );
			Y = K( Y, h );
			X = K( X, E );
			W = K( W, v );
			V = K( V, g )
		}
		var i = B( Y ) + B( X ) + B( W ) + B( V );
		return i.toLowerCase()
	};
	/**
	 * Decode '<' to '&lt;'
	 * @param decodedText
	 * @returns {String}
	 */
	mod_util.encodeHTML = function ( text ) {
		return $( "<div/>" ).text( text ).html();
	}
	/**
	 * Decode '&lt;' to '<'
	 * @param decodedText
	 * @returns {String}
	 */
	mod_util.decodeHTML = function ( text ) {
		return $( "<div/>" ).html( text ).text();
	}
	/**
	 * reload iframe
	 * @param: iframe selector
	 * @usage: Used to reload iframe by passing
	 *         any selector
	 * @example: util.reloadIframe("#id");
	 *         util.reloadIframe(".class");
	 */
	mod_util.reloadIframe = function ( iframe ) {
		if ($(iframe).length > 0){
            $(iframe).attr("src", $(iframe).attr("src"));
            return true;
        }
        return false;
	}
	/**
	*trim text 
	*@param: cmt:text, charlen: character length
	*@usage: Used to cut the string to desired length
	*@example:util.trimText("text string",5)
	*/
	mod_util.trimText = function(cmt,charlen){
        var trimmedString = cmt.substr(0,charlen);
        if(cmt.length > charlen){
            trimmedString = cmt.replace(new RegExp("^(.{"+charlen+"}[^\\s]*).*"), "$1");
        }
        return trimmedString;
	}
	return mod_util;
} );

/**
 * 'timer' module.
 *
 * @module timer
 * @requires util
 * @requires is
 */
define( 'tiljs/timer',[ "./util", "./is" ], function ( util, is ) {
	var mod_timer = {};
	mod_timer.every = function ( time, callback ) {
		return setInterval( callback, time );
	};
	mod_timer.after = mod_timer.delay = function ( time, callback ) {
		return setTimeout( callback, time );
	};
	mod_timer.available = function ( varname, callback, time, trytimes ) {
		if( trytimes == 0 ) {
			callback( null );
		}
		if( window[ varname ] ) {
			if( callback ) {
				callback( window[ varname ] );
			}
		} else {
			time = time || 2000;
			setTimeout( function () {
				mod_timer.available( varname, callback, time, --trytimes );
			}, time );
		}
	};
	mod_timer.cancel = function ( id ) { //todo handle gracefully
		try {
			clearTimeout( id );
		} catch( e ) {}
		try {
			clearInterval( id );
		} catch( e ) {}
	};
	mod_timer.elapsedTime = function ( ctime, labels_config, last_only ) {
		if( !is.number( ctime ) ) {
			//            if(is.dateStr(ctime)){
			//                return mod_timer.elapsedTime(new Date(ctime).getTime(),labels_config, last_only);
			//            }
			try {
				ctime = parseInt( ctime, 10 );
				return mod_timer.elapsedTime( ctime, labels_config, last_only );
			} catch( e ) {
				return "";
			}
		}
		var labels_default = {
			year: "year",
			//            month:"month",  //todo implement months
			day: "day",
			hour: "hour",
			minute: "minute",
			second: "second",
			ago: "ago"
		};
		var labels = util.extend( true, {}, labels_default, labels_config );
		var timeparts = [
			{
				name: labels.year,
				div: 31536000000,
				mod: 10000
			},
 //            {name: labels.month, div: 86400000, mod: 365},
			{
				name: labels.day,
				div: 86400000,
				mod: 365
			},
			{
				name: labels.hour,
				div: 3600000,
				mod: 24
			},
			{
				name: labels.minute,
				div: 60000,
				mod: 60
			},
			{
				name: labels.second,
				div: 1000,
				mod: 60
			}
        ];
		var
			i = 0,
			l = timeparts.length,
			calc,
			values = [],
			interval = new Date().getTime() - ctime; //todo use server time
		while( i < l ) {
			calc = Math.floor( interval / timeparts[ i ].div ) % timeparts[ i ].mod;
			if( calc && calc >= 0 ) {
				values.push( calc + ' ' + timeparts[ i ].name + ( calc > 1 ? 's' : '' ) );
			}
			i += 1;
		}
		if( values.length === 0 ) {
			values.push( '1 ' + labels.second );
		}
		if( last_only === true ) {
			return values[ 0 ] + ' ' + labels.ago;
		} else {
			return values.join( ', ' ) + ' ' + labels.ago;
		}
	};
	return mod_timer;
} );

/**
 * 'ajax' module.
 *
 * @module ajax
 * @requires timer
 * @requires util
 * @requires jquery
 * @requires is
 */
define( 'tiljs/ajax',[ "./timer", "./util", "jquery", "./is", "module" ], function ( timer, util, $, is, module ) {
	var default_config = {
			timeout: 60000 // 60 seconds
		},
		config = util.extend( true, {}, default_config, module.config()),
		mod_ajax = {};

	$.ajaxSetup( {
		timeout: config.timeout
	} );
	/**
	 * Checks if the javascript or css is loaded
	 *
	 * This is to be deprecated, use 'queue' instead.
	 *
	 * @memberOf module:ajax#
	 * @function getAll
	 *
	 * @param urlArr
	 * @param dataArr
	 * @param callback
	 * @param type
	 * @returns {boolean}
	 * @example
	 *
	 *  require(['ajax'],function(ajax){
	 *     ajax.getAll(['a.json','b.json'],[{a_param:'a'},[]],function(a_resp,b_resp){
	 *          console.log(a_resp);
	 *          console.log(b_resp);
	 *     })
	 *  });
	 */
	mod_ajax.getAll = function ( urlArr, dataArr, callback, type ) {
		var tthis = this,
			result = [],
			response = [],
			i, currDataArr;
		function process( data ) {
			response.push( data );
			if( response.length === urlArr.length ) {
				callback.apply( tthis, response );
			}
		}
		for( i = 0; i < urlArr.length; i++ ) {
			currDataArr = dataArr && dataArr.length > i ? dataArr[ i ] : {}; //todo use better method
			result.push( $.get( urlArr[ i ], currDataArr, process, type ) );
		}
		return result;
	};
	/**
	 * Creates a serialized representation of an array or object,
	 * suitable for use in a URL query string or Ajax request.
	 *
	 * @memberOf module:ajax#
	 * @function param
	 *
	 * @param {Array|Object} obj
	 * @param {Boolean} [traditional]
	 * @returns {String} Serialised array or object
	 * @example
	 *
	 *  require(['ajax'],function(ajax){
	 *
	 *  var myObject = {
	 *    a: {
	 *      one: 1,
	 *      two: 2,
	 *      three: 3
	 *    },
	 *    b: [ 1, 2, 3 ]
	 *  };
	 *  ajax.param(myObject);
	 *  //output : a%5Bone%5D=1&a%5Btwo%5D=2&a%5Bthree%5D=3&b%5B%5D=1&b%5B%5D=2&b%5B%5D=3
	 *  });
	 */
	mod_ajax.param = $.param; //todo override
	/**
	 * Perform an asynchronous HTTP (Ajax) request<br/>
	 * <br/>
	 * See {@link http://api.jquery.com/jQuery.ajax/|jQuery.ajax}
	 *
	 * @memberOf module:ajax#
	 * @function ajax
	 *
	 * @param {String} url A string containing the URL to which the request is sent.
	 * @param {Object} [settings] A set of key/value pairs that configure the Ajax request. All settings are optional.
	 *                            A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings )
	 *                            below for a complete list of all settings.
	 * @returns {object}
	 * @example
	 *
	 *  require(['ajax'],function(ajax){
	 *     ajax.ajax('http://www.abc.com/ajax.json')
	 *  });
	 */
	/**
	 * Perform an asynchronous HTTP (Ajax) request<br/>
	 * <br/>
	 * See {@link http://api.jquery.com/jQuery.ajax/|jQuery.ajax}
	 *
	 * @memberOf module:ajax#
	 * @function ajax
	 *
	 * @param {Object} [settings] A set of key/value pairs that configure the Ajax request. All settings are optional.
	 *                            A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings )
	 *                            below for a complete list of all settings.
	 * @returns {object}
	 * @example
	 *
	 *  require(['ajax'],function(ajax){
	 *     ajax.ajax({
	 *       url: "http://www.abc.com/data.json",
	 *       beforeSend: function( xhr ) {
	 *         xhr.overrideMimeType( "text/plain; charset=x-user-defined" );
	 *       },
	 *       success:function(data){
	 *          console.log(data);   //data returned by ajax request
	 *       }
	 *     })
	 *  });
	 */
	mod_ajax.ajax = $.ajax; //todo override
	/**
     * Load data from the server using a HTTP GET request.<br/>
     * <br/>
     * See {@link http://api.jquery.com/jQuery.get/|jQuery.get}
     *
     * This is a shorthand Ajax function, which is equivalent to:
     *
     * <pre><code>
          ajax.ajax({
              url: url,
              data: data,
              success: success,
              dataType: dataType
            });
     * </code></pre>
     *
     * @memberOf module:ajax#
     * @function get
     *
     * @example
     *
     *  require(['ajax'],function(ajax){
     *     ajax.get("http://www.abc.com/data.json",{},function(data){
     *         console.log(data);   //data returned by ajax request
     *     });
     *  });
     * @param {String|Function} url A string containing the URL to which the request is sent.
     * @param {Object|String} [data] A plain object or string that is sent to the server with the request.
     * @param {Function} [callback] A callback function that is executed if the request succeeds.
     * @param {String} [type] The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html).
     * @returns {object}
     */
	mod_ajax.get = function ( url, data, callback, type ) {
		if( is.funct( url ) ) {
			return url( data, callback );
		} else {
			return $.get( url, data, callback, type );
		}
	};
	/**
     * Send/Load data to/from the server using a HTTP POST request.<br/>
     * <br/>
     * See {@link http://api.jquery.com/jQuery.get/|jQuery.get}
     *
     * This is a shorthand Ajax function, which is equivalent to:
     *
     * <pre><code>
     ajax.ajax({
              type: "POST",
              url: url,
              data: data,
              success: success,
              dataType: dataType
            });
     * </code></pre>
     *
     * @memberOf module:ajax#
     * @function post
     *
     * @example
     *
     *  require(['ajax'],function(ajax){
     *     ajax.post("http://www.abc.com/data.json",{},function(data){
     *         console.log(data);   //data returned by ajax request
     *     });
     *  });
     * @param {String} url A string containing the URL to which the request is sent.
     * @param {Object|String} [data] A plain object or string that is sent to the server with the request.
     * @param {Function} [callback] A callback function that is executed if the request succeeds.
     * @param {String} [type] The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html).
     * @returns {object}
     */
	mod_ajax.post = function ( url, data, callback, type ) {
		return $.post( url, data, callback, type );
	};
	mod_ajax.postCrossDomain = function ( url, data ) {
		var randomName = "postFrame" + new Date().getTime() + Math.floor( ( Math.random() * 1000 )),
			iframe = $( "<iframe></iframe>" ).attr( "name", randomName),
		//Create the form in a jQuery object
			form = $( "<form action='" + url + "' method='post' target='" + randomName + "'></form>" );
		//Get the value from the asp textbox with the ID txtBox1 and POST it as b1
		util.each( data, function ( k, v ) {
			form.append( $( "<input type='hidden' name='" + k + "' />" ).attr( 'value', v ) );
		} );
		//Add the iframe to the body
		iframe.appendTo( 'body' );
		//Add the form to the body
		form.appendTo( 'body' )
		//Submit the form which posts the variables into the iframe
		.submit()
		//Remove the form from the DOM (so subsequent requests won't keep expanding the DOM)
		.remove();
		timer.after( 10000, function () {
			iframe.remove();
		} );
		//        return $.post(url,data,callback,type);
	};
	mod_ajax.getJSONP = function ( url, data, callback ) {
		//        var req = mod_ajax.ajax({
		//            url : url,
		//            data : data,
		//            dataType : "jsonp",
		//            timeout : config.timeout
		//        });
		//
		//        req.success(callback);
		//        req.error(callback);
		return mod_ajax.get( url, data, callback, "jsonp" );
	};
	mod_ajax.getJSON = function ( url, data, callback ) {
		return mod_ajax.get( url, data, callback, "json" );
	};
	return mod_ajax;
} );

define( 'tiljs/user',[ "./util", "./ajax", "./cookie", "./event", "jquery", "./is", "./logger", "./string" ], function ( util, ajax, cookie, event, $, is, logger, string ) {
	var mod_user = {},
		/*__default_user = {
			uuid: util.uuid(),
			firstName: "",
			lastName: ""
	},*/
		User = function ( attr, mapping ) {
		var prvt = {},
			tthis = this;
		if( mapping && is.object( mapping ) ) {
			attr = util.mapObj( mapping, attr );
		}
		util.each( attr, function ( k, v ) {
			prvt[ k ] = v;
			var kCamelCase = string.camelCase( k );
			//            if(setter === true){
			//                tthis['set'+kCamelCase] = function(kk){return prvt[k] = kk;};
			//            }
			tthis[ 'get' + kCamelCase ] = function () {
				return prvt[ k ];
			};
		} );
		this.getMappedUser = function () {
			return prvt; //todo return clone.
		};
		this.getOriginalUser = function () {
			return attr; //todo return clone.
		};
		this.toString = this.toJson = function () {
			return util.stringify( prvt, true, "\t" );
		};
	};
	mod_user.getNewUser = function ( default_user, mapping ) {
		if( default_user instanceof User ) {
			return default_user;
		} else if( is.object( default_user ) ) {
			return new User( default_user, mapping );
		} else {
			return null;
		}
	};
	mod_user.isUser = function ( obj ) {
		return obj instanceof User;
	};
	return mod_user;
} );

/**
 * 'login' module.
 *
 * @module login
 * @requires util
 * @requires ajax
 * @requires cookie
 * @requires event
 * @requires jquery
 * @requires module
 * @requires user
 * @requires string
 * @requires logger
 */
define('tiljs/login',["tiljs/apps/times/usermanagement"],
    function (login) {
        mod_login = login;
        
        return mod_login;
    }
);

/**
 * 'page' module.
 * //todo find better name - it is not generic file
 * @module page
 * @requires util
 */
define( 'tiljs/page',[ "module", "./util", "jquery" ], function ( module, util, $ ) {
	var default_config = {
		msid: window.msid,
		channel: "",
		siteId: "",
		domain: ""
	};
	var config = util.extend( true, {}, default_config, module.config() );
	var mod_page = {};
	mod_page.getMsid = function ( url ) {
		try {
			if( !url || url.length === 0 || url === "#" ) {
				url = location.href;
				//                return /\/(\d*)\.cms/.exec(url)[1];
				return /(\d*)\.cms/.exec( url )[ 1 ];
			} else {
				return config.msid;
			}
		} catch( e ) {
			return config.msid;
		}
	}
	mod_page.getSiteId = function () {
		return config.siteId;
	}
	mod_page.getDomain = function () {
		return config.domain;
	}
	mod_page.getChannel = function () {
		return config.channel;
	}
	mod_page.getMeta = function ( property ) {
		if( property ) {
			return $( "meta[property='" + property + "']" ).attr( "content" );
		} else {
			var meta = {};
			$( "meta[property]" ).each( function ( k, v ) {
				var metaElement = $( v );
				meta[ metaElement.attr( "property" ) ] = metaElement.attr( "content" );
			} );
			return meta;
		}
	}
	return mod_page;
} );

define( 'tiljs/analytics/mytimes',[ "module", "../ajax", "../util" ], function ( module, ajax, util ) {
	var mod_mytimes = {};
	var default_config = {
		url: "https://myt.indiatimes.com/mytimes/",
		appKey: ""
	};
	var config = util.extend( true, {}, default_config, module.config() );
	mod_mytimes.log = function ( url, params ) {
		var req = new Image();
		req.src = url + "?" + ajax.param( params );
	};
	mod_mytimes.logActivity = function ( args ) {
		var _url = config.url + "addActivity";
		var params = util.extend( true, {
			//            appKey: config.appKey,
			//            uniqueAppID: 25416336,
			//            activityType: "Shared",
			//            baseEntityType: "ARTICLE",
			//            objectType: "B",
			//            url: url,
			//            via: "facebook"
		}, args );
		mod_mytimes.log( _url, params );
	};
	mod_mytimes.logCommentActivity = function ( args ) {
		var params = util.extend( true, {
			appKey: config.appKey,
			parentCommentId: 0,
			activityType: "", //Agreed, Disagreed, Reccomended
			baseEntityType: "ARTICLE",
			objectType: "A",
			url: document.location.href
		}, args );
		mod_mytimes.logActivity( params );
	};
	mod_mytimes.agreeComment = function ( msid ) {
		var params = {
			parentCommentId: msid,
			activityType: "Agreed"
		};
		mod_mytimes.logCommentActivity( params );
	};
	mod_mytimes.disagreeComment = function ( msid ) {
		var params = {
			parentCommentId: msid,
			activityType: "Disagreed"
		};
		mod_mytimes.logCommentActivity( params );
	};
	mod_mytimes.recommendComment = function ( msid ) {
		var params = {
			parentCommentId: msid,
			activityType: "Reccomended"
		};
		mod_mytimes.logCommentActivity( params );
	};
	mod_mytimes.logShareCount = function ( entityId, via ) {
		var url = config.url + "entityCount";
		var params = {
			appKey: config.appKey,
			via: via,
			entityId: entityId
		};
		mod_mytimes.log( url, params );
	};
	mod_mytimes.getShareCount = function ( msids, callback ) {
		var url = config.url + "sharedEntity";
		var params = {
			appKey: config.appKey,
			msids: msids
		};
		//        $.getJSON(url,params,callback);
		ajax.ajax( {
			type: 'GET',
			url: url,
			jsonpCallback: 'getShareCount' + Math.random() * 1000000000000000000,
			dataType: 'jsonp',
			data: params,
			success: function ( res ) {
				var result = res && res.length > 0 ? res[ 0 ] : null;
				if( result && callback ) {
					if( callback ) {
						callback( result );
					} else {
						callback( null );
					}
				}
			},
			error: callback
		} );
	};
	mod_mytimes.getNotifications = function ( callback ) {
		var url = config.url + "notification";
		var params = {
			appKey: config.appKey,
			openNetworkId: "sso",
			size: 100,
			lastSeenId: 0,
			after: true
		};
		//        $.getJSON(url,params,callback);
		ajax.ajax( {
			type: 'GET',
			url: url,
			jsonpCallback: 'getNotifications' + Math.random() * 1000000000000000000,
			dataType: 'jsonp',
			data: params,
			success: callback,
			error: callback
		} );
	};
	mod_mytimes.followUser = function ( userId, callback ) {
		ajax.getJSONP( config.url + "followuser", {
			userId: userId,
			fromMyTimes: true
		}, callback );
	};
	mod_mytimes.unfollowUser = function ( userId, callback ) {
		ajax.getJSONP( config.url + "unfollowuser", {
			userId: userId,
			fromMyTimes: true
		}, callback );
	};
	mod_mytimes.getFollowers = function ( callback ) {
		ajax.getJSONP( config.url + "activity/myfriends", {
			openNetworkId: "sso",
			/*appKey: "", */ size: -1,
			lastSeenId: 0,
			after: true,
			type: "follower"
		}, callback );
	};
	mod_mytimes.getFollowee = function ( callback ) {
		ajax.getJSONP( config.url + "activity/myfriends", {
			openNetworkId: "sso",
			/*appKey: "",*/ size: -1,
			lastSeenId: 0,
			after: true,
			type: "followee"
		}, callback );
	};
	mod_mytimes.followUser = function ( userId, callback ) {
		ajax.getJSONP( config.url + "followuser", {
			userId: userId,
			fromMyTimes: true,
            medium: 'WEB'
		}, callback );
	};
	mod_mytimes.updateUserCity = function (userCity, callback ) {
		ajax.getJSONP( config.url + "/profile/update?city="+userCity, {
			openNetworkId: "sso",
			/*appKey: "",*/ size: -1,
			lastSeenId: 0,
			after: true
		}, callback );
	};
	mod_mytimes.updateGDPRConsent = function (userId, consentObj, callback) {
        if(typeof userId !== 'undefined' && typeof consentObj !== 'undefined'){
            var _gdprcookieconsent = consentObj.toi_gdprcookieconsent;
            var _gdprpersonalizedconsent = consentObj.toi_gdprpersonalizedconsent;
            if(typeof _gdprcookieconsent !== 'undefined' && typeof _gdprpersonalizedconsent !== 'undefined'){
                ajax.getJSONP(config.url + "profile/update", {
                    propertyKeyValuePairs: { 'toi_gdprcookieconsent' : _gdprcookieconsent, 'toi_gdprpersonalizedconsent' : _gdprpersonalizedconsent},
                    uuId: userId,
                }, callback);  
            }
        }
    };
	return mod_mytimes;
} );
//function log(e, t) {
//    var n = "http://rewards.indiatimes.com/bp";
//    var r = window._tp_async_data;
//    if (validate(r)) {
//        var i = n + "/api/alog/gal?uemail=" + encodeURI(r.email);
//        i += "&url=" + encodeURI(r.URL);
//        i += "&pcode=" + encodeURI(r.host);
//        i += "&scode=" + encodeURI(r.channel);
//        i += "&oid=" + encodeURI(t);
//        i += "&uid=" + encodeURI(r.userId);
//        i += "&ecode=" + encodeURI(e);
//        r.domain = window.location.hostname + window.location.port;
//        myDataStore.hideMiniNotification();
//        myDataStore.sendRequest(i, r)
//    } else {
//        var s = $.jStorage.get("credit");
//        if (s == null) {
//            myDataStore.checkValidity();
//            myDataStore.addActivity(e);
//            myDataStore.displayMiniNotification();
//            myDataStore.scroll()
//        }
//    }
//}
;
define('tiljs/apps/times/api',[
		"module",
		"../../util",
		"../../ajax",
		"../../cookie",
		"../../event",
		"../../string",
		"../../page",
		"../../analytics/mytimes"
], function ( module, util, ajax, cookie, event, string, page, mytimes ) { //todo remove mytimes dependency
	var mod_api = {};
	var default_config = {
		ticket: {
			url: "https://jsso.indiatimes.com/sso/crossdomain/getTicket"
		},
		usersInfo: {
			url: "https://myt.indiatimes.com/mytimes/profile/info/v1/", 
			params: {
				ssoid: "" // comma separated ssoids(emailid)
			}
		},
		badges: {
			url: "https://rewards.indiatimes.com/bp/api/urs/mubhtry",
			params: {
				format: "json",
				pcode: page.getChannel(),
				uid: "" // comma separated ssoids(emailid)
			}
		},
		rewards: {
			url: "https://rewards.indiatimes.com/bp/api/urs/ups",
			params: {
				format: "json",
				pcode: page.getChannel(),
				uid: "" // comma separated ssoids(emailid)
			}
		},
		comments: {
			//todo remove
			url: document.location.host == "test.indiatimes.com" || document.location.host == "test.happytrips.com" ? "lib/getComments.php" : "/json/new_cmtofart2_nit_v1.cms",
			type: "json",
			//            url: function(params){return "data/"+params.msid+".comments.json"},
			//            url: function(params){return "/json/test_comments/"+params.msid+".cms"},
			params: {
				msid: "",
				curpg: 1,
				pcode: page.getChannel()
				//                commenttype: "mostrecommended",
				//                sorttype: "bycount",
				//                ordertype: "asc"
				/*
                 &ordertype=asc
                 &commenttype=mostrecommended&sorttype=bycount
                 &commenttype=mostdiscussed
                 &commenttype=agree&sorttype=bycount
                 &commenttype=disagree&sorttype=bycount
                 */
			}
		}
	};
	default_config.comments_newest = default_config.comments;
	default_config.comments_oldest = {
		url: default_config.comments.url,
		type: default_config.comments.type,
		params: {
			msid: "",
			curpg: 1,
			ordertype: "asc",
			pcode: page.getChannel()
		}
	};
	default_config.comments_recommended = {
		url: default_config.comments.url,
		type: default_config.comments.type,
		params: {
			msid: "",
			curpg: 1,
			commenttype: "mostrecommended"
			//            ,sorttype: "bycount"
			,
			pcode: page.getChannel()
		}
	};
	default_config.comments_discussed = {
		url: default_config.comments.url,
		type: default_config.comments.type,
		params: {
			msid: "",
			curpg: 1,
			commenttype: "mostdiscussed"
			//            ,sorttype: "bycount"
			,
			pcode: page.getChannel()
		}
	};
	default_config.comments_agree = {
		url: default_config.comments.url,
		type: default_config.comments.type,
		params: {
			msid: "",
			curpg: 1,
			commenttype: "agree"
			//            ,sorttype: "bycount"
			,
			pcode: page.getChannel()
		}
	};
	default_config.comments_disagree = {
		url: default_config.comments.url,
		type: default_config.comments.type,
		params: {
			msid: "",
			curpg: 1,
			commenttype: "disagree"
			//            ,sorttype: "bycount"
			,
			pcode: page.getChannel()
		}
	};
	default_config.validate_comment = {
		url: "/validatecomment.cms",
		type: "html",
		params: {
			//hostid:83,//259:travel
			//rchid:-2128958273,//2147477992:travel
			fromname: null,
			fromaddress: null,
			userid: null,
			location: null,
			imageurl: null,
			loggedstatus: null,
			message: null,
			roaltdetails: null,
			ArticleID: null,
			msid: null,
			parentid: null,
			rootid: null
		}
	};
	default_config.post_comment = {
		url: "/postro.cms",
		type: "html",
		params: {
			//hostid:83,//259:travel
			//rchid:-2128958273,//2147477992:travel
			fromname: null,
			fromaddress: null,
			userid: null,
			location: null,
			imageurl: null,
			loggedstatus: null,
			message: null,
			roaltdetails: null,
			ArticleID: null,
			msid: null,
			parentid: null,
			rootid: null
		}
	};
	default_config.post_comment_withoutverification = {
		url: "/postro_nover.cms",
		type: "html",
		params: {
			//hostid:83,//259:travel
			//rchid:-2128958273,//2147477992:travel
			fromname: null,
			fromaddress: null,
			userid: null,
			location: null,
			imageurl: null,
			loggedstatus: null,
			message: null,
			roaltdetails: null,
			ArticleID: null,
			msid: null,
			parentid: null,
			rootid: null
		}
	};

	default_config.post_comment_withverification = {
		url: "/postroemailverification.cms",
		type: "html",
		params: {
			//hostid:83,//259:travel
			//rchid:-2128958273,//2147477992:travel
			fromname: null,
			fromaddress: null,
			userid: null,
			location: null,
			imageurl: null,
			loggedstatus: null,
			message: null,
			roaltdetails: null,
			ArticleID: null,
			msid: null,
			parentid: null,
			rootid: null
		}
	};
	default_config.rate = {
		//http://timesofindia.indiatimes.com/rate_techreview.cms?msid=44823267&getuserrating=1&criticrating=9&vote=8
		url: "/rate_techreview.cms",
		type: "html",
		params: {
			msid: null,
			getuserrating: null,
			vote: null,
			criticrating: null
		}
	};

	default_config.rate_comment = {
		url: "/ratecomment_new.cms",
		type: "html",
		params: {
			opinionid: null,
			typeid: null,
			rateid: null
		}
	};
	default_config.rate_comment_offensive = {
		url: "/offensive/mark",
		type: "html",
		params: {
			ofusername: null,
			ofreason: "NONE",
			ofcommenteroid: null,
			ofcommenthostid: 83,
			ofcommentchannelid: -2128958273,
			ofcommentid: null,
			ofuserisloggedin: null,
			ofuserssoid: null,
			ofuseremail: null
		}
	};
	var config = util.extend( true, {}, default_config, module.config() );
	mod_api.updateConfig = function ( new_config ) {
		config = util.extend( true, config, new_config );
	};
	mod_api.getConfig = function ( new_config ) {
		return config;
	};
	mod_api.getTicket = function ( _params, callback ) {
		return mod_api.api( "ticket", _params, callback );
	};
	mod_api.getUsersInfo = function ( _params, callback ) {
		return mod_api.api( "usersInfo", {ssoid:_params.ssoids}, callback );
	};
	mod_api.getBadges = function ( _params, callback ) {
		return mod_api.api( "badges", _params, callback );
	};
	mod_api.getRewards = function ( _params, callback ) {
		return mod_api.api( "rewards", _params, callback );
	};
	mod_api.getComments = mod_api.getComments_newest = function ( _params, callback ) {
		return mod_api.api( "comments", _params, callback );
	};
	mod_api.getComments_oldest = function ( _params, callback ) {
		return mod_api.api( "comments_oldest", _params, callback );
	};
	mod_api.getComments_recommended = function ( _params, callback ) {
		return mod_api.api( "comments_recommended", _params, callback );
	};
	mod_api.getComments_discussed = function ( _params, callback ) {
		return mod_api.api( "comments_discussed", _params, callback );
	};
	mod_api.getComments_agree = function ( _params, callback ) {
		return mod_api.api( "comments_agree", _params, callback );
	};
	mod_api.getComments_disagree = function ( _params, callback ) {
		return mod_api.api( "comments_disagree", _params, callback );
	};
	mod_api.validateComment = function ( _params, callback ) {
		return mod_api.post( "validate_comment", _params, callback );
	};
	mod_api.postComment = function ( _params, callback ) {
		return mod_api.post( "post_comment", _params, callback );
	};
	mod_api.postCommentWithoutVerification = function ( _params, callback ) {
		return mod_api.post( "post_comment_withoutverification", _params, callback );
	};
	mod_api.postCommentWithVerification = function ( _params, callback ) {
		return mod_api.post( "post_comment_withverification", _params, callback );
	};

	/**
	 *
	 *
	 *
	 * @param rating msid, user_rating, critic_rating, rating
	 * @param callback
	 * @param user
	 * @returns {*}
	 */
	mod_api.rate = function ( rating, callback, user ) {
		var rating_u = {
			msid: rating.msid,
			getuserrating: rating.user_rating,
			vote: rating.rating,
			criticrating: rating.critic_rating
		};
		return mod_api.api( "rate", rating_u, callback );
	};

	mod_api.rateComment = function ( rating, callback, user ) {
		if( user ) { //TODO move all calls to backend
			switch( rating.typeid ) {
			case 100: //Agree
				mytimes.agreeComment( rating.opinionid );
				break;
			case 101: //Disagree
				mytimes.disagreeComment( rating.opinionid );
				break;
			case 102: //Recommend
				mytimes.recommendComment( rating.opinionid );
				break;
			case 103: //Offensive
				mod_api.rateCommentOffensive( rating, user ); //todo check if mytimes request is to be sent
				break;
			}
		}
		//http://myt.indiatimes.com/mytimes/addActivity?activityType=Agreed&appKey=TOI&parentCommentId=28368882&baseEntityType=ARTICLE&objectType=A&url=
		//http://myt.indiatimes.com/mytimes/addActivity?activityType=Disagreed&appKey=TOI&parentCommentId=28368547&baseEntityType=ARTICLE&objectType=A&url=
		//http://myt.indiatimes.com/mytimes/addActivity?activityType=Reccomended&appKey=TOI&parentCommentId=28368541&baseEntityType=ARTICLE&objectType=A&url=
		return mod_api.api( "rate_comment", rating, callback );
	};
	mod_api.rateCommentOffensive = function ( rating, user, callback ) {
		//OLD http://timesofindia.indiatimes.com/offensiveService/offence.asmx/getOffencivecomment?ofusername=Del%20Sanic&ofreason=Others:%20testing&ofcommenteroid=28231992&ofcommenthostid=83&ofcommentchannelid=-2128958273&ofcommentid=30937855&ofuserisloggedin=1&ofuserssoid=delsanic@gmail.com&ofuseremail=delsanic@gmail.com
		//http://timesofindia.indiatimes.com/offensive/mark?ofusername=Del%20Sanic&ofreason=Others:%20testing&ofcommenteroid=28232011&ofcommenthostid=83&ofcommentchannelid=-2128958273&ofcommentid=30937855&ofuserisloggedin=1&ofuserssoid=delsanic@gmail.com&ofuseremail=delsanic@gmail.com
		if( user ) {
			var params = {};
			params.ofcommenteroid = rating.opinionid;
			params.ofcommentid = window.msid;
			params.ofuserisloggedin = 1;
			params.ofuserssoid = params.ofuseremail = user.getEmail();
			params.ofusername = user.getFullName();
			//            params = util.extend(true,{}, params, rating) ;
			return mod_api.api( "rate_comment_offensive", params, callback );
		} else {
			event.publish( "logger.error", "Cannot rate comment offensive, user not available." );
		}
	};
	mod_api.api = function ( api, _params, callback ) {
		var value = config[ api ];
		return ajax.get( util.val( value.url, value.params ), util.extend( true, {}, value.params, _params ), function ( data ) {
			if( callback ) {
				try {
					callback( data );
				} catch( e ) {
					event.publish( "logger.error", e.stack );
				}
			}
		}, value.type || "jsonp" ).error( function () {
			if( callback ) {
				try {
					callback();
				} catch( e ) {
					event.publish( "logger.error", e.stack );
				}
			}
		} );
	};
	mod_api.post = function ( api, _params, callback ) {
		var value = config[ api ];
		return ajax.post( util.val( value.url, value.params ), util.extend( true, {}, value.params, _params ), function ( data ) {
			if( callback ) {
				try {
					callback( data );
				} catch( e ) {
					event.publish( "logger.error", e.stack );
				}
			}
		} ).error( function ( event, xhr, e ) {
			event.publish( "comment.post.error", e );
		} );
	};
	mod_api.get = function ( key, params ) { //todo change method name
		if( params ) {
			var api = config[ key ];
			var _params = util.extend( true, {}, api.params, params );
			return {
				url: util.val( api.url, _params ),
				params: _params
			};
		} else {
			return config[ key ];
		}
	};
	mod_api.init = function () {
		util.each( config, function ( key, value ) {
			var funName = string.camelCase( "get " + key );
			mod_api[ funName ] = function ( _params, callback ) {
				ajax.getJSONP( util.val( value.url, value.params ), util.extend( true, {}, value.params, _params ), function ( data ) {
					if( callback ) {
						callback( data );
					}
				} );
			};
		} );
	};
	//    mod_api.init();
	return mod_api;
} );

/**
 * 'ui' module.
 *
 * @module ui
 * @requires util
 * @requires logger
 * @requires event
 * @requires jquery
 * @requires is
 */
define('tiljs/ui',["./util", "./logger", "./event","jquery","./is", "./timer"], function (util, logger, event, $, is, timer) {
    logger.log("ui loaded");
    var mod_ui = {},
    open_window = {},
	mask,maskConfig;

    mod_ui.window = function (url, options) {
        logger.log("ui.window called");
		var default_options,opt,x,y,params,popup;
        default_options = {
            width: 300,
            height: 300,
            name: "Window" ,
            mask:true,
            resizable:false,
            disableScroll:false,
            closeCallback: function(){logger.log("Empty ui.window callback function.");}
        };
        opt = util.extend(true, {}, default_options, options);

        x = window.screen.width/2 -  opt.width/2;
        y = window.screen.height/2 - opt.height/2;

        params = ['width=' + opt.width,
            'height=' + opt.height,
            'left=' + (is.defined(opt.left)?opt.left:x),
            'top=' + (is.defined(opt.top)?opt.top:(y-20)),
            'scrollbars=' + (is.defined(opt.scrollbars) && (opt.scrollbars == 1)?opt.scrollbars:0),
            'resizable=' + opt.resizable];			

         if(opt.mask === true && is.desktop()){
             mod_ui.mask(null,{},false);
         }
        if(opt.disableScroll === true){
            mod_ui.disableScroll();
        }

        popup = window.open(url, opt.name, params.join(","));
        if(popup){
            popup.focus();
            logger.log("Popup opened: " + url);
            logger.log(popup);
        }

//        popup.onresize = function(){
//            popup.resizeTo(opt.width,opt.height);
//        };


        try{
            //Exception "Permission Denied" in IE, using try catch so that this functionality works in other browsers.
            popup.reposition = function(){
                var x = window.screen.width/2 -  opt.width/2,
                y = (window.screen.height/2 - opt.height/2);
                popup.moveTo(x,y);
            };
        }catch(e){
            logger.warn("Handled Exception in IE10.");
            logger.error(e);
        }

        if(!popup){
            alert("Popups are blocked. Please enable them.");//TODO find better way
            logger.error("Popups are blocked. Please enable them.");
            mod_ui.unmask();
            return popup;
        }
        //TODO use timer module, prevent recursive dependency
        (function(popup,url,opt){
            var interval = window.setInterval(function() {   //todo use timer
                try {
                    logger.log("Checking if popup is closed:"+url+":" + popup.closed);
                    if (popup === null || popup.closed !== false) {
                        mod_ui.window.close(opt.name);
                    }
                }
                catch (e) {
                    logger.warn("Handled exception while closing popup.");
                    logger.error(e.stack);
                    window.clearInterval(interval);
                    interval = null;
                }
            }, 500);

            open_window[opt.name] = {opt:opt, popup:popup, interval:interval, url:url};

        }(popup,url,opt));


        return popup;
    };

    mod_ui.window.close = function(name, all){
        if(!name){
            logger.error("Window name is required to close it.");
            return;
        }
        var popup = open_window[name];
        if(all === true){
              util.each(open_window,function(k){
                  mod_ui.window.close(k);
              });
        }else if(popup){
            logger.log("Closing popup is closed:" + popup.opt.name + ":" + popup.url);

            if(popup.opt.mask === true){
                mod_ui.unmask();
            }
            if(popup.opt.disableScroll === true){
                mod_ui.enableScroll();
            }

            window.clearInterval(popup.interval);
            popup.interval = null;
            popup.popup.close();
            open_window[popup.opt.name] = null;
            popup.opt.closeCallback(popup.popup);
        }else{
            logger.warn("Popup '"+name+"' not found.");
        }
    };

    if(window.closeWindow){
        logger.warn("window.closeWindow is already defined, open windows may not close properly.");
    }else{
        window.closeWindow = mod_ui.window.close;
    }

    mod_ui.iframe = function (url, options) {
        var default_options = {
            width: 300,
            height: 300,
            name: "Window" ,
            disablePopup:true,
            closeCallback: function(){
	            logger.log("Empty ui.iframe callback function.");
            }
        },

        opt = util.extend(true, {}, default_options, options),
        iframe = $("<iframe class='loginsignupframe'></iframe>"),//todo fix class dependency
		_iframe,popup;
		
        iframe.attr("src", url);
        iframe.css({
            width:"100%",
            height:"100%",
            border:"4px solid #cccccc",
            backgroundColor:"#FFF"
        });

        _iframe = iframe[0];

        popup = mod_ui.popup(iframe,opt);


        _iframe.close = function(){
             iframe.remove();
             popup.remove();
             mod_ui.unmask();
        };

        _iframe.resizeTo = function(width, height){
            if(width && height){
                popup.width(width);
                popup.height(height);
            }
        };

        _iframe.reposition = popup.reposition;

        return _iframe;
    };

    mod_ui.closeButton = function(clickCallback){
        var closeButton = $("<span></span>");
        closeButton.on("click",clickCallback);
        return closeButton;
    };

    mod_ui.popup = function (html, options) {
		var default_options,closeButton,mask,opt,popup;
        default_options = {
            width: 300,
            height: 300,
            name: "Window" ,
            closeCallback: function(){logger.log("Empty ui.popup callback function.");},
            disableScroll:false
        };
		
        opt = util.extend(true, {}, default_options, options);
        popup = $("<div></div>");
        popup.width(opt.width);
        popup.height(opt.height);
        popup.css({
//            margin:"0 auto",
//            marginTop:"5%",
            position:"absolute",
            zIndex:maskConfig.zIndex+1
        });
        popup.append(html);

        if(opt.disableScroll === true){
            mod_ui.disableScroll();
        }

        if(opt.closeCallback){
            if(window.closePopup){
                logger.warn("'window.closePopup' is already defined.");
            }
            if(window.disablePopup){
                logger.warn("'window.disablePopup' is already defined.");
            }

            window.closePopup = window.disablePopup = function(){
                popup.remove();
                mod_ui.unmask();

                if(opt.disableScroll === true){
                    mod_ui.enableScroll();
                }

                if(opt.closeCallback){
                    opt.closeCallback();
                }
                window.closePopup = null;
                window.disablePopup = null;
            };

            closeButton = mod_ui.closeButton(window.closePopup);

            closeButton.addClass("popup_close_button");
            //todo remove css from here
            closeButton.css({
                position: "absolute",
                top: "5px",
                right: "5px" ,
                cursor:"pointer",
                background:"url('/photo/25494620.cms') no-repeat scroll -160px -20px rgba(0, 0, 0, 0)",
                width:"18px",
                height:"18px"
            });

            popup.append(closeButton);
        }

        $("body").append(popup);

        mask = mod_ui.mask(popup,{},false);

        popup.reposition = function(){
            var $w = $(window),
            windowWidth = $w.width(),
            windowHeight = $w.height(),

            calcWidth = ((windowWidth/2)-(popup.width()/2)),
            calcHeight = ((windowHeight/2)-(popup.height()/2)) ;

            if(calcWidth < 0 ){calcWidth=0;}
            if(calcHeight < 0 ){calcHeight=0;}
            popup.css({
                left:calcWidth,
                top:calcHeight + $(window).scrollTop()
            });
        };

        popup.reposition();

        popup.close = function(){
            popup.remove();
            mod_ui.unmask();
        };

        event.subscribe("window.resize",function(){
            popup.reposition();
        });


        return popup;
    };



    mod_ui.img = function (url, attr) {
        var img = $("<img>");
        img.attr("src", url);
        util.each(attr, function (k, v) {
            img.attr(k, v);
        });
        return img;
    };


    mod_ui.anchor = function (url, text, attr) {
        var anchor = $("<a>");
        anchor.attr("href", url);
        anchor.text(text);
        util.each(attr, function (k, v) {
            anchor.attr(k, v);
        });
        return anchor;
    };

    /**
     * Checks if the provided element is in viewport.
     *
     * //todo create event 'inview' with callback which fires when element comes in view
     *
     * @param {selector/instance} elem element to be checked
     * @param {boolean} partial  when true,returns true when element is partially in view.
     * @param {int} skew Pixels to skew/move view from the top
     * @returns {boolean} true if element is in view
     */
    mod_ui.inView = function (elem, partial, skew) {
        skew = skew || 0;

        var $w = $(window), $e = $(elem),
		docViewTop,docViewBottom,elemTop,elemBottom,in_view;

        if($e.is(":hidden")){ // Element is hidden so its not in the view
            return false;
        }

        docViewTop = $w.scrollTop() - skew; //todo - skew
        docViewBottom = docViewTop + $w.height() + skew;//todo  + skew

        elemTop = $e.offset()?$e.offset().top:0;
        elemBottom = elemTop + $e.height();


        in_view = false;

        if (partial === true) {
            in_view = ((elemBottom > docViewTop ) && (elemTop <= docViewBottom ));
//            if(in_view){
//                logger.log("P:"+elemBottom +">"+docViewTop+","+elemTop+"<="+docViewBottom);
//            }
        } else {
            in_view = ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
//            if(in_view){
//                logger.log(elemBottom +"<="+docViewBottom+","+elemTop+">="+docViewTop);
//            }
        }

        return in_view;
    };


    mod_ui.init = function () {
        var th_scroll = util.throttle(500, function (e) {
            event.publish("window.scroll", e);
        }),

        th_load = function (e) {
            event.publish("window.load", e);
        },

        th_resize = util.throttle(500, function (e) {
            event.publish("window.resize", e);
        });

        if (window.addEventListener) {  // W3C DOM
            window.addEventListener("scroll", th_scroll, false);
            window.addEventListener("load", th_load, false);
            window.addEventListener("resize", th_resize, false);
        } else if (window.attachEvent) { // IE DOM
            window.attachEvent("onscroll", th_scroll);
            window.attachEvent("onload", th_load);
            window.attachEvent("onresize", th_resize);
        }
		
		$(function (e) {
			event.publish("document.ready", e);
		});
		
    };


    mod_ui.getGravatar = function (email, size) {
        if (!email || email.length === 0) {
            return null;
        }

        size = size || 80;

        return 'http://www.gravatar.com/avatar/' + util.md5(email.trim().toLowerCase()) + '.jpg?s=' + size;
    };

    mod_ui.maxlength = function (input, max, callback, parent, alertMsg) {

        $(parent || "body").off("keyup change", input);
        $(parent || "body").on("keyup change", input, function () {
            var val = $(this).val(),
            len = val.length;
            max = parseInt(max, 10);

            callback.call(this, max - len, len);
            if (len > max) {
                $(this).val(val.substr(0, max));
                if(alertMsg){
                    window.alert(alertMsg);
                }
                return false;
            }
        });
    };

    mod_ui.getActionReferences = function (currentEle, mainParent) {
        var obj = {current: $(currentEle)};
        obj.parent = mainParent ? obj.current.parents(mainParent) : obj.current;

        obj.parent.find("[data-plugin]").each(function (i, v) {
            obj[$(v).attr("data-plugin")] = $(this);
        });

        return obj;
    };

    mask = null;
    maskConfig = {
        position:"fixed",
        left:0,
        top:0,
        width: "100%",
        height: "100%",
        backgroundColor: "#000",
        opacity: 0.5 ,
        zIndex:99999
    };

    /**
     *
     * @param config to be provided once on a page.
     * @returns {null}
     * @param divEle Element to be shown above the mask
     * @param closeOnClick (default = false) If true, mask will be closed when clicked
     */
    mod_ui.mask = function (divEle,config,closeOnClick) {
        if (!mask) {
            mask = $("<div></div>");
            mask.popup = divEle;
            mask.css(util.extend(maskConfig,config));
//            mask.css("height", $(document).height());
            if(mask.popup){
                mask.popup.show();
            }
            if(typeof closeOnClick === 'undefined' || closeOnClick === true){
                mask.on("click",function(){
                    if(mask.popup){
                        mask.popup.hide();
                    }
                    mod_ui.unmask();
                });
            }
            $(document).one("keyup",function(e){     //todo move to common
                if(e.keyCode === 27){
                    if(mask){
                        if(mask.popup){
                            mask.popup.hide();
                        }
                        mod_ui.unmask();
                    }
                }
            });
            $("body").append(mask);
        } else {
            logger.warn("Already masked. Use ui.unmask() before masking again.");
        }
        return mask;
    };

    mod_ui.isMasked = function () {
        return mask ? true : false;
    };

    mod_ui.unmask = function () {
        if (mask) {
            if(mask.popup){
                mask.popup.hide();
            }
            mask.remove();
            mask = null;
        } else {
            logger.warn("No mask available. Use ui.mask() before unmasking.");
        }
    };

    mod_ui.tooltip = function(message, hideAfter){
        hideAfter = hideAfter || 5;

        var tooltip = $("<div></div>");
        if(hideAfter>0){
            timer.after(function(){
                tooltip.fadeOut(function(){

                });

            });
        }

        return tooltip;
    };

    mod_ui.dialog = function (divEle) {
        //var default_params = {},
        //prms = util.extend(true,{}, default_params, params),

        var dialog = $("<div></div>");
        dialog.css({
            backgroundColor: "#FFF"
        });

        dialog.html(divEle.html());

        return dialog;
    };

    mod_ui.customScrollbar = function (ele) {
        if(window.$ && window.$ && window.$.fn && window.$.fn.mCustomScrollbar){
            ele = window.$(ele);
            ele.mCustomScrollbar("destroy");
            ele.mCustomScrollbar({
                scrollButtons: {
                    enable: true
                },
                advanced: {
                    updateOnContentResize: true,
                    updateOnBrowserResize: true
                }
            });
        }else{
            logger.warn("mCustomScrollbar not found.");
        }
    };

    mod_ui.disableScroll = function(mainContainer){
        $("html,body").css({overflow:"hidden",height:"100%",padding:"0",margin:"0"});
        $(mainContainer || "#container").css({overflowY:"scroll",height:"100%"});
    };

    mod_ui.enableScroll = function(mainContainer){
        $("html,body").css({overflow:"",height:"",padding:"",margin:""});
        $(mainContainer || "#container").css({overflowY:"",height:""});
    };

    mod_ui.init();


    return  mod_ui;
});

/**
 * 'load' module.
 *
 * @module load
 * @requires event
 * @requires logger
 */
define( 'tiljs/load',[ "./event", "./logger", "./util", "./is" ], function ( event, logger, util, is ) {
	logger.log( "load loaded" );
	//    var LOADING = 0;
	//    var LOADED = 1;
	var mod_load = {};
	//    mod_load.js_queue = {};
	/**
	 * Load javascript file on a page
	 *
	 * @memberOf module:load#
	 * @function js
	 * @param {String} url URL of the javascript file
	 * @param {Function} [callback] function to be called when js is loaded
	 * @param {String} [id] id to be given to the javascript tag
	 * @param {Boolean} [async] true by default, set false to load synchronously
	 * @returns {HTMLElement} generated script tag element
	 * @example
	 *  require(['load'],function(load){
	 *     //Load javascript 'abc.js'
	 *     load.js('abc.js',function(){
	 *        console.log('abc.js loaded');
	 *     });
	 *
	 *     //Load javascript 'abc.js' , the script element is assigned provided id
	 *     load.js('abc.js',function(){
	 *        console.log('abc.js loaded');
	 *     },'element_id',true);
	 *  });
	 */
	mod_load.js = function ( url, callback, id, async ) {
		//TODO implement queue - prevent multiple js loading
		//        id = id || url.replace(/[^\w\s]/gi, ''); //todo BAD hack, implement queue
		//        var script =  document.getElementById(id);
		//        if(script && script.loaded){
		//            if(callback){
		//                callback();
		//            }
		//            return script;
		//        }
		var head = document.getElementsByTagName( "head" ) ? document.getElementsByTagName( "head" )[ 0 ] : null;
		if( head ) {
			var script = document.createElement( "script" );
			var done = false; // Handle Script loading
			if( id ) {
				script.id = id;
			}
			if( async ) {
				script.async = async;
			}
			if( !url ) {
				throw new Error( "Param 'url' not defined." );
			}
			script.src = url;
			script.onload = script.onreadystatechange = function () { // Attach handlers for all browsers
				if( !script.loaded && ( !this.readyState || this.readyState === "loaded" || this.readyState === "complete" ) ) {
					script.loaded = true;
					var endTime = new Date().getTime();
					var timeSpent = endTime - script.startTime;
					event.publish( "load.js", [ '_trackTiming', 'js', url, timeSpent, url ] );
					//                        track.ga(['_trackTiming', 'js', url , timeSpent, url ]);//todo identify label(last param)
					if( callback ) {
						try {
							callback();
						} catch( e ) { //to handle
							event.publish( "logger.error", e.stack );
						}
					}
					script.onload = script.onreadystatechange = null; // Handle memory leak in IE
				}
			};
			script.startTime = new Date().getTime();
			head.appendChild( script );
			return script;
		} else {
			logger.info( "Head Element not found. JS '" + url + "' not loaded. " );
			return null;
		}
	};
	/**
	 * Load css file on a page
	 *
	 * @memberOf module:load#
	 * @function css
	 *
	 * @param {String} href URL of the css file
	 * @param {Function} [callback] function to be called when
	 * @returns {HTMLElement} generated link tag element
	 * @example
	 *  require(['load'],function(load){
	 *     //Load stylesheet 'abc.css'
	 *     load.css('abc.css',function(){
	 *        console.log('abc.css loaded');
	 *     });
	 *  });
	 */
	mod_load.css = function ( href, callback ) {
		var headEle = document.getElementsByTagName( "head" ) ? document.getElementsByTagName( "head" )[ 0 ] : null;
		if( headEle ) {
			var cssLink = document.createElement( "link" );
			cssLink.setAttribute( "rel", "stylesheet" );
			cssLink.setAttribute( "type", "text/css" );
			cssLink.setAttribute( "href", href );
			headEle.appendChild( cssLink );
			if( callback ) {
				setTimeout( callback, 0 ); //TODO find better way
			}
		} else {
			logger.info( "Head Element not found. CSS '" + href + "' not loaded. " );
		}
		return cssLink;
	};
	/**
	 * Load iframe on a page
	 *
	 * @memberOf module:load#
	 * @function iframe
	 *
	 * @param {String} src URL of the iframe to be loaded
	 * @param {Number} width width of the iframe, defaults to 0
	 * @param {Number} height height of the iframe, defaults to 0
	 * @param {String} containerId id of the container in which the iframe is to be loaded
	 * @returns {HTMLElement} generated iframe element
	 * @example
	 *  require(['load'],function(load){
	 *     load.iframe('http://www.abc.com',100,100,'container_iframe');
	 *  });
	 */
	mod_load.iframe = function ( src, width, height, containerId ) {
		var container = document.getElementById( containerId ) || document.body;
		if( container ) {
			var i = document.createElement( "iframe" );
			i.src = src;
			i.scrolling = "no";
			i.frameBorder = "0";
			i.width = width || 0;
			i.height = height || 0;
			container.appendChild( i );
			return i;
		} else {
			logger.info( "Container with id '" + containerId + "' not found. iframe '" + src + "' not loaded. " );
		}
	};
	mod_load.image = function ( src ) {
		if( is.array( src ) ) {
			util.each( ajaxLogout, function ( i, v ) {
				mod_load.image( v );
			} );
		} else {
			var img = new Image();
			img.src = src;
		}
	};
	/**
	 * //TODO, remove private after implementing it.
	 *
	 * @private
	 */
	mod_load._content = function ( url, containerId ) {};
	/**
	 * Checks if the javascript or css is loaded
	 *
	 * @memberOf module:load#
	 * @function isLoaded
	 *
	 * @param path
	 * @returns {boolean}
	 * @example
	 *
	 *  require(['load'],function(load){
	 *     load.isLoaded('abc.js');   // returns true is abc.js is loaded
	 *     load.isLoaded('abc.css');  // returns true is abc.css is loaded
	 *  });
	 */
	mod_load.isLoaded = function ( path ) { //todo import jquery dependency
		return $( 'script[src="' + path + '"]' ).length > 0 || $( 'link[href="' + path + '"]' ).length > 0;
	};
	return mod_load;
} );

/**
 * 'localstorage' module.
 *
 * @module localstorage
 * @requires util
 * @requires json
 */
define( 'tiljs/localstorage',[ "module", "./util", "json", "./is", "./logger" ], function ( module, util, JSON, is, logger ) {
	var mod_localstorage = {};
	var default_config = {};
	var config = util.extend( true, {}, default_config, module.config() );
	var LS = window.localStorage;
	if( !LS ) {
		logger.warn( "'localStorage' is not available." );
		LS = {
			getItem: function () {},
			removeItem: function () {},
			setItem: function () {}
		};
	}
	/**
	 * Get value of a localstorage
	 *
	 * @param {String} [name] name of the localstorage for which value is required,
	 *                        if name is not provided an object with all localstorages is returned
	 * @returns {String | Array} value of the requested localstorage / Array of all localstorages
	 */
	mod_localstorage.get = function ( name ) {
		var val = LS.getItem( name );
		if( val != null ) {
			var record = JSON.parse( val );
			if( !record ) {
				return null;
			}
			return( new Date().getTime() < record.timestamp ) ? record.value : null;
		} else {
			return null;
		}
	};
	/**
	 * localStorage Set,Get,Delete
	 */
	mod_localstorage.getAll = function () {
		return mod_localstorage.get();
	};
	/**
	 * Remove a localstorage
	 *
	 * @param {String} name name of the localstorage to be removed
	 * @param {String} [path] path of the localstorage
	 * @param {String} [domain] domain of the localstorage
	 */
	mod_localstorage.remove = function ( name, path, domain ) {
		if( name ) {
			LS.removeItem( name );
		}
	};
	/**
	 * Set a localstorage
	 *
	 * @param {String} name name of the localstorage to be set
	 * @param {String} value value of the localstorage to be set
	 * @param {Number} [days] number of days for which the localstorage is to be set
	 * @param {String} [path] path of the localstorage to be set
	 * @param {String} [domain] domain of the localstorage to be set
	 * @param {Boolean} [secure] true if the localstorage is to be set on https only (to be implemented)
	 */
	mod_localstorage.set = function ( name, value, days, path, domain, secure ) {
		var date = new Date();
		var expirationMS = date.getTime() + ( ( days || 365 ) * 24 * 60 * 60 * 1000 );
		var record = {
			value: value,
			timestamp: new Date().getTime() + expirationMS,
			path: path,
			domain: domain
		};
		try {
			LS.setItem( name, JSON.stringify( record ) );
		} catch( e ) {
			//            if (e == 'QUOTA_EXCEEDED_ERR') {
			logger.error( 'Unable to save item in localStorage:' + name );
			//            }
		}
		//        return value;
	};
	return mod_localstorage;
} );
define('tiljs/apps/times/tpwidget',["../../event", "../../cookie"], function (event, cookie) {
    var tpwidget = {};
    // initialise timespoint-widget
    tpwidget.init = function () {
        tpwidget.subscribeLoggedInStatus();
        tpwidget.bindEvents();

    },
        tpwidget.data = {


            'widgettypes': ['widget-head', 'widget-two'],
            'widget-head': 'tpwidget-one',
            'widget-two': 'tpwidget-two',
            'widgetsArray': [],
            'isUserLoggedIn': false,
            'isInitialised': false,
            'userInfo': [],
            'uemail': '',
            'url': escape(document.location.href),
            'pcode': 'TOI',
            'scode': 'News',
            'oid': '',
            'uid': '',
            'aname': '',
            'txnId': '',
            'firsttime': true

        },
        tpwidget.handlePostLoginActivity = function (activity, txnId) {


            var request = "?uid=" + tpwidget.data.uid;
            request += "&pcode=" + tpwidget.data.pcode;
            request += "&scode=" + tpwidget.data.scode;
            request += "&aname=" + activity;
            request += "&pfm=web";
            request += "&txnId=" + txnId;
            if(activity == 'mv_rt'){
                request += "&oid=" + txnId;
            }


            tpwidget.sendActivityRequest(request);
        },
        tpwidget.sendActivityRequest = function (request) {
            //replacing server call with client call

            $.get("https://tpapi.timespoints.com/v1/activity/logact" + request, function (data, status) {
                if (data.status == '"FAILURE"') {
                    console.log(data.message);
                } else {
                    console.log("TPActivity Post Login Activity URL -https://tpapi.timespoints.com/v1/activity/logact" + request)
                }


            });
        },
        tpwidget.bindEvents = function () {

            $(document).on('VOD_EVENTS', function (event, data, eventType) {
                var msid = data.id ? data.id : Math.round((new Date()).getTime())
                if (typeof eventType != "undefined" && eventType.toUpperCase() == "VIDEOVIEW") {
                    tpwidget.fireActivity('watch_video', msid)
                }
            });

            // Article Read
            $(document).on('article_read', function (event, data, eventType) {

                tpwidget.fireActivity('read', data.msid);

            });
            
            //View Photos 
            $(document).on('view_photo', function (event, data, eventType) {

                tpwidget.fireActivity('view_photo', data.msid);

            });
            
            //Rate Movie  
            $(document).on('rate_movie', function (event, data, eventType) {

                tpwidget.fireActivity('mv_rt', data.msid);

            });
            
            
        
        },
        tpwidget.fireActivity = function (aname, txnId) {
            if (!tpwidget.data.isUserLoggedIn) {
                console.log('TPActivity Activity- ' + aname + ', Transcation ID-' + txnId)
                TPWidget.addPreLoginActivity(aname)
            } else {

                tpwidget.handlePostLoginActivity(aname, txnId);
            }
        },
        tpwidget.initialisewidget = function (userloginInfo) {

            if (typeof TPWidget != 'undefined' && typeof TPWidget.init == 'function') {
                var widgettypes = [];
                $.each(tpwidget.data.widgettypes, function (i, val) {
                    if ($("#" + val).length) {

                        widgettypes.push({
                            'ele': val,
                            'widgetType': tpwidget.data[val]
                        })

                    }


                });


                if (userloginInfo != null && typeof(userloginInfo) != 'undefined') {

                    TPWidget.init({

                        widgets: widgettypes,

                        userLoginInfo: {

                            "host": tpwidget.data.pcode,

                            "channel": tpwidget.data.scode,

                            "URL": escape(document.location.href),

                            "userId": tpwidget.data.uid,

                            "oid": "",

                            "email": tpwidget.data.email

                        }

                    });
                } else {

                    TPWidget.init({
                        widgets: widgettypes
                    });
                }

            }

            event.publish('tpinitated')


        },
        tpwidget.PostLoginActions = function () {

            TPWidget.PostLoginActions({
                "host": "TOI",
                "channel": "News",
                "URL": escape(document.location.href),
                "userId": tpwidget.data.uid,
                "oid": "",
                "email": tpwidget.data.email
            });

        },
        /**
         * { subscribeLoggedInStatus - to subscribe user logged in ,logged out status and behave accordingly }
         */
        tpwidget.subscribeLoggedInStatus = function () {


            event.subscribe("user.status", function (user) {
                tpwidget.data.isUserLoggedIn = typeof user !== "undefined" && user !== null ? true : false;
                // For First time Activity
                if (!tpwidget.data.isInitialised) {
                    tpwidget.updateUserDetails();
                    tpwidget.initialisewidget(user)
                    tpwidget.data.isInitialised = true;
                    // Fire Visit activity for Home page only
                    // if (toiprops && toiprops["_Tmpl_pg"] && toiprops["_Tmpl_pg"].toLowerCase() == 'default')
                    //     {   
                            tpwidget.fireActivity('visit', Math.round((new Date()).getTime()))
                            tpwidget.fireActivity('register', Math.round((new Date()).getTime()))
                        // }
                }


                tpwidget.data.firsttime = false;

            });
            //Logged in User
            event.subscribe("user.login", function (user) {

                if (user) {

                    tpwidget.data.isUserLoggedIn = true;

                    tpwidget.updateUserDetails(user.getEmail());
                    tpwidget.PostLoginActions();
                    // tpwidget.data.firsttime ? tpwidget.renderTPWidgetforloggedIn(user) : tpwidget.PostLoginActions();
                    typeof ga == "function" && ga('send', 'event', 'TPRedeem', 'login_success', window.location.href);

                }

            });
            event.subscribe("user.logout", function (user) {
                tpwidget.data.isUserLoggedIn = false;
                if (!tpwidget.data.firsttime) {

                    // Logged-in User logged out
                    if (typeof TPWidget != 'undefined' && typeof TPWidget.logoutAction == 'function') {

                        TPWidget.logoutAction();
                    }

                }

                tpwidget.data.isUserLoggedIn = false;

            });

        },
        tpwidget.updateUserDetails = function (email) {
            tpwidget.data.email = email ? email : cookie && cookie.get('MSCSAuthDetails') && cookie.get('MSCSAuthDetails').split('=')[1];
            tpwidget.data.uid = cookie && cookie.get('ssoid')
        }
    return tpwidget;
});  

define('primeuserhandler',["tiljs/event", "tiljs/cookie", "tiljs/util"], function (event, cookie, util) {
    /*event.subscribe("user.logout", function(){
        window.location.reload();
    });*/
    var puser = {};
    /*For below array values, user is active prime user*/
    var config = {
        subscriptionStatusApi : '/prime_subscription_status.cms?feedtype=json',
        activePrimeUserPrcArr : [1,3,4,5,8],
        notPrimeStatus: {
            0: {
              status: 'not_a_times_prime_user',
              ctaText: 'Start Free Trial',
            },
        },
        subscriptionExpiredStatus: {
            2: {
              status: 'free_trial_expired',
              ctaText: 'Subscribe Now',
              headingMsg: 'Your free trial ended on',
            },
            4: {
              status: 'free_trial_with_payment_expired',
              ctaText: 'Subscribe Now',
              headingMsg: 'Your free trial ended on',
            },
            6: {
              status: 'subscription_expired',
              ctaText: 'Subscribe Now',
              headingMsg: 'Your subscription ended on',
            },
            7: {
              status: 'subscription_cancelled',
              ctaText: 'Subscribe Now',
              headingMsg: 'Your subscription ended on',
            },
        },
    };
    var popup_callbacks;
    /*This is based on param set by server variable header_primetemplate*/
    puser.notAPrimeUser =  function(){
        if(typeof toiprops === 'object' && toiprops.toipr !== 1) {
            return true;
        }
        return false;
    };
    /*This is based on prime user cookie*/
    puser.isPrimeActiveUser =  function(prcVal){
        var val_prc = parseInt(prcVal, 10) || puser.getPrcVal();
        if((typeof val_prc != 'undefined') && (config.activePrimeUserPrcArr.indexOf(val_prc) > -1)){
            return true;
        }
        return false;
    };
    puser.isSubscriptionExpired = function(){
        var prc = puser.getPrcVal();
        return config.subscriptionExpiredStatus[prc] ? true : false;
    };
    puser.getSubscriptionStatus = function(){
        var prc = puser.getPrcVal();
        return config.subscriptionExpiredStatus[prc] ? config.subscriptionExpiredStatus[prc].status : undefined;
    };
    puser.getPrcVal =  function(){
        var cookie_prc = cookie.get("prc");
        if(!!cookie_prc){
            return parseInt(cookie_prc.split('#')[0]);
        }
        return 0;
    }
    puser.shouldShowVideoBlocker = function(){
        var prc = puser.getPrcVal();
        var shouldShowVideoBlocker  = config.notPrimeStatus.hasOwnProperty(prc) || puser.isSubscriptionExpired();
        return shouldShowVideoBlocker;
    };
    puser.isPrcNotSet = function(prc){
        /* Handling for undefined and Zero prc value - if prc is not set - return true*/
        return !prc;
    };
    puser.fetchUserSubscriptionStatusFromApi = function(callback){
        var prc = puser.getPrcVal();
        if(puser.isPrcNotSet(prc)){
            return typeof callback == 'function' && callback({});
        }
        else{
            var _uid = cookie.get("ssoid") || cookie.get("ssoId");
            $.ajax({
            url: config.subscriptionStatusApi,
            data: {
                uid: _uid
            }
            }).done(function(ajaxData){
                typeof callback == 'function' && callback(ajaxData);
            });
        }
        
    };
    
    puser.load_toiplus_verifymobile_screen_js = function(callback){
        require(['tiljs/load'], function(mod){
           mod.js('/toiplus_verifymobile_screen_js/version-1,minify-1.cms', function(){
               window.primePaymentFlow && primePaymentFlow.appendVerifyMobileScreenHTMLtoBody();
               typeof callback === 'function' && callback();
           });
        });
    };
    
    
    puser.updateIPR =  function(user, oldPrc){
        var val_prc = puser.getPrcVal();
        var val_ipr = cookie.get("ipr");
        
        if(val_ipr === '0' && puser.isPrimeActiveUser(val_prc)){
            puser.setiprcookieForPrime();
        }
        else if(val_ipr === '1' && !puser.isPrimeActiveUser(val_prc)){
            puser.setiprcookieForPrimeExpired();
        }
        if(oldPrc != val_prc){
            //event.publish("user.prcupdated", user);
            if(typeof primePaymentFlow != 'undefined' && !puser.isPrimeActiveUser(val_prc))
            {
                primePaymentFlow.showBlockerScreenInit();
            }
        }
    };
    
    // puser.syncIPRHandler =  function(user){
    //     var val_prc = puser.getPrcVal();
    //     var val_ipr = cookie.get("ipr");
        
    //     var prcCookie = cookie.get("prc");
    //     var ssoid = cookie.get("ssoid");
    //     var ticketid = cookie.get("TicketId");
        

    //     if(val_ipr === '0' && puser.isPrimeActiveUser(val_prc)){
    //         var _label = val_ipr + '|' + prcCookie + '|' + ssoid + '|' + ticketid;
    //         ga('send', 'event', toiprops._Tmpl_pg , 'prime-PRCmismatch', _label);
    //         require(["tiljs/apps/times/usermanagement"], function(login){ 
    //             login.setPrcForUser(puser.updateIPR.bind(user, val_prc));
    //         });
    //     }
    //     else if(val_ipr === '1' && !puser.isPrimeActiveUser(val_prc)){
    //         var _label = val_ipr + '|' + prcCookie + '|' + ssoid + '|' + ticketid;
    //         ga('send', 'event', toiprops._Tmpl_pg , 'primeexpired-PRCmismatch', _label);
    //         require(["tiljs/apps/times/usermanagement"], function(login){ 
    //             login.setPrcForUser(puser.updateIPR.bind(user, val_prc));
    //         });
    //     }
    //     else if(typeof prcCookie != 'undefined' && typeof val_ipr == 'undefined'){
    //         var _label = val_ipr + '|' + prcCookie + '|' + ssoid + '|' + ticketid;
    //         ga('send', 'event', toiprops._Tmpl_pg , 'primeinvalid-PRCmismatch', _label);
    //     }
    //     else if(typeof prcCookie == 'undefined' && typeof val_ipr != 'undefined'){
    //         var _label = val_ipr + '|' + prcCookie + '|' + ssoid + '|' + ticketid;
    //         ga('send', 'event', toiprops._Tmpl_pg , 'primeInvalidIPR-PRCmismatch', _label);
    //     }
    // };
    puser.actionPostMobileLogin = function (user, loginEventDataObj){
        var isPrimePaymentFlow = false;
        if(loginEventDataObj){
            isPrimePaymentFlow = loginEventDataObj.isPrimePaymentFlow || false;
        }
        if(!!user && puser.isPrimeActiveUser() && isPrimePaymentFlow){
            try{ 
                sessionStorage.setItem('already_prime_user', 1);
            }
            catch(e){}
        }
        
        puser.checkUserMobileStatus(user, true);
    };
    puser.checkUserMobileStatus = function(user, isLoginEvent){
        require(['tiljs/cookie','tiljs/event', 'tiljs/login'],  function(cookie, event, login) {
            function setDimensionForGA(){
                var ckVal = cookie.get('usermn');
                if (ckVal){
                    var dimensionValue = ckVal == '1' ? 'Available' : 'Unavailable';
                    ga('set', 'dimension24', dimensionValue);
                }
            }
            
            setDimensionForGA();
            
            if (user && login && login.checkMobileInfo){
                login.checkMobileInfo(null, isLoginEvent, setDimensionForGA);
            }
        });
    }
    
    puser.loginHandler =  function(user){
        var val_prc = puser.getPrcVal();
        if((toiprops.toipr != 1) && puser.isPrimeActiveUser(val_prc)){
            puser.deleteiprcookie();
            if (["toidev.indiatimes.com", "spmdev.indiatimes.com"].indexOf(document.location.hostname) > -1) {
                window.location.href = getPrimeReloadUrl(true);
            }
            else{
                window.location.reload(true);
            }
        }
    };
    puser.logoutHandler =  function(user){
        var val_prc = puser.getPrcVal();
        if((toiprops.toipr == 1) && !puser.isPrimeActiveUser(val_prc)){
            puser.deleteiprcookie();
            if (["toidev.indiatimes.com", "spmdev.indiatimes.com"].indexOf(document.location.hostname) > -1) {
                window.location.href = getPrimeReloadUrl(false);
            }
            else{
                window.location.reload(true);
            }
        }
    };
    puser.deleteiprcookie = function() {
        var domain = util.getDomainOnly();
        cookie.remove('ipr', '/', domain);
    };
    
    puser.deleteprccookie = function() {
        var domain = util.getDomainOnly();
        cookie.remove('prc', '/', domain);
    };
    
    puser.setiprcookieForPrime = function() {
        var expiryInMinutes = 30;
        var expiry = expiryInMinutes/(60*24);
        var domainOnly = util.getDomainOnly();
        cookie.set("ipr", "1", expiry, "/", domainOnly);
    };
    
    puser.setiprcookieForPrimeExpired = function() {
        var expiryInMinutes = 30;
        var expiry = expiryInMinutes/(60*24);
        var domainOnly = util.getDomainOnly();
        cookie.set("ipr", "0", 1, "/", domainOnly);
    };
    
    puser.showPrimeCongratsPopup = function(){
            var congratsPopUp;
            // check if user is prime and congrats popup is not shown then show popup
            if(puser.isPrimeActiveUser()) {
                require(['localstoragec'], function(localstoragec) {
                    congratsPopUp = localstoragec.get("congrats_popup");
                    // show prime pop up if congrats_popup value is 1
                    if(congratsPopUp !== '1'){
                        popup_callbacks && popup_callbacks.onReadyCallback(1);
                    }
                });
            }
    };
    puser.getPrimeCongratsPopup = function(isReloadRequired, showForce) {
        require(['localstoragec'], function(localstoragec) {
            congratsPopUp = localstoragec.get("congrats_popup");
            if(puser.isPrimeActiveUser() && (congratsPopUp !== '1' || !!showForce)) {
                var $body = $('body');
                $.get('/prime_congrats_popup.cms?version=1',function(data){
                    $body.append(data);
                    $body.addClass('disable-scroll');
                    require(["pgtrack"], function(pgtrack) {
                        var prcValue = puser.getPrcVal();
                        pgtrack.track('prime-login_blocker|Conversion#Success-'+ prcValue);
                    });
                    if(popup_callbacks){
                        popup_callbacks && popup_callbacks.onShowCallback(true);    
                    }
                });
                
                $body.on('click','.close-congrats-popup',function(){
                    $body.removeClass('disable-scroll');
                    $('#congrats_popup').remove();
                    localstoragec.set("congrats_popup", '1', 365, '/');
                    if(!!isReloadRequired){
                        puser.deleteiprcookie();
                        if (["toidev.indiatimes.com", "spmdev.indiatimes.com"].indexOf(document.location.hostname) > -1) {
                            window.location.href = getPrimeReloadUrl(true);
                        }
                        else{
                            window.location.reload(true);
                        }
                    }
                });
            }
        });
    };
    var removeParam =  function(key, sourceURL) {
            var rtn = sourceURL.split("?")[0],
                param,
                params_arr = [],
                queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
            if (queryString !== "") {
                params_arr = queryString.split("&");
                for (var i = params_arr.length - 1; i >= 0; i -= 1) {
                    param = params_arr[i].split("=")[0];
                    if (param === key) {
                        params_arr.splice(i, 1);
                    }
                }
                rtn = rtn + "?" + params_arr.join("&");
            }
            return rtn;
    };
    
    var getPrimeReloadUrl = function(user){
            var url = window.location.href;    
            var params = 'toipr=2&primetemplate=1';
            url = removeParam('toipr', url);
            url = removeParam('primetemplate', url);
            
            // Logout case, we should remove toipr=2
            if (user){
                if (url.indexOf('?') > -1){
                    url += '&';
                }
                else{
                    url += '?';
                }
                url += params;
            }
            return url;
    };
    /*var registerPrimeWelcomePopup = function(){
        var popUpManager = TimesApps.PopUpManager;
        popup_callbacks = popUpManager && popUpManager.registerPopup("primeCongratsPopup", puser.getPrimeCongratsPopup);
    };*/
    event.subscribe("user.login", function(user){
        puser.loginHandler(user);
    });
    event.subscribe("user.logout", function(user){
        puser.logoutHandler(user);
    });
    event.subscribe("user.autologgedin", function(user){
      //Making an setCookies API call on reload and store cookies in session
     var _etnativePrc = sessionStorage.getItem('_etnativePrc');
     if(!_etnativePrc){
     fetch('https://pauth.indiatimes.com/prime-auth/prime/status/setCookies',{
         method: "GET",
         credentials: 'include'
        }).finally(function(){
            var prc = cookie.get("prc");
            if(prc){sessionStorage.setItem('_etnativePrc', prc);} 
        });
     } 
    // if(window.location.host === 'timesofindia.indiatimes.com'){
    //     puser.syncIPRHandler(user);
    // }
    });
    
    // if(typeof TimesApps.PopUpManager !== 'undefined'){
    //     registerPrimeWelcomePopup();
    // }
    // else{
    //     event.subscribe("popUpManagerLoaded", function(){
    //         registerPrimeWelcomePopup();
    //     });
    // }
    return puser;
});


define( 'api',[ "tiljs/apps/times/api" ], function ( api ) {
	var mod_api = api;
	return mod_api;
} );

define( 'tiljs/plugin/plugin',[ "../load", "../util", /* "jquery",*/ "../event", "../ui", "../logger", "../is" ], function ( load, util, /*$,*/ event, ui, logger, is ) {
	var default_config = {
		init: true,
		root: "body",
		dependency: function ( callback ) {
			//this is config here
			this.dep_data = {};
			if( callback ) {
				callback();
			}
		}
	};
	var mod_plugin = function ( id, config ) {
		if( !id ) {
			throw new Error( "'id' param is required." );
		}
		this.id = id;
		this.updateConfig( config );
		//        console.log("done");
	};
	mod_plugin.prototype.updateConfig = function ( config ) {
		this.config = util.extend( true, {}, default_config, config );
	};
	mod_plugin.prototype.find = function () {
		return $( this.config.root ).find( "[data-plugin='" + this.id + "']" );
	};
	mod_plugin.prototype.init = function () {
		event.publish( getEventName( "beforeinit" ) );
		//        var plugins = opt.find();
		//        logger.log(opt.id + " init:" + plugins.length);
		//        if (plugins && plugins.length > 0) {
		//            event.publish(getEventName("beforeloadjs"));
		//            if (opt.js && opt.isJSdependent(plugins)) {
		//                load.js(opt.js, function (options, plugins) {
		//                    return function () {
		//                        event.publish(getEventName("afterloadjs"));
		//                        opt.initPlugins(plugins);
		//                    };
		//                }(opt, plugins), opt.js_id);
		//            } else {
		//                opt.initPlugins(plugins);
		//            }
		//        }
		//        console.log("init" );
		if( is.funct( this.config.dependency ) ) {
			var tthis = this;
			this.config.dependency( function () {
				tthis.render();
			} );
		} else {
			this.render();
		}
	};
	mod_plugin.prototype.render = function () {
		event.publish( getEventName( "beforerender" ) );
		var plugin = this;
		this.find().each( function ( i, ele ) {
			plugin.renderEach( ele );
		} );
		event.publish( getEventName( "afterrender" ) );
	};
	mod_plugin.prototype.renderEach = function ( ele ) {
		//$(ele).html("yoo hoo");
		//Override this
	};
	var getEventName = function ( eventName ) {
		return "plugin." + this.id + eventName; //todo replace with ===> "plugin." + this.id + "." + eventName;
	};
	return mod_plugin;
} );

define( 'tiljs/plugin/dynamic',[ "../timer", "../util", "../plugin/plugin" ], function ( timer, util, plugin ) {
	var mod_uptime = new plugin( "dynamic-uptime" );
	mod_uptime.uptime = function () {
		var plugins = $( "[data-plugin='dynamic-uptime']" );
		plugins.each( function ( i, p ) {
			mod_uptime.renderEach( p );
		} );
	};
	mod_uptime.renderEach = function ( ele ) {
		//        var plugins = $("[data-plugin='dynamic-uptime']");
		//        plugins.each(function(i,p){
		var plugin = $( ele );
		var time = plugin.attr( "data-time" );
		var elapsedTime = timer.elapsedTime( time, {
			minute: "min",
			second: "sec"
		}, true );
		plugin.html( elapsedTime );
		//        });
	};
	timer.every( 60000 /*minute*/ , function () {
		mod_uptime.render();
	} );
	mod_uptime.init();
	return mod_uptime;
} );

define( 'rodate',[], function () {
	var rodate = {};
	rodate.uptime = function () {
		var plugins = $( "[rodate]" );
		plugins.each( function ( i, p ) {
			rodate.renderEach( p );
		} );
	};
    rodate.renderEach = function ( ele ) {
		var plugin = $( ele );
		var time = plugin.attr( "rodate" );
		var match = time.match( /^(\d+)-(\d+)-(\d+) (\d+)\:(\d+)\:(\d+)$/ );
		if( !match ) {
		    time = !isNaN(time) ? parseInt(time) : time;
		    var timeObj = new Date( time );
		    if( !isNaN( timeObj.getTime() ) ){
		        rod = timeObj;
		    }else{
		        if( time.indexOf("hrs IST") != -1  ){
		            time = time.replace( " hrs IST", "" );
                    time = time.splice( -2, 0, ":" ); //21 Apr, 2014, 16:31
                }
                time = time.replace( "IST", "" );
                time = time.replace( "hrs", "" );
                time = time.replace( "AM", " AM" );
                time = time.replace( "PM", " PM" );
			    rod = new Date( time );
			     if( isNaN( rod.getTime() ) ){
			         if(time.indexOf(':') > -1){
			            time = time.split(' ').join('T');
    			        time = time.concat('+05:30');
    			        rod = new Date( time );
			         }
			        
			    }
		    }
			match = [ '', rod.getYear() + 1900, rod.getMonth() + 1, rod.getDate(), rod.getHours(), rod.getMinutes(), rod.getSeconds() ];
		}
		var elapsedTime = rodate.elapsedTime( new Date( match[ 1 ], match[ 2 ] - 1, match[ 3 ], match[ 4 ], match[ 5 ], match[ 6 ] ).getTime(), {
			minute: "min",
			second: "sec"
		}, true );
		plugin.html( elapsedTime );
	};
	rodate.elapsedTime = function ( ctime, labels_config, last_only ) {
		if( typeof ctime !== "number" ) {
			return "";
		}
		var labels_default = {
			year: "year",
			day: "day",
			hour: "hour",
			minute: "minute",
			second: "second",
			ago: "ago"
		};
		var labels = $.extend( {}, labels_default, labels_config );
		var timeparts = [
			{
				name: labels.year,
				div: 31536000000,
				mod: 10000
			},
			{
				name: labels.day,
				div: 86400000,
				mod: 365
			},
			{
				name: labels.hour,
				div: 3600000,
				mod: 24
			},
			{
				name: labels.minute,
				div: 60000,
				mod: 60
			},
			{
				name: labels.second,
				div: 1000,
				mod: 60
			}
        ];
		var
			i = 0,
			l = timeparts.length,
			calc,
			values = [],
			interval = new Date().getTime() - ctime; //todo use server time
		while( i < l ) {
			calc = Math.floor( interval / timeparts[ i ].div ) % timeparts[ i ].mod;
			if( calc && calc >= 0 ) {
				values.push( calc + ' ' + timeparts[ i ].name + ( calc > 1 ? 's' : '' ) );
			}
			i += 1;
		}
		if( values.length === 0 ) {
			values.push( '1 ' + labels.second );
		}
		if( last_only === true ) {
			return values[ 0 ] + ' ' + labels.ago;
		} else {
			return values.join( ', ' ) + ' ' + labels.ago;
		}
	};
	return rodate;
} );

define( 'tiljs/plugin/lazy',[ "../event", "../ui", "module", "../util" ], function ( event, ui, module, util ) {
	var mod_lazy = {};
	var default_config = {
		skew: 1000,
		error_image: null
	};
	var config = util.extend( true, {}, default_config, module.config() );
	mod_lazy.init = function () {
		var tthis = this;
		tthis.load();
		event.subscribe( "window.scroll", function () { //todo this wont work
			tthis.load();
		} )
	};
	mod_lazy.load = function () {
		var tthis = this;
		var imgEle = $( "[data-src]" );
		imgEle.each( function ( i, imgEleC ) {
			if( ui.inView( imgEleC, true, config.skew ) ) {
				tthis.loadEach( imgEleC );
			}
		} );
	};
	mod_lazy.loadEach = function ( imgEleC ) {
		var imgEle$ = $( imgEleC );
		if( config.error_image ) {
			imgEle$.error( function () {
				$( this ).attr( 'src', config.error_image );
			} );
		}
		imgEle$.attr( "src", imgEle$.attr( "data-src" ) );
		imgEle$.removeAttr( "data-src" );
		if(imgEle$.hasClass("blurimage"))
		{
		    imgEle$.removeClass("blurimage");
		}
		if(imgEle$.siblings(".loader").length>0)
		{
		    setTimeout(function() {
    		    imgEle$.siblings(".loader").hide();    
    		}, 500);
		}
	
		
	};
	mod_lazy.init();
	return mod_lazy;
} );

define( 'localstoragec',[ "tiljs/cookie" ], function ( cookie ) {
    var mod_local = {};
    mod_local.isEnabled = function () {
        return typeof ( Storage ) !== "undefined";
    };
    mod_local.checkExpiry = function ( key ) {
        var obj = localStorage.getItem( key );
        if( obj && !( obj.hasOwnProperty( "timestamp" ) && obj.hasOwnProperty( "expires" ) ) ) return key;
        if( obj && (Number( new Date().getTime() ) - Number( obj.timestamp ) > Number( obj.expires ) * 60 * 60 * 24 * 1000 )) {
            localStorage.removeItem( key );
            return;
        }
        return key;
    };
    mod_local.set = function ( name, value, expires, path, domain, secure ) {
        try {
            var object = {
                "value": value,
                timestamp: new Date().getTime(),
                "expires": expires
            };
            localStorage.setItem( name, JSON.stringify( object ) );
        } catch( e ) {
            cookie.set( name, value, expires, path, domain, secure );
        }
    };
    mod_local.get = function ( key ) {
        //return (mod_local.checkExpiry(key))?localStorage.getItem(key):'';
        var val = '';
        try {
            val = JSON.parse( localStorage.getItem( key ) );
        } catch( ex ) {
            val = localStorage.getItem( key );
        }
        return( val && val[ 'value' ] ) ? val[ 'value' ] : val;
    };
    mod_local.csget = function ( key ) {
        //return (mod_local.isEnabled() && mod_local.checkExpiry(key))?mod_local.get(key):mod_local.get(key);
        return( mod_local.isEnabled() && mod_local.get( key ) ) ? mod_local.get( key ) : cookie.get( key );
    };
    mod_local.remove = function ( data ) {
        return localStorage.removeItem( data );
    };
    return mod_local;
} );
define( 'tiljs/comments',[ "./util", "./ui", "jquery", "module", "./is", "./plugin/lazy", "./event" ], function ( util, ui, $, module, is, lazy, event ) {
	var default_config = {
		gravatar: false,
		wrapper: "#comment-section", //data-plugin=['comments'] //All comments inside this
		main: "#comments", //data-plugin=['comments'] //Comment will be added here
		comment: "[data-plugin='comment']", //Each comment
		tmpl: "comment_tmpl",
		count: "[data-plugin='comments-count']",
		post_button: "[data-plugin='comment-post']",
		comment_input: "[data-plugin='comment-input']",
		form: "[data-plugin='comment-form']",
		loadonscroll: true
	};
	var mod_comments = function ( config ) {
		this.config = util.extend( true, {}, config );
	};
	mod_comments.config = util.extend( true, {}, default_config, module.config() );
	var sample_comment = [
		{
			text: "Hello World",
			name: "Del Sanic",
			image: "http://www.gravatar.com/avatar/?d=identicon",
			uid: "123456",
			badge: [
				{
					name: "Silver"
				},
				{
					name: "Gold"
				}
            ]
        },
		{
			text: "Test Comment",
			name: "John",
			image: "http://www.gravatar.com/avatar/?d=identicon",
			uid: "123457",
			badge: [
				{
					name: "Silver"
				},
				{
					name: "Gold"
				}
            ]
        }
    ];
	mod_comments.getConfig = function () {
		return this.config;
	};
	mod_comments.prototype.getConfig = function () {
		return this.config;
	};
	mod_comments.prototype.initialize = function () {
		var tthis = this;
		//        tthis.isLoading=0;
		this.comments = [];
		this.getData( function ( data, commentCount ) {
			tthis.renderCommentCount( commentCount || ( data ? data.length : 0 ) );
			if( data && data.length > 0 ) {
				tthis.renderNoComment( false );
				tthis.render( data );
			} else {
				tthis.renderNoComment( true );
			}
		} );
		if( tthis.config.loadonscroll === true ) {
			( function ( tthis ) {
				event.subscribe( "window.scroll", function () { //todo this wont work
					tthis.loadNextPg();
				} )
			} )( tthis );
		}
	};
	mod_comments.prototype.getData = function ( callback ) {
		//        var comment = util.extend(true,{},sample_comment);
		//        ui.getGravatar();
		callback( sample_comment );
	};
	mod_comments.prototype.renderCommentCount = function ( count, type ) {
		$( "[data-plugin='comment-count']" ).text( count );
	};
	mod_comments.prototype.renderNoComment = function ( showOrHide ) {
		if( showOrHide ) {
			$( "[data-plugin='comment-none']" ).show();
		} else {
			$( "[data-plugin='comment-none']" ).hide();
		}
	};
	mod_comments.prototype.render = function ( data, callback, append ) {
		var tthis = this;
		if( data ) {
			var root = $( tthis.config.wrapper + " " +tthis.config.main );
			if( append == false || typeof append === "undefined" ) {
				root.empty();
				////            root.append(this.renderInput()) ;
			}
			//            if (this.config.tmpl) {
			//                this.renderUsingTemplate(0,data,this.config.tmpl);
			//            } else {
			util.each( data, function ( i, v ) {
				root.append( tthis.renderEach( i, v ) );
				if( callback ) {
					callback( data );
				}
			} );
			lazy.load();
			//            }
		}
	};
	mod_comments.prototype.renderEach = function ( index, dataOne ) {
		if( this.config.tmpl && $.fn.render ) {
			return this.renderUsingTemplate( index, dataOne, this.config.tmpl );
		} else {
			event.publish("logger.error","$.fn.render not defined. Render using jquery. this.config.tmpl=" + this.config.tmpl  + "&$.fn.render="+ $.fn.render );
			return this.renderUsingjQuery( index, dataOne );
		}
	};
	mod_comments.prototype.renderUsingTemplate = function ( index, dataOne, tmpl, prepend ) {
		return $( "#" + tmpl ).render( dataOne );
	};
	mod_comments.prototype.renderUsingjQuery = function ( index, dataOne ) {
		var li = $( "<li></li>" );
		li.text( dataOne.name + ": " + dataOne.text );
		return li;
	};
	mod_comments.prototype.loadingDiv = function ( text ) {
		$( "[data-plugin='comment-loading']" ).text( text );
	};
	//    mod_comments.prototype.isLoading = function () {
	//        return this.isLoading === 1;
	//    };
	mod_comments.prototype.loadNextPg = function () {
		var tthis = this;
		//        var config = tthis.getConfig();
		if( tthis.isLoading === 0 && ui.inView( tthis.config.main + " .comment:last-child", true, 1000 ) ) { //todo remove li from here
			tthis.loadComment( tthis.config.commentType, function ( data ) {}, true, ++tthis.config.curpg );
		}
	};
	mod_comments.prototype.loading = function ( progress ) {
		this.loadingDiv( "Loading..." /*+ " " + (progress?progress + "%":"")*/ );
		this.isLoading = 1;
	};
	mod_comments.prototype.loaded = function () {
		this.loadingDiv( "" );
		this.isLoading = 0;
		event.publish( "comments.loaded", this );
		if( this.config.loadonscroll == false ) {
			$( this.config.wrapper ).find('#'+this.config.commentType).append( "<div class='loadmore'>View more comments</div>" );
		}
	};
	mod_comments.prototype.loadedAll = function () {
		this.loadingDiv( "Loaded all comments" );
		$( this.config.wrapper + ' #'+this.config.commentType +' .loadmore' ).hide(); //todo change to data plugin
		if( this.comments.length == 0 ) {
			event.publish( "comments.loaded.none", this );
		} else if( this.comments.length >= 0 ) {
			event.publish( "comments.loaded.all", this );
		}
		this.isLoading = 2;
	};
	return mod_comments;
} );

define( 'tiljs/compatibility',[ "jquery" ], function ( $ ) {
	var mod_compatibility = {};
	//This function is not available in IE8 so implementing it.
	if( !Array.prototype.indexOf ) {
		Array.prototype.indexOf = mod_compatibility.Array_indexOf = function ( searchElement, fromIndex ) {
			if( this === undefined || this === null ) {
				throw new TypeError( '"this" is null or not defined' );
			}
			var length = this.length >>> 0; // Hack to convert object.length to a UInt32
			fromIndex = +fromIndex || 0;
			if( Math.abs( fromIndex ) === Infinity ) {
				fromIndex = 0;
			}
			if( fromIndex < 0 ) {
				fromIndex += length;
				if( fromIndex < 0 ) {
					fromIndex = 0;
				}
			}
			for( ; fromIndex < length; fromIndex++ ) {
				if( this[ fromIndex ] === searchElement ) {
					return fromIndex;
				}
			}
			return -1;
		};
	}
	//This function is not available in IE8 so implementing it.
	if( !String.prototype.trim ) {
		String.prototype.trim = function () {
			return this.replace( /^\s+|\s+$/gm, '' );
		};
	}
	//Utility function
	if( !String.prototype.splice ) {
		String.prototype.splice = function ( idx, rem, s ) {
			return( this.slice( 0, idx ) + s + this.slice( idx + Math.abs( rem ) ) );
		};
	}
	//Placeholders do not work in old browsers specially IE
	$( function () {
		//start added by Amit
		$( 'body' ).on( 'focus', '[placeholder]', function () {
			var input = $( this );
			if( input.val() === input.attr( 'placeholder' ) ) {
				input.val( '' );
				input.removeClass( 'placeholder' );
			}
		} );
		$( 'body' ).on( 'blur', '[placeholder]', function () {
			var input = $( this );
			if( input.val() === '' || input.val() === input.attr( 'placeholder' ) ) {
				input.addClass( 'placeholder' );
				input.val( input.attr( 'placeholder' ) );
			}
		} );
//		$( '[placeholder]' ).focus();
		$( '[placeholder]' ).blur();
		//        $('[placeholder]').parents('form').submit(function() {
		//            $(this).find('[placeholder]').each(function() {
		//                var input = $(this);
		//                if (input.val() == input.attr('placeholder')) {
		//                    input.val('');
		//                }
		//            })
		//        });
		//todo move to comments
		//        $('body').on('mouseenter','.comment-box', function() {
		//            var obj = $(this).find("[data-plugin='comment-user-follow_wrapper']");
		//            if(!obj.hasClass('dont_show')){
		//                obj.show();
		//            }
		//        });
		//        $('body').on('mouseleave','.comment-box', function() {
		//            var obj = $(this);
		//            obj.find("[data-plugin='comment-user-follow_wrapper']").hide();
		//        });
		//end added by Amit
	} );
	return mod_compatibility;
} );

define( 'tiljs/social/social',[ "../load", "../util", "jquery", "../event", "../ui", "../logger" ], function ( load, util, $, event, ui, logger ) {
	//    function SocialPlugin(id, social_parent) {
	//        var tthis = this;
	//
	//        this.id = id;
	//        this.social_id = social_parent.id;
	//        this.social_parent = social_parent;
	//
	//        var registerEvents = function () {
	//            var pluginName = tthis.getName();
	//            util.each(this.events, function (eventName, eventCallback) {
	//                $("body").on(eventName, "[data-plugin='" + pluginName + "']", function(e){
	//                    if(eventCallback){
	//                        eventCallback.call(this,e);
	//                    }
	//                    e.stopImmediatePropagation();
	//                    return false;
	//                });
	//            });
	//        };
	//
	//        this.readOptions = function (ele) {
	//            return util.data(ele);
	//        };
	//
	//        this.getName = function () {
	//            return this.social_id + "-" + this.id;
	//        };
	//
	//        this.init=function(){
	//
	//        };
	//
	//        this.preAttachPluginEvent = function (plugins) {
	//            var pluginInstance = plugins.filter("[data-plugin='" + this.getName() + "']");
	//            pluginInstance.each(function (kk, vv) {
	//                if (tthis.init) {
	//                    tthis.init(vv, tthis);
	//                }
	//            });
	//        };
	//    }
	var mod_social = function ( id ) {
		this.id = id;
		this.config = {
			js: null,
			js_id: null
		};
		this.config = function ( config ) {
			this.config = util.extend( true, {}, this.config, config );
			this.js = config.js;
			this.js_id = config.js_id;
		};
		/**
		 * @deprecated use this.config
		 * @param js
		 * @param js_id
		 */
		this.setJS = function ( js, js_id ) {
			this.js = js;
			this.js_id = js_id;
		};
		this.plugins = {};
		this._getPluginID = function ( id ) {
			return opt.id + "-" + id;
		};
		this.addPlugin = function ( plugin_options ) {
			opt.plugins[ this._getPluginID( plugin_options.id ) ] = plugin_options;
			if( plugin_options.alias ) {
				for( var i = 0; i < plugin_options.alias.length; i++ ) {
					var alias_options = util.extend( true, {}, plugin_options, {
						id: plugin_options.alias[ i ]
					} );
					delete alias_options.alias;
					this.addPlugin( alias_options );
				}
			}
		};
		this.getPlugin = function ( id ) {
			return opt.plugins[ this._getPluginID( id ) ];
		};
		var opt = this;
		this.beforeinit = function () {};
		this.afterloadjs = function () {};
		this.beforeloadjs = function () {};
		this.init = function ( config ) {
			if( opt.beforeinit ) {
				opt.beforeinit();
			}
			var plugins = opt.find();
			logger.log( opt.id + " init:" + plugins.length );
			if( plugins && plugins.length > 0 || config.parse === true ) {
				if( opt.beforeloadjs ) {
					opt.beforeloadjs();
				}
				//                console.log(opt.js_id + ":" + opt.js_id);
				if( opt.js && ( opt.isJSdependent( plugins ) || config.parse === true ) ) {
					load.js( opt.js, function ( options, plugins ) {
						return function () {
							if( opt.afterloadjs ) {
								opt.afterloadjs(config);
							}
							opt.initPlugins( plugins );
						};
					}( opt, plugins ), opt.js_id );
				} else {
					opt.initPlugins( plugins );
				}
			}
		};
		this.find = function () {
			return $( "[data-plugin^='" + this.id + "-']" );
		};
		this.isJSdependent = function ( plugins ) {
			for( var i = 0; i < plugins.length; i++ ) {
				var plugin = plugins[ i ];
				var pluginName = $( plugin ).attr( "data-plugin" );
				if( opt.plugins[ pluginName ] && opt.plugins[ pluginName ].js ) {
					return true;
				}
			}
			return false;
		};
		this.initPlugins = function ( plugins ) {
			this.registerPluginEvents();
			//            this.initPlugins(plugins);
		};
		this.registerPluginEvents = function () {
			util.each( opt.plugins, function ( pluginName, plugin ) {
				util.each( plugin.events, function ( eventName, eventCallback ) {
					//                        console.log("EVENT:"+pluginName+":"+eventName);
					$( "body" ).off( eventName, "[data-plugin='" + pluginName + "']" );
					$( "body" ).on( eventName, "[data-plugin='" + pluginName + "']", function ( e ) {
						if( eventCallback ) {
							try {
								event.publish( "social.action", {
									plugin: pluginName,
									event: eventName,
									element: this,
									dom_event: e
								} );
								eventCallback.call( this, e );
							} catch( e ) {
								event.publish( "logger.error", e.stack );
							}
						}
						e.stopImmediatePropagation();
						return false;
					} );
				} );
				var pluginInstance = $( "body" ).find( "[data-plugin='" + pluginName + "']" );
				pluginInstance.each( function ( kk, vv ) {
					if( plugin.init ) {
						try {
							plugin.init( vv, plugin );
						} catch( e ) {
							event.publish( "logger.error", e.stack );
						}
					}
				} );
			} );
		};
		this.preAttachPluginEvent = function ( plugins ) {
			//            console.log(opt.plugins);
			var plugincount = 0;
			util.each( opt.plugins, function ( k, v ) {
				var pluginInstance = plugins.filter( "[data-plugin='" + k + "']" );
				pluginInstance.each( function ( kk, vv ) {
					plugincount++;
					if( v.init ) {
						v.init( vv, v );
						$( vv ).css( "border", "2px solid red" );
					}
				} );
			} );
			logger.log( opt.id + " found plugin : " + plugincount + "/" + plugins.length );
		};
		this.renderPlugin = function ( ele, default_params, main_ele ) {
			var element = $( ele );
			var data = util.data( ele );
			var params = util.extend( true, {}, default_params, data );
			params.href = data.url || data.href || element.attr( "href" ) || params.href;
			var pluginEle = $( main_ele );
			//Using this because data method in jquery does not append dom element
			$.each( params, function ( name, value ) {
				pluginEle.attr( "data-" + name, value );
			} );
			element.empty();
			element.append( pluginEle );
			this.parse( ele );
		};
		this.getAbsoluteUrl = function ( url ) {
			var resolvedUrl = ( url && url.length > 0 && url !== "#" ) ? url : document.location.href;
			resolvedUrl = resolvedUrl.split( "#" )[ 0 ]; // remove #
			if( resolvedUrl && resolvedUrl.length > 2 && resolvedUrl[ 0 ] === "/" && resolvedUrl[ 1 ] !== "/" ) { //URL is relative, make it absolute
				resolvedUrl = location.protocol + "//" + location.host + resolvedUrl;
			}
			return resolvedUrl;
		};
		///Helper Methods
		this._share = function ( url, params, options, element ) {
			event.publish( "social.onBeforeShare", {
				params: params,
				element: element,
				network: this.id
			} );
			var _url = this.getAbsoluteUrl( url );
			var name = "social_share_" + new Date().getTime();
			var _options = $.extend( {
				name: name,
				width: 700,
				height: 400
			}, options );
			var popup = ui.window( _url + "?" + $.param( params ), _options );
			if( popup ) {
				popup.moveTo( 275, 275 );
			}
		};
	};
	mod_social.onBeforeShare = function ( callback ) {
		event.subscribe( "social.onBeforeShare", callback );
	};
	return mod_social;
} );

define( 'tiljs/social/facebook',[ "../social/social", "../ui", "../logger", "../event", "../util", "module", "jquery", "../ajax", "../is" ], function ( social, ui, logger, event, util, module, $, ajax, is ) {
	var default_config = {
		parse: false,
		init: true,
		appid: null,
		js: "//connect.facebook.net/en_US/sdk.js",
		//        js: "//connect.facebook.net/en_US/all.js",
		js_id: "facebook-jssdk",
		load_js: false,
		share_url: "http://www.facebook.com/sharer.php",
		oauth: false,
		status: false,
		xfbml: false,
		fb_version: 'v2.12',
		share_params: function ( url, title, summary, image ) {
			return {
				"url[url]": url
			}
		}
	};
	var config = util.extend( true, {}, default_config, module.config() );
	var mod_facebook = new social( "facebook", "facebook" );
	mod_facebook.setJS( config.js, config.js_id );
	var __isJSdependent = mod_facebook.isJSdependent;
	mod_facebook.isJSdependent = function ( plugins ) {
		return config.load_js || __isJSdependent( plugins );
	};
	mod_facebook.addPlugin( {
		id: "like",
		js: true,
		init: function ( ele, plugin ) {
			var element = $( ele );
			var data = util.data( ele );
			var default_params = {
				href: location.href,
				layout: "button_count", //standard , box_count, button_count, button
				"show-faces": "false", //false, true
				width: "100", //integer
				action: "like", //like , recommend,
				share: false //true, false
			};
			var params = util.extend( true, {}, default_params, data );
			params.href = data.url || data.href || element.attr( "href" ) || params.href;
			var fb_like = $( "<div class='fb-like'></div>" );
			$.each( params, function ( name, value ) {
				//Using this because data method in jquery does not append dom element
				fb_like.attr( "data-" + name, value );
			} );
			element.empty();
			element.append( fb_like );
			mod_facebook.parse( ele );
		}
	} );
	mod_facebook.addPlugin( {
		id: "comments",
		js: true,
		init: function ( ele, plugin ) {
			var element = $( ele );
			var data = util.data( ele );
			var default_params = {
				href: location.href,
				colorscheme: "light", //light, dark
				numposts: 10 //10
				//                width : "100"            //integer
			};
			var params = util.extend( true, {}, default_params, data );
			params.href = data.url || data.href || element.attr( "href" ) || params.href;
			var fb_comments = $( "<div class='fb-comments'></div>" );
			//Using this because data method in jquery does not append dom element
			$.each( params, function ( name, value ) {
				fb_comments.attr( "data-" + name, value );
			} );
			element.empty();
			element.append( fb_comments );
			mod_facebook.parse( element[ 0 ] );
			//            FB.xfbml.parse(ele);
		}
	} );
	mod_facebook.addPlugin( {
		id: "share",
		alias: [ "button" ],
		events: {
			click: function ( e ) {
				var data = util.data( this );
				var title = data.title || document.title;
				mod_facebook.share( data.url || $( this ).attr( "href" ), title, data.summary, data.image, this );
			}
		}
	} );
	mod_facebook.share = function ( url, title, summary, image, element ) {
		if( false && window.FB && config.appid ) { //disabling this because proper app id not available
			FB.ui( {
				method: 'feed',
				display: 'popup',
				link: mod_facebook.getAbsoluteUrl( url ),
				picture: mod_facebook.getAbsoluteUrl( image ), //check picture should be correct
				name: title,
				//             caption: summary,
				description: summary
			}, function ( response ) {
				//                alert(response);
			} );
		} else {
			var shareParam = {
				u: mod_facebook.getAbsoluteUrl( url ),
				display: 'popup',
				sdk: 'joey'
				//                    'p[url]': mod_facebook.getAbsoluteUrl(url),
				//                    'p[title]': title,
				//                    'p[summary]': summary,
				//                    'p[image][0]': mod_facebook.getAbsoluteUrl(image)
			};
			if( !is.empty( config.appid ) ) {
				shareParam.app_id = config.appid;
			}
			mod_facebook._share(
				config.share_url, shareParam, {
					name: 'facebook_share_dialog',
					width: 626,
					height: (is.IE()) ? 600 : 436
				}, element
			);
		}
	};
	mod_facebook.addPlugin( {
		id: "follow",
		events: {
			click: function ( e ) {
				mod_facebook.follow( $( this ).attr( "data-url" ) || $( this ).attr( "href" ) );
			}
		},
		init: function ( ele, plugin ) {}
	} );
	mod_facebook.follow = function ( url, options ) {
		var _url = mod_facebook.getAbsoluteUrl( url );
		var win = window.open( url, "_blank" );
		win.focus();
	};
	mod_facebook.addPlugin( {
		id: "login",
		js: true,
		events: {
			click: function ( e ) {
				mod_facebook.login();
			}
		}
	} );
	var __perms = null;
	mod_facebook.parse = function ( ele ) {
		if( typeof FB !== "undefined" ) {
			FB.XFBML.parse( ele );
		} else {
			logger.warn( "'FB' is required in parse" );
		}
	};
	mod_facebook.getGrantedPermissions = function ( callback ) {
		if( typeof FB !== "undefined" ) {
			mod_facebook.api( "/me/permissions", function ( resp ) {
				if( callback ) {
					callback( resp );
				}
			} );
		} else {
			logger.warn( "'FB' is required in login" );
		}
	};
	mod_facebook.hasPermissions = function ( permissions, callback ) {
		if( typeof FB !== "undefined" ) {
			mod_facebook.api( "/me/permissions", function ( resp ) {
				if( resp && resp.data && resp.data.length > 0 ) {
					var perms = typeof permissions === "string" ? permissions.split( "," ) : ( permissions instanceof Array ? permissions : [] );
					for( var i = 0; i < perms.length; i++ ) {
						var perm = resp.data[ 0 ];
						if( perm.hasOwnProperty( perms[ i ] ) ) {
							if( callback ) {
								callback( true );
								return null;
							}
						}
					}
				}
				if( callback ) {
					callback( false, resp && resp.error ? resp.error : null );
				}
			} );
		} else {
			logger.warn( "'FB' is required in login" );
		}
	};
	mod_facebook.getPermissions = function ( permissions, callback ) {
		if( typeof FB !== "undefined" ) {
			var perms = typeof permissions === "string" ? permissions : ( permissions instanceof Array ? permissions.join( "," ) : "" );
			mod_facebook.hasPermissions( permissions, function ( resp ) {
				if( resp === true ) {
					if( callback ) {
						callback( resp );
					}
				} else {
					mod_facebook.login( permissions, function () {
						mod_facebook.hasPermissions( permissions, function ( resp ) {
							if( callback ) {
								callback( resp );
							}
						} );
					} );
				}
			} );
		} else {
			logger.warn( "'FB' is required in login" );
		}
	};
	mod_facebook.login = function ( permissions, callback ) {
		if( typeof FB !== "undefined" ) {
			logger.log( permissions );
			var perms = typeof permissions === "string" ? permissions : ( permissions instanceof Array ? permissions.join( "," ) : "" );
			if( __perms != perms ) {
				//                __perms = perms;
				FB.login( callback, {
					scope: perms
				} ); //'email,user_likes'
			}
		} else {
			logger.warn( "'FB' is required in login" );
		}
	};
	mod_facebook.addPlugin( {
		id: "logout",
		events: {
			click: function ( e ) {
				mod_facebook.logout();
			}
		}
	} );
	mod_facebook.logout = function ( callback ) {
		if( typeof FB !== "undefined" ) {
			FB.logout( callback )
		} else {
			logger.warn( "'FB' is required in logout" );
		}
	};
	mod_facebook._createFBroot = function () {
		//Create fb-root div.
		var id = "fb-root";
		var div = $( "#" + id );
		if( !div || div.length == 0 ) {
			div = $( "<div></div>" );
			div.attr( "id", id );
			div.css( "display", "none" );
			$( "body" ).append( div );
		}
		return div;
	};
	mod_facebook.beforeinit = function () {
		if( !config.appid ) {
			logger.warn( "'config.appid' is Required" );
		}
	};
	mod_facebook.beforeloadjs = function () {
		mod_facebook._createFBroot();
	};
	mod_facebook.afterloadjs = function (k) {
		if( typeof FB !== "undefined" ) {
			logger.log( "FB js loaded" );
			if( config.init === true || k.init === true ) {
				FB.init( {
					appId: config.appid,
					oauth: config.oauth,
					status: config.status,
					cookie: true,
					xfbml: config.xfbml,
					version: config.fb_version
				} );
			}
			event.publish( "FB.onload", FB );

			FB.Event.subscribe( 'edge.remove', function ( response ) {
				event.publish( "FB.edge.remove", response );
			} );

			FB.Event.subscribe( 'edge.create', function ( response ) {
				event.publish( "FB.edge.create", response );
			} );

			FB.Event.subscribe( 'comment.create', function ( response ) {
				event.publish( "FB.comment.create", response );
			} );
			FB.Event.subscribe( 'auth.authResponseChange', function ( response ) {
				event.publish( "FB.auth.authResponseChange", response );
				if( response.status === 'connected' ) {
					// the user is logged in and has authenticated your
					// app, and response.authResponse supplies
					// the user's ID, a valid access token, a signed
					// request, and the time the access token
					// and signed request each expire
					var uid = response.authResponse.userID;
					var accessToken = response.authResponse.accessToken;
					event.publish( "FB.auth.authResponseChange.connected", response );
					event.publish( "FB.connected", FB );
				} else if( response.status === 'not_authorized' ) {
					// the user is logged in to Facebook,
					// but has not authenticated your app
					event.publish( "FB.auth.authResponseChange.not_authorised", response );
				} else {
					// the user isn't logged in to Facebook.
					event.publish( "FB.auth.authResponseChange.failed", response );
				}
			} );
		} else {
			logger.warn( "'FB' is required in afterloadjs" );
		}
	};
	var currentUser = null;
	mod_facebook.getUser = function ( callback ) {
		if( typeof FB !== "undefined" && !currentUser ) {
			FB.api( '/me', function ( response ) { //todo use mod_facebook.api
				if( callback ) {
					currentUser = response;
					callback( response ); //response is the basic user object
				}
			} );
		} else {
			if( callback ) {
				callback( currentUser );
			}
		}
	};
	mod_facebook.onlogin = function ( callback ) {
		event.subscribe( "FB.auth.authResponseChange.connected", function ( resp ) {
			mod_facebook.getUser( function ( user ) {
				if( callback ) {
					callback( user, resp );
				}
			} )
		} );
	};
	mod_facebook.oncomment = function ( callback ) {
		event.subscribe( "FB.comment.create", function ( resp ) {
			mod_facebook.getUser( function ( user ) {
				if( callback ) {
					callback( user, resp );
				}
			} )
		} );
	};
	mod_facebook.onlogout = function ( callback ) {
		event.subscribe( [ "FB.auth.authResponseChange.not_authorised", "FB.auth.authResponseChange.failed" ], function ( resp ) {
			if( callback ) {
				currentUser = null;
				callback( resp );
			}
		} );
	};
	mod_facebook.fql = function ( query, callback ) {
		if( typeof FB !== "undefined" ) {
			logger.log( query );
			FB.api( { //todo use mod_facebook.api
				method: 'fql.query',
				query: query
			}, callback );
		} else {
			logger.warn( "'FB' is required in fql" );
		}
	};
	//select name from page where page_id in (SELECT page_id FROM page WHERE page_id IN (SELECT uid, page_id, type FROM page_fan WHERE uid=me()) AND type='city')
	mod_facebook.getLikes = function ( callback ) {
		if( typeof FB !== "undefined" ) {
			FB.api( '/me/likes', /*{'limit': '5'},*/ function ( response ) { //todo use mod_facebook.api
				if( callback ) {
					currentUser = response;
					callback( response ); //response is the basic user object
				}
			} );
		}
	};
	mod_facebook.getLikesByCategory = function ( categories, callback ) {
		if( categories.length > 0 && is.string( categories ) ) {
			categories = categories.split( "," );
		}
		var catArr = [];
		if( categories.length > 0 ) {
			util.each( categories, function ( i, v ) {
				catArr.push( "type='" + v + "'" );
			} );
		}
		var catStr = catArr.length > 0 ? "AND (" + catArr.join( " OR " ) + ")" : "";
		mod_facebook.getUser( function ( user ) {
			if( user ) {
				mod_facebook.fql( "select name from page where page_id in (SELECT page_id FROM page WHERE page_id IN (SELECT uid, page_id, type FROM page_fan WHERE uid=me()) " + catStr + ")", function ( data ) {
					if( callback ) {
						callback( data );
					}
				} );
			} else {
				logger.warn( "User is not logged in. Cannot run facebook.getLikesByCategory." );
			}
		} );
	};
	/**
     * Paging Example :

     var facebook = require("social/facebook")
     facebook.getLikes(function(data){
            if(data){
                console.log(data);
                facebook.paging(data,arguments.callee); //This will recursively call facebook
            }
        });

     * @param data
     * @param callback
     * @returns {*}
     */
	mod_facebook.paging = mod_facebook.pageNext = function ( data, callback ) {
		//{"cursors":{"after":"MjY4ODE3MDI2NDgyMDU5","before":"MTYwMjI3OTE0MDM3NzU0"},
		// "next":"https://graph.facebook.com/100006612690893/likes?access_token=CAABrIHwVZA2GUh3ryguvIzDAHbM1SR0iHYnLHo2hZAp1gZDZD&limit=25&after=MjY4ODE3MDI2NDgyMDU5"}
		if( data && data.paging && data.paging.next ) {
			return ajax.getJSONP( data.paging.next, callback );
		} else {
			callback( null );
		}
	};
	mod_facebook.pagePrev = function ( data, callback ) {
		//{"cursors":{"after":"MjY4ODE3MDI2NDgyMDU5","before":"MTYwMjI3OTE0MDM3NzU0"},
		// "next":"https://graph.facebook.com/100006612690893/likes?access_token=CAABrIHwVZA2GUh3ryguvIzDAHbM1SR0iHYnLHo2hZAp1gZDZD&limit=25&after=MjY4ODE3MDI2NDgyMDU5"}
		if( data && data.paging && data.paging.previous ) {
			return ajax.getJSONP( data.paging.previous, callback );
		} else {
			callback( null );
		}
	};
	mod_facebook.getRegisteredUsersTxt = function ( callback ) {
		mod_facebook.getRegisteredUsers( function ( users ) {
			if( callback ) {
				if( users.length == 1 ) {
					callback( users[ 0 ].name + " has planned his/her trips on HappyTrips.com.", users );
				} else if( users.length > 1 ) {
					callback( users.length + " of your friends have planned their trips on HappyTrips.com", users );
				} else {
					callback( "None of your friends have planned their trips on HappyTrips.com.", users );
				}
			}
		} )
	};
	//    mod_facebook.getRegisteredUsersTxtImg = function (callback, count, link) {
	//        mod_facebook.getRegisteredUsersTxt(function (text, users) {
	//            if (users && users.length > 0) {
	//                var imgEle = $("<span></span>");
	//
	//                var maxImg = 10;
	//
	//                imgEle.empty();
	//                for (var i = 0; i < users.length && i < maxImg; i++) {
	//                    var user = users[i];
	//                    if (link === true) {
	//                        imgEle.append($('<a href="https://www.facebook.com/' + user.uid + '" target="_blank"><img src="' + user.pic_square_with_logo + '" alt="' + user.name + '" title="' + user.name + '" /></a>'));
	//                    } else {
	//                        imgEle.append($('<img src="' + user.pic_square_with_logo + '" alt="' + user.name + '" title="' + user.name + '" />'));
	//                    }
	//
	//                }
	//                if(!count || count === true){
	//                    imgEle.append($('<a href="https://www.facebook.com/' + user.uid + '" class="fbImgCount" target="_blank">+' + ((users.length) - i) + '</a>'));
	//                }
	//            }
	//        });
	//    };
	/**
	 * N users have registered on APP_ID
	 * @param callback
	 */
	mod_facebook.getRegisteredUsers = function ( callback ) {
		mod_facebook.fql( 'SELECT uid,name,pic_square_with_logo FROM user WHERE is_app_user AND uid IN (SELECT uid2 FROM friend WHERE uid1 = me())', callback );
	};
	mod_facebook.api = function () {
		var query = arguments[ 0 ];
		var method = typeof arguments[ 1 ] === "string" ? arguments[ 1 ] : "GET";
		var params = typeof arguments[ 2 ] === "object" ? arguments[ 2 ] : {};
		var callback = typeof arguments[ 1 ] === "function" ? arguments[ 1 ] : ( typeof arguments[ 2 ] === "function" ? arguments[ 2 ] : ( typeof arguments[ 3 ] === "function" ? arguments[ 3 ] : null ) );
		/*
         'since':'last week',
         'limit': '10',
         'offset': '20',
         'until': 'yesterday'
         */
		if( typeof FB !== "undefined" ) {
			logger.debug( query );
			FB.api( query, method, params, function ( response ) {
				if( callback ) {
					callback( response );
				}
			} );
		} else {
			logger.warn( "'FB' is required in api" );
		}
	};
	mod_facebook.getCheckins = function ( callback ) {
		mod_facebook.api( "/me/locations", callback );
	};
	mod_facebook.post = function ( message, callback ) {
		var _message = typeof arguments[ 0 ] === "string" ? {
			message: arguments[ 0 ]
		} : arguments[ 0 ];
		mod_facebook.login( "publish_stream", function () {
			mod_facebook.api( "/me/feed", "POST", _message, callback );
		} );
	};
	/**SELECT page_id,name
     FROM place
     WHERE distance(latitude, longitude, "28.6410126613", "77.2408139523") < 50000
     ORDER BY distance(latitude, longitude, "28.6410126613", "77.2408139523")
     LIMIT 10*/
	mod_facebook.checkin = function ( message, placeid, callback ) {
		mod_facebook.post( {
			message: message,
			place: placeid
		}, callback );
	};
	mod_facebook.init( config );
	return mod_facebook;
} );

define( 'tiljs/ext/date',[], function () {
	/*
	 * @version  0.5.0
	 * @author   Lauri Rooden - https://github.com/litejs/date-format-lite
	 * @license  MIT License  - http://lauri.rooden.ee/mit-license.txt
	 */
	! function ( Date, proto ) {
		var maskRe = /(["'])((?:[^\\]|\\.)*?)\1|YYYY|([MD])\3\3(\3?)|SS|([YMDHhmsW])(\5?)|[uUAZSwo]/g,
			yearFirstRe = /(\d{4})[-.\/](\d\d?)[-.\/](\d\d?)/,
			dateFirstRe = /(\d\d?)[-.\/](\d\d?)[-.\/](\d{4})/,
			timeRe = /(\d\d?):(\d\d):?(\d\d)?\.?(\d{3})?(?:\s*(?:(a)|(p))\.?m\.?)?(\s*(?:Z|GMT|UTC)?(?:([-+]\d\d):?(\d\d)?)?)?/i,
			wordRe = /.[a-z]+/g,
			unescapeRe = /\\(.)/g
			//, isoDateRe = /(\d{4})[-.\/]W(\d\d?)[-.\/](\d)/
			// ISO 8601 specifies numeric representations of date and time.
			//
			// The international standard date notation is
			// YYYY-MM-DD
			//
			// The international standard notation for the time of day is
			// hh:mm:ss
			//
			// Time zone
			//
			// The strings +hh:mm, +hhmm, or +hh (ahead of UTC)
			// -hh:mm, -hhmm, or -hh (time zones west of the zero meridian, which are behind UTC)
			//
			// 12:00Z = 13:00+01:00 = 0700-0500
		Date[ proto ].format = function ( mask ) {
			mask = Date.masks[ mask ] || mask || Date.masks[ "default" ]
			var self = this,
				get = "get" + ( mask.slice( 0, 4 ) == "UTC:" ? ( mask = mask.slice( 4 ), "UTC" ) : "" )
			return mask.replace( maskRe, function ( match, quote, text, MD, MD4, single, pad ) {
				text = single == "Y" ? self[ get + "FullYear" ]() % 100 : match == "YYYY" ? self[ get + "FullYear" ]() : single == "M" ? self[ get + "Month" ]() + 1 : MD == "M" ? Date.monthNames[ self[ get + "Month" ]() + ( MD4 ? 12 : 0 ) ] : single == "D" ? self[ get + "Date" ]() : MD == "D" ? Date.dayNames[ self[ get + "Day" ]() + ( MD4 ? 7 : 0 ) ] : single == "H" ? self[ get + "Hours" ]() % 12 || 12 : single == "h" ? self[ get + "Hours" ]() : single == "m" ? self[ get + "Minutes" ]() : single == "s" ? self[ get + "Seconds" ]() : match == "S" ? self[ get + "Milliseconds" ]() : match == "SS" ? ( quote = self[ get + "Milliseconds" ](), quote > 99 ? quote : ( quote > 9 ? "0" : "00" ) + quote ) : match == "u" ? ( self / 1000 ) >>> 0 : match == "U" ? +self : match == "A" ? Date[ self[ get + "Hours" ]() > 11 ? "pm" : "am" ] : match == "Z" ? "GMT " + ( -self.getTimezoneOffset() / 60 ) : match == "w" ? self[ get + "Day" ]() || 7 : single == "W" ? ( quote = new Date( +self + ( ( 4 - ( self[ get + "Day" ]() || 7 ) ) * 86400000 ) ), Math.ceil( ( ( quote.getTime() - quote[ "s" + get.slice( 1 ) + "Month" ]( 0, 1 ) ) / 86400000 + 1 ) / 7 ) ) : match == "o" ? new Date( +self + ( ( 4 - ( self[ get + "Day" ]() || 7 ) ) * 86400000 ) )[ get + "FullYear" ]() : quote ? text.replace( unescapeRe, "$1" ) : match
				return pad && text < 10 ? "0" + text : text
			} )
		}
		Date.am = "AM"
		Date.pm = "PM"
		Date.masks = {
			"default": "DDD MMM DD YYYY hh:mm:ss",
			"isoUtcDateTime": 'UTC:YYYY-MM-DD"T"hh:mm:ss"Z"'
		}
		Date.monthNames = "JanFebMarAprMayJunJulAugSepOctNovDecJanuaryFebruaryMarchAprilMayJuneJulyAugustSeptemberOctoberNovemberDecember".match( wordRe )
		Date.dayNames = "SunMonTueWedThuFriSatSundayMondayTuesdayWednesdayThursdayFridaySaturday".match( wordRe )
		//*/
		/*
		 * // In Chrome Date.parse("01.02.2001") is Jan
		 * n = +self || Date.parse(self) || ""+self;
		 */
		String[ proto ].date = Number[ proto ].date = function ( format ) {
			var m, temp, d = new Date,
				n = +this || "" + this
			if( isNaN( n ) ) {
				// Big endian date, starting with the year, eg. 2011-01-31
				if( m = n.match( yearFirstRe ) ) d.setFullYear( m[ 1 ], m[ 2 ] - 1, m[ 3 ] )
				else if( m = n.match( dateFirstRe ) ) {
					// Middle endian date, starting with the month, eg. 01/31/2011
					// Little endian date, starting with the day, eg. 31.01.2011
					temp = Date.middle_endian ? 1 : 2
					d.setFullYear( m[ 3 ], m[ temp ] - 1, m[ 3 - temp ] )
				}
				// Time
				m = n.match( timeRe ) || [ 0, 0, 0 ]
				d.setHours( m[ 6 ] && m[ 1 ] < 12 ? +m[ 1 ] + 12 : m[ 5 ] && m[ 1 ] == 12 ? 0 : m[ 1 ], m[ 2 ], m[ 3 ] | 0, m[ 4 ] | 0 )
				// Timezone
				if( m[ 7 ] ) {
					d.setTime( d - ( ( d.getTimezoneOffset() + ( m[ 8 ] | 0 ) * 60 + ( ( m[ 8 ] < 0 ? -1 : 1 ) * ( m[ 9 ] | 0 ) ) ) * 60000 ) )
				}
			} else d.setTime( n < 4294967296 ? n * 1000 : n )
			return format ? d.format( format ) : d
		}
	}( Date, "prototype" );
	return {};
} );

define('tiljs/apps/times/comments',[
	"module",
	"jquery",
	"json",
	"jsrender",
    "localstoragec",
	"../times/api",
	"../../comments",
	"../../ajax",
	"../../plugin/dynamic",
	"../../util",
	"../times/usermanagement",
	"../../event",
	"../../ui",
	"../../is",
	"../../string",
	"../../plugin/lazy",
	"../../cookie",
	"../../logger",
	"../../timer",
	"../../analytics/mytimes",
	"../../compatibility",
	"../../social/facebook",
	"../../page",
	"../../user",
	"../../ext/date",
    "primeuserhandler"
],
    function (module, $, json, jsrender, localstoragec, api, comments, ajax, dynamic, util, login, event, ui, is, string, lazy,
              cookie, logger, timer, mytimes, compatibility, facebook, page, userClass, ext_date, primeuserhandler) {
        //todo use plugin module for data-plugin

        var CONSTANT = {
            RATE_TYPE: {
                AGREE: 100,
                DISAGREE: 101,
                RECOMMEND: 102,
                OFFENSIVE: 103
            }
        };

        var default_config = {
//            post_url :function(){
//                var url = "/postro.cms";
//
//                if (document.location.host == "test.indiatimes.com") {
//                    url = "lib/postComment.php";
//                }
//                return url;
//            }(),
//            validate_url : function(){
//                var validate_url = "/validatecomment.cms";
//                if (document.location.host == "test.indiatimes.com" || document.location.host == "test.happytrips.com") {
//                    validate_url = "lib/validateComment.php";
//                }
//                return validate_url;
//            }(),
//            rate_url : "/ratecomment_new.cms",
            validation: {
                minlength: 1
            },
            loadCommentFromMytimes:false,
            commentType:"comments",
            loadonscroll:true,
            sendCommentLiveEmail:true,
            loginRequiredForRating : true,
            nonloggedinComment : true,
            disabledirectcomment : false,
            maxchar:3000,
            maxCommentWrapLength:500,
            maxResponseCount:3,
            hideResponses:false,
            share_url:"/share.cms",
            verify_comment_url:"/json/cmtverified.cms",
        messages: {
                "name_required" :"Please enter your name.",
                "location_required" :"Please enter your location.",
                "captcha_required" :"Please enter captcha value.",
                "name_toolong" :"Name cannot be longer than 30 chars.",
                "name_not_string" :"Name can only contain alphabets.",
                "location_toolong" :"Location cannot be longer than 30 chars.",
                "location_not_string" :"Location can only contain alphabets.",
                "captcha_toolong" :"Captcha cannot be longer than 4 chars.",
                "captcha_number_only" :"Captcha value can only be a number.",
                "email_required" :"Please enter your email address.",
                "email_invalid" :"Please enter a valid email address.",
                "captcha_invalid" :"Please enter a valid captcha value.",
                "minlength": "You can't post this comment as the length it is too short. ",
                "blank": "You can't post this comment as it is blank.",
                "maxlength": "You have entered more than 3000 characters.",
                "popup_blocked": "Popup is blocked.",
                "has_url": "You can't post this comment as it contains URL.",
                "duplicate": "You can't post this comment as it is identical to the previous one.",
                "abusive": "You can't post this comment as it contains inappropriate content.",
                "self_agree": "You can't Agree with your own comment",
                "self_disagree": "You can't Disagree with your own comment",
                "self_recommend": "You can't Recommend your own comment",
                "self_offensive": "You can't mark your own comment as Offensive",
                "already_agree": "You have already Agreed with this comment",
                "already_disagree": "You have already Disagreed with this comment",
                "already_recommended": "You have already Recommended this comment",
                "already_offensive": "You have already marked this comment Offensive",
                "cant_agree_disagree": "You can't Agree and Disagree with the same comment",
                "cant_agree_offensive": "You can't Agree and mark the same comment Offensive",
                "cant_disagree_recommend": "You can't Disagree and Recommend the same comment",
                "cant_recommend_offensive": "You can't Recommend and mark the same comment Offensive",
                "permission_facebook": "You can't post to facebook. Post permission is required.",
                "offensive_reason": "Please select a reason.",
                "offensive_reason_text": "Please enter a reason." ,
                "offensive_reason_text_limit": "Please enter less than 200 chars."
            }
        };


        var times_comments = comments;


        comments.config = util.extend(true, {}, comments.config, default_config, module.config());

        times_comments.prototype.updateConfig = function (update_config) {
            //config = util.extend(true, config, update_config);
        };

//    login.init();

//        var isLoading = 0;
        var commentType = comments.config.commentType;
//        var curpg = 1;

        times_comments.prototype.initialize = function () {
            var tthis = this;
            this.config = util.extend(true, {}, comments.config, module.config(), this.config);
//            if (update_config) {
//                tthis.updateConfig(update_config);
//            }
			
			tthis.comments = [];
            tthis.commentCount = 0;
            tthis.countPresent = false;

            tthis.pageCount = 1;
//            tthis.commentsCacheDate = null;
//            tthis.commentsCacheUpdated = [];

            //todo move all this to config object
            tthis.config.comment_block_count = tthis.config.comment_block_count || 25;
            tthis.config.commentType = tthis.config.commentType || commentType;
//            tthis.config.attachInput = tthis.config.attachInput || true;
            tthis.config.attachReplyAction = tthis.config.attachReplyAction !== false;
            tthis.config.attachOpinionAction = tthis.config.attachOpinionAction !== false;
			
			if(tthis.config.disabledirectcomment){
				$(tthis.config.wrapper + ' [data-plugin="comment-form"]').hide();
			}
			if(login.getUser()){
                $(tthis.config.wrapper + " [data-plugin='user-isloggedin']" ).show();
                $(tthis.config.wrapper + " [data-plugin='user-notloggedin']" ).hide();
            }
            else{
                $(tthis.config.wrapper + " [data-plugin='user-isloggedin']" ).hide();
                $(tthis.config.wrapper + " [data-plugin='user-notloggedin']" ).show();
            }
			if(!tthis.config.nonloggedinComment && tthis.pageCount === 1){
                $(tthis.config.wrapper + ' [data-plugin="user-notloggedin"]').remove();
            }
			
            tthis.config.opinions = [
                {name: "Agree", id: "agree"},
                {name: "Disagree", id: "disagree"},
                {name: "Recommend", id: "recommended"},
                {name: "Offensive", id: "offensive"}
            ];

//            if (tthis.config.attachInput === true) {
//                tthis.attachInput();
//            }

            if (tthis.config.attachOpinionAction === true) {
                tthis.attachOpinionAction();
            }

            if (tthis.config.attachReplyAction === true) {
                tthis.attachReplyAction();
            }

            this.getData(function (data, commentCount) {


                tthis.renderCommentCount(commentCount || (data ? data.length : 0));
                if(data && data.length >0){
                    tthis.renderNoComment(false);
                    tthis.render(data);
                }else{
                    tthis.renderNoComment(true);
                }

                tthis.verifyEmailComment();

            });

            (function (tthis) {
                event.subscribe("window.scroll", function () {//todo this wont work
                    var config = tthis.getConfig();
                    if (tthis.config.loadonscroll === true && tthis.isLoading === 0 && ui.inView(tthis.config.wrapper + " #" + tthis.config.commentType + " [data-plugin='comment']:visible:last", true, 200)) {  //todo remove li from here
                        tthis.loadComment(tthis.config.commentType, function (data) {

                        }, true, ++tthis.pageCount);
                    }
                });
            })(tthis);


//            tthis.onLoaded(function (comment_ref) {
//                tthis.loadSavedComment();
//            });


//            login.onStatusChange(function(){
//                tthis.loadSavedComment();
//            });
        };

        times_comments.run = function (config) {
            //Comments
            this.config = util.extend(true, {}, comments.config, module.config());
            var msid = config && config.msid ? config.msid : window.msid;//22655412;//27810093/*,channel = "toi"*/;
            var main = config && config.main ? config.main : "#"+this.config.commentType;//22655412;//27810093/*,channel = "toi"*/;
            var wrapper = config && config.wrapper ? config.wrapper : this.config.wrapper;//22655412;//27810093/*,channel = "toi"*/;
            var toi_comment = {};
            toi_comment[this.config.commentType] = new comments({main: main, msid: msid, wrapper:wrapper});
            toi_comment[this.config.commentType].initialize();

            $(wrapper + ' #comment_sort').change(function () {
                var rootid = $(this).val(),
                    id = "comments" + (rootid && rootid.length > 0 ? '_' + rootid : ""),
                    sortLbl = rootid.length ? rootid : "newest";

                $(wrapper +' .comments-list').hide();
                $( wrapper + " #"+id).show();

                $(wrapper + ".comment-section .noComment").hide();

                if (toi_comment[id]) {
                    toi_comment[id].updateAfterCommentsLoaded();
                    toi_comment[id].attachReplyAction();
                    toi_comment[id].attachOpinionAction();
                    toi_comment[id].updateCachedRating();
                }else {
                    toi_comment[id] = new comments({main:"#" + id, msid: msid, commentType: id, wrapper:wrapper/*,attachReplyAction:false, attachOpinionAction:false*/});
                    toi_comment[id].initialize();
                }
                event.publish("comment.sort", sortLbl);
                $(wrapper + " [data-plugin='comment-error-outer']").text("");
                $(wrapper + " [data-plugin='comment-error']").text("");
                event.publish("comment_error");
            });
            
            
            toi_comment[this.config.commentType].processRating();
         
            (function(that){
                event.subscribe("user.status",function(){
                    toi_comment[that.config.commentType].processRating(that);
                    if(tempname=='tvfeatured'){
				        commonmethods._tv_setnumemail();
					}
					
					if(tempname=='moviedetail' || tempname=="movieshowtime" || tempname=="moviereview" || tempname=="webreviewsshow" || tempname == "ottshow" || tempname == "ottseasonshow" || tempname=="movienews" || tempname=="movieuserreview"){
                       moviereviewmodule.getMovieRating(user,moviereviewid);
                    }
                });     
            }(this))

            

            event.subscribe("comments.loaded",function(commentObj){
                logger.log("comments.loaded:"+commentObj.config.commentType);
                commentObj.updateAfterCommentsLoaded();
                if(commentObj.config.hideResponses === true){
                    commentObj.hideExtraResponses();
                }
            });

            event.subscribe("comments.loaded.none",function(commentObj){
                logger.log("comments.loaded.none:"+commentObj.config.commentType);
                commentObj.updateAfterCommentsLoaded();
            });

            event.subscribe("login.error", function (err) {
                if (err && err.error) {
                    logger.error(err.error);
                } else {
                    logger.error(err);
                }
            });

            return toi_comment;
        };

        times_comments.prototype.processRating = function(){
            var user = login.getUser();
            if(!user){
                $(this.config.wrapper + " [data-plugin='comment-error-outer']").text("");
                $(this.config.wrapper + " [data-plugin='comment-error']").text("");
                 event.publish("comment_error");
            }
            var commenttype = "comments" + ($(this.config.wrapper +' #comment_sort').length && $(this.config.wrapper +' #comment_sort').val() !== '' ? '_' + $(this.config.wrapper +' #comment_sort').val(): "");
            // callback to get user rating from mytimes 
            if(user &&  this && this.config && this.config.withrating){
                //var tthis = toicomment[commenttype];
                var savedComment = this.getSavedComment();
                var usr_data = {};
                usr_data.userId = user.getId();
                usr_data.baseEntityId = 0;
                usr_data.uniqueAppKey = this.config.withrating;
                usr_data.appKey = page.getChannel();
                $.getJSON("https://myt.indiatimes.com/mytimes/alreadyRated?callback=?", usr_data,function(data){
                    event.publish("comments.user_has_rated",data);                                              
                    if(window.msid == this.config.msid && this.getSavedComment()){
                        data = (data && data !='') ? data : ' ';
                        savedComment.urs = data;
                        this.saveComment(savedComment);
                        this.loadSavedComment();
                    }
                });
            }
            
            this.markFollowingAll(); //Added by Amit
        };

        //Todo remove from prototype
        times_comments.prototype.attachUserToComment = function (commentObj, user) {
			logger.log("Attaching user to comment");
            commentObj.user = {
                "id": user.getId(),
                "uid": user.getId() ? user.getUid() : '',
                "name": user.getFullName(),
                "username": user.getUsername(),
                "location": user.getCITY(),
                "image": user.getThumb(),
                "email": user.getEmail()
//                    "followers": user.getFollowersCount(),
//                    ,"badge": [],  //todo
//                    "opinion": [],//todo
//                    "points": 1205,     //todo
//                    "pointslevel": "Silver"   //todo
            };
        };

        times_comments.prototype.hideExtraResponses = function(){
            var ttthis = this;
            $($(this.config.wrapper +" #"+this.config.commentType+" .comment-box.level1").get().reverse()).each(function(i,v){ 
           // $(".comment-box.level1").get().reverse().each(function(i,v){ 
                var tc = $(this);
                var tc_level=tc.data("level");
                var tc_next=tc.next();
                if(is.numberOnly(tc_next.data("level"))) {
                    var response_cnt=0;
                    while((tc_next.data("level")!=tc_level) && (tc_next.is(":hidden")) && (i < ttthis.config.comment_block_count))
                    {
                        if(response_cnt == ttthis.config.maxResponseCount){
                            tc_next.before('<div class="show_all_responses comment-box level'+(tc_level+1)+'" data-level="'+tc_level+'" data-action="all_responses"> Show all responses </div>');
                            break;
                        }else{
                            tc_next.slideDown();
                            tc_next=tc_next.next();
                            if(!is.numberOnly(tc_next.data("level"))) {
                                break;
                            }
                        }
                        response_cnt++;
                    }
                } 
            });
        };

        times_comments.prototype.updateAfterCommentsLoaded = function(){
            var commentObj = this;
            if(this.pageCount === 1){
	            if(commentObj.config.commentType === this.config.commentType){
	                if(commentObj.comments.length > 0)   {
	                    logger.log("updateAfterCommentsLoaded : comments.loaded:"+commentObj.config.commentType);
	                    $(commentObj.config.wrapper + ".comment-section .sortby").show();
	                }else{
	                    logger.log("updateAfterCommentsLoaded : comments.loaded.none:"+commentObj.config.commentType);
	                    $(commentObj.config.wrapper + ".comment-section .sortby").hide();
	                    $(commentObj.config.wrapper + ".comment-section .noComment").text("Be the first one to review.").show();
	                }
	            }
	
	           if(commentObj.countPresent !== true){
	               logger.log("updateAfterCommentsLoaded : countPresent:false:" +commentObj.config.commentType);
	                if(commentObj.comments.length === 0)   {
                	    $(commentObj.config.wrapper + ".comment-section .noComment").text("Be the first one to review.").show();
                	} else if(commentObj.config.commentType === "comments_discussed"){
	                    $(commentObj.config.wrapper + ".comment-section .noComment").text("None of the comments have been discussed.").show();
	                } else if(commentObj.config.commentType === "comments_agree"){
	                    //$(commentObj.config.wrapper + ".comment-section .noComment").text("None of the comments have been up voted.").show();
	                } else if(commentObj.config.commentType === "comments_disagree"){
	                    $(commentObj.config.wrapper + ".comment-section .noComment").text("None of the comments have been down voted.").show();
	                }
	           }         
            }
        };

        times_comments.prototype.renderCommentCount = function (count) {
            var tthis = this;
            function displayCount(type, cnt) {
                //$("[data-plugin='comment-count" + (type ? "-" + type : "") + "']").text(cnt ? cnt : "0");
                $(tthis.config.wrapper + " [data-plugin='comment-count" + (type ? "-" + type : "") + "']").text(cnt ? cnt : "0");
                event.publish("comment.count",(cnt ? cnt : "0"));
            }

            if (is.object(count)) {
                displayCount("", count.newest);
                displayCount("oldest", count.oldest);
                displayCount("recommended", count.recommended);
                displayCount("discussed", count.discussed);
                displayCount("agree", count.agree);
                displayCount("disagree", count.disagree);
            } else {
                displayCount("", count);
            }
        };


        /**
         *
         * @param commentType newest(default),oldest,recommended,discussed,agree,disagree
         * @param callback
         * @param append true if comments visible are not to be cleaned
         * @param curpg
         */
        times_comments.prototype.loadComment = function (commentType, callback, append, curpg) {
            var tthis = this;
            if(tthis.config.loadCommentFromMytimes == true){
                tthis._loadCommentMytimes(commentType, function (data) {
                    tthis.render(data, callback, append);
                }, curpg);
            }else{
                tthis._loadComment(commentType, function (data) {
                    tthis.render(data, callback, append);
                }, curpg);
            }
        };

        times_comments.prototype.getData = function (callback) {
            var tthis = this;
            if(tthis.config.loadCommentFromMytimes == true){
                this._loadCommentMytimes(this.config.commentType, callback);
            }else{
                this._loadComment(this.config.commentType, callback);
            }
        };

        times_comments.prototype._loadComment = function (commentType, callback, curpg) {
            var tthis = this;
            var config = tthis.config;//getConfig();
            tthis.loading();

//        var _comments_url = comments_url(config.msid);
            logger.log("loading comments: " + config.msid);
            api.api(commentType, {msid: config.msid, curpg: curpg || 1/*,channel:config.channel*/}, function (comments_data) {
//                tthis.loading(50);

                logger.log("loaded comments: " + config.msid);
                var commentsD = comments_data.articlecomment
                    || comments_data.new_cmtofart2_nit
                    || comments_data.new_cmtofart2_nit_v1
                    || comments_data.articleshow_othcmtofart
                    || comments_data.new_cmtofart2_nit_sub_dev || (comments_data.mytuserdata?comments_data:null);
//                tthis.commentsCacheDate = tthis.commentsCacheDate || (commentsD.tdate&&commentsD.tdate.date?commentsD.tdate.date:logger.warn("Comments do not have tdate."));

                var userData = commentsD.mytuserdata && commentsD.mytuserdata['array'] ? (is.array(commentsD.mytuserdata['array']) ? commentsD.mytuserdata['array'] : [commentsD.mytuserdata['array']]) : null;
//                var commentCount = commentsD.rothrd ? commentsD.rothrd.opctr : null;
                var commentsData = commentsD.rothrd && commentsD.rothrd.op ? (is.array(commentsD.rothrd.op) ? commentsD.rothrd.op : [commentsD.rothrd.op]) : null;
                if (!commentsData || commentsData.length == 0) {
                    tthis.loadedAll();
                    callback([]);
                    return null;
                }

                tthis.flagData = commentsData[0];
                var commentCount = {
                    total: commentsD.rothrd.opctr,
                    newest: commentsD.rothrd.opctr,
                    oldest: commentsD.rothrd.opctr,
                    recommended: commentsD.rothrd.recommendcount,
                    discussed: commentsD.rothrd.opctrtopcnt, // total top level comments
                    disagree: commentsD.rothrd.disagreecount,
                    agree: commentsD.rothrd.agreecount
                };
                var commentPageCount = {
                    comments: Math.ceil(commentsD.rothrd.opctrtopcnt/config.comment_block_count),
                    comments_oldest: Math.ceil(commentsD.rothrd.opctrtopcnt/config.comment_block_count),
                    comments_recommended: Math.ceil(commentsD.rothrd.recommendcount/config.comment_block_count),
                    comments_discussed: Math.ceil(commentsD.rothrd.opctrtopcnt/config.comment_block_count),
                    comments_disagree: Math.ceil(commentsD.rothrd.disagreecount/config.comment_block_count),
                    comments_agree: Math.ceil(commentsD.rothrd.agreecount/config.comment_block_count)
                };

                var users = [];//getUsers(commentsData);
//                console.log("---------------------");
                var i = 0;
                if (userData) {
                    for (i = 0; i < userData.length; i++) {
                        users.push(userData[i].sso);
                    }
                }

                var commentsResult = [];

                for (var c = 0; c < commentsData.length; c++) {
                    var cmt = commentsData[c];
                    var user = userData ? userData[users.indexOf(cmt.roaltdetails.fromaddress)] : null;

                    var comment = {
                        index: ++tthis.commentCount,
                        id: cmt.messageid,
                        comment: is.string(cmt.optext) ? $("<div/>").text(cmt.optext).html() : "",
                        level: cmt.level,
                        childcount: cmt.CHILD ? cmt.CHILD.length : 0,
                        parentuid: cmt.parentuid,
                        parentusername: cmt.parentusername,
                        time: cmt.rodate ? util.getDate(cmt.rodate).getTime():"",//1384934349412,    //cmt.rodate //19 Nov, 2013 01:04 PM
                        abstime:cmt.rodate,
                        opinion: (function (cmt) {
                            var opinions = [];
                            if (tthis.config.opinions) {
                                for (var o = 0; o < tthis.config.opinions.length; o++) {
                                    opinions.push({name: tthis.config.opinions[o].name, id: tthis.config.opinions[o].id, count: cmt[tthis.config.opinions[o].id]});
                                }
                            }
                            return opinions.length > 0 ? opinions : null;
                        }(cmt)),

                        user: {
                            //TODO fix multiple condition check ,user tthis.attachUserToComment(comment,user);
                            id: user && user._id ? user._id : cmt.roaltdetails.fromname,
                            username: user ? user.D_N_U : null,
                            name: cmt.roaltdetails.fromname || (user && user.FL_N ? user.FL_N : ""),    //name used from comment because name in replies to does not match user name in mytimes
                            location: user && user.CITY && !is.object(user.CITY) && !is.empty(user.CITY) ? user.CITY : (!is.empty(cmt.roaltdetails.location) && !is.object(cmt.roaltdetails.location) ? cmt.roaltdetails.location : null),
                            image: user && user.thumb ? user.thumb : cmt.roaltdetails.imageurl,
                            email: user ? user.sso : "",
                            rate: cmt.roaltdetails.urs, 
							followers: user ? user.F_C : 0,
                            follower_text: (user ? user.F_C : 0) > 1 ? ('('+user.F_C+' followers)') : ((user ? user.F_C : '') > 0 ? '('+user.F_C+' follower)' : ''),
                            points: user && user.reward && user.reward.user && user.reward.user.statusPoints ? user.reward.user.statusPoints : null,
                            pointslevel: user && user.reward && user.reward.user && user.reward.user.levelName ? user.reward.user.levelName : null,
                            pointsNeeded: (function(user){
                                var points_needed = '';
                                var user_points = user && user.reward && user.reward.user && user.reward.user.statusPoints ? user.reward.user.statusPoints : null;
                                if(user_points == null || user_points < 250){
                                    points_needed = 250 - user_points;
                                } else if(user_points > 249 && user_points < 5000){
                                    points_needed = 5000 - user_points;
                                } else if(user_points > 4999 && user_points < 25000){
                                    points_needed = 25000 - user_points;
                                } else if(user_points > 24999 && user_points < 250000){
                                    points_needed = 250000 - user_points;
                                }
                                return points_needed;
                            }(user)),

                            badge: (function (user) {
                                var badges = [];
                                if (user && user.rewardpoint && user.rewardpoint.userbadges && user.rewardpoint.userbadges.activityBadge) {
                                    var activityBadge = user.rewardpoint.userbadges.activityBadge;
                                    if(!is.array(activityBadge)){ // Backend gives object when length = 1, converting ot array
                                        activityBadge = [activityBadge];
                                    }
                                    for (var d = 0; d < activityBadge.length; d++) {  //todo remove loop
                                        var badge = activityBadge[d].currentBadge;
                                        badges.push({name: badge.bname, count: badge.level, image: badge.bimg, desc: badge.desc, levelDesc: util.decodeHTML(badge.levelDesc)});
                                    }
                                }
                                return badges.length > 0 ? badges : null;
                            }(user))

                        }
                    };

                    commentsResult.push(comment);
//                        if( c > 10){
//                            break;
//                        }
                    logger.log("Parsed comment " + c);
                }

                tthis.comments = tthis.comments.concat(commentsResult);

                logger.log("rendering  " + commentsResult.length + " comments");
                callback(commentsResult, commentCount);
                logger.log("rendered " + commentsResult.length + " comments");

                tthis.loaded();
                var curpgn = curpg || 1;
                if (tthis.config.loadonscroll == false && !commentsResult || !(curpgn < commentPageCount[tthis.config.commentType])) {
                    tthis.loadedAll();
                }else if (tthis.config.loadonscroll == true && !commentsResult || commentsResult.length == 0 ) {
                    tthis.loadedAll();
                }

            });

            return null;
        };


        times_comments.prototype.parseComment = function (cmt, commentsResult, level) {
            var ttthis = this;
            var user = cmt.user_detail || {
                FL_N:cmt.A_D_N ||cmt.F_NAME,
                CITY:cmt.CITY
            };
            user.reward = {user:cmt.user_reward};
            user.rewardpoint={userbadges : cmt.user_reward_point_info};
            user.rate = cmt && cmt.U_R ? cmt.U_R : '';
            var tthis = this;

            level = level || 1;

            var comment = {
                index: ++tthis.commentCount,
                id: cmt.A_U_I,
//                comment: cmt.C_T , //is.string(cmt.C_T) ? $("<div/>").text(cmt.C_T).html() : "",
                comment: is.string(cmt.C_T) ? $("<div/>").html(cmt.C_T).text() : "",
                trimcom: (function(cmt){
                    var t_c = is.string(cmt.C_T) ? $("<div/>").html(cmt.C_T).text() : "";
                    return util.trimText(t_c,ttthis.config.maxCommentWrapLength);
                }(cmt)),
                authrid:(cmt.C_A_ID ?cmt.C_A_ID:""),
                level: level,
                parentuid: cmt.O_ID,
                childcount: cmt.CHILD ? cmt.CHILD.length : 0,
                parentusername: cmt.O_D_N || cmt.F_NAME,
                time: (cmt.A_DT ? util.getDate(parseInt(cmt.A_DT,10)).getTime():""),//1384934349412,    //cmt.rodate //19 Nov, 2013 01:04 PM
                abstime:cmt.A_DT? util.getDate(parseInt(cmt.A_DT,10)).format("DD MMM, YYYY HH:mm A"):"",
                opinion: (function (cmt) {
                    var opinions = [];

                    opinions.push({name: "Agree",       id: "AC_A_C", count: (cmt.AC_A_C) ? cmt.AC_A_C : 0});
                    opinions.push({name: "Disagree",    id: "AC_D_C", count: (cmt.AC_D_C) ? cmt.AC_D_C : 0});
                    opinions.push({name: "Recommend",   id: "AC_R_C", count: (cmt.AC_R_C) ? cmt.AC_R_C : 0});
                    opinions.push({name: "Offensive",   id: "AC_O_C", count: (cmt.AC_O_C) ? cmt.AC_O_C : 0});

                    return opinions.length > 0 ? opinions : null;
                }(cmt)),

                user: { 
                    //TODO fix multiple condition check ,user tthis.attachUserToComment(comment,user);
                    id: user && user._id ? user._id : null,
                    username: user && user.D_N_U ? user.D_N_U : null,
                    name: user && user.FL_N ? user.FL_N : "",    //name used from comment because name in replies to does not match user name in mytimes
                    location: user && user.CITY && !is.object(user.CITY) && !is.empty(user.CITY) && (user.CITY != "Unknown") ? user.CITY : null,
                    image: user && user.thumb ? user.thumb : "",
                    email: user && user.sso ? user.sso : "",
                    rate:user && user.rate ? user.rate : "",
                    followers: user && user.F_C ? user.F_C : 0,
                    follower_text: (user ? user.F_C : 0) > 1 ? ('('+user.F_C+' followers)') : ((user ? user.F_C : '') > 0 ? '('+user.F_C+' follower)' : ''),
                    points: user && user.reward && user.reward.user && user.reward.user.statusPoints ? user.reward.user.statusPoints : null,
                    pointslevel: user && user.reward && user.reward.user && user.reward.user.levelName ? user.reward.user.levelName : null,
                    pointsNeeded: (function(user){
                        var points_needed = '';
                        var user_points = user && user.reward && user.reward.user && user.reward.user.statusPoints ? user.reward.user.statusPoints : null;
                        if(user_points == null || user_points < 250){
                            points_needed = 250 - user_points;
                        } else if(user_points > 249 && user_points < 5000){
                            points_needed = 5000 - user_points;
                        } else if(user_points > 4999 && user_points < 25000){
                            points_needed = 25000 - user_points;
                        } else if(user_points > 24999 && user_points < 250000){
                            points_needed = 250000 - user_points;
                        }
                        return points_needed;
                    }(user)),

                    badge: (function (user) {
                        var badges = [];
                        if (user && user.rewardpoint && user.rewardpoint.userbadges && user.rewardpoint.userbadges.activityBadge) {
                            var activityBadge = user.rewardpoint.userbadges.activityBadge;
                            if(!is.array(activityBadge)){ // Backend gives object when length = 1, converting ot array
                                activityBadge = [activityBadge];
                            }
                            for (var d = 0; d < activityBadge.length; d++) {  //todo remove loop
                                var badge = activityBadge[d].currentBadge;
                                badges.push({name: badge.bname, count: badge.level, image: badge.bimg, desc: badge.desc, levelDesc: util.decodeHTML(badge.levelDesc)});
                            }
                        }
                        return badges.length > 0 ? badges : null;
                    }(user))

                }
            };
            commentsResult.push(comment);

            if(cmt.CHILD){
                for(var cmtChild in cmt.CHILD){
                    tthis.parseComment(cmt.CHILD[cmtChild], commentsResult, level + 1);
                }
            }

        };

        times_comments.prototype._loadCommentMytimes = function (commentType, callback, curpg) {
            var tthis = this;
            var config = tthis.config;//getConfig();
            tthis.loading();

//        var _comments_url = comments_url(config.msid);
            logger.log("loading comments: " + config.msid);
            api.api(commentType, {msid: config.msid, pagenum: curpg || 1/*,channel:config.channel*/}, function (comments_data) {
//                tthis.loading(50);

                logger.log("loaded comments: " + config.msid);
                var commentsData = comments_data;
//                tthis.commentsCacheDate = tthis.commentsCacheDate || (commentsData.tdate&&commentsData.tdate.date?commentsD.tdate.date:logger.warn("Comments do not have tdate."));

                if (!commentsData || commentsData.length == 0) {
                    tthis.loadedAll();
                    callback([]);
                    return null;
                }

                tthis.flagData = commentsData[0];
                var commentCount = {
                       total : commentsData[0].totalcount,
                       newest : commentsData[0].totalcount,
                       oldest : commentsData[0].totalcount,
                       recommended : commentsData[0].totalcount,
                       discussed : commentsData[0].totalcount,
                       disagree : commentsData[0].totalcount,
                       agree : commentsData[0].totalcount
                   };
//                var commentCount = {
//                    total: commentsD.rothrd.opctr,
//                    newest: commentsD.rothrd.opctr,
//                    oldest: commentsD.rothrd.opctr,
//                    recommended: commentsD.rothrd.recommendcount,
//                    discussed: commentsD.rothrd.opctrtopcnt, // total top level comments
//                    disagree: commentsD.rothrd.disagreecount,
//                    agree: commentsD.rothrd.agreecount
//                };
                var commentPageCount = {
                    comments: Math.ceil(commentCount.newest/config.comment_block_count),
                    comments_oldest: Math.ceil(commentCount.oldest/config.comment_block_count),
                    comments_recommended: Math.ceil(commentCount.recommended/config.comment_block_count),
                    comments_discussed: Math.ceil(commentCount.discussed/config.comment_block_count),
                    comments_disagree: Math.ceil(commentCount.disagree/config.comment_block_count),
                    comments_agree: Math.ceil(commentCount.agree/config.comment_block_count)
                };

//                var users = [];//getUsers(commentsData);
////                console.log("---------------------");
//                var i = 0;
//                if (userData) {
//                    for (i = 0; i < userData.length; i++) {
//                        users.push(userData[i].sso);
//                    }
//                }

                var commentsResult = [];

                for (var c = 1; c < commentsData.length; c++) {
                    var cmt = commentsData[c];
                    var reason = null;

                    if(cmt.DLT == 1){
                    	reason = "DLT fail";
                    }else if(is.empty(cmt.C_T)){
                    	reason = "Blank fail";
                    }
                    if(reason){
                    	logger.log("Not Parsed " + reason + " comment " + c);
                    }else{
                    	tthis.parseComment(cmt,commentsResult);
                    	logger.log("Parsed comment " + c)
                    }
                }

                tthis.countPresent = commentsData[0].countPresent || false;
                tthis.comments = tthis.comments.concat(commentsResult);

                logger.log("rendering  " + commentsResult.length + " comments");
                callback(commentsResult, commentCount);
                logger.log("rendered " + commentsResult.length + " comments");

                tthis.loaded();
                var curpgn = curpg || 1;
                if (tthis.config.loadonscroll == false && !commentsResult || !(curpgn < commentPageCount[tthis.config.commentType])) {
                    tthis.loadedAll();
                }else if (tthis.config.loadonscroll == true && !commentsResult || commentsResult.length == 0 ) {
                    tthis.loadedAll();
                }

            });

            return null;
        };
        function replaceAll(find, replace, str) {
            return str.replace(new RegExp(find, 'g'), replace);
        }


        var domain = "http://jcmsdev.indiatimes.com";

        var getUsers = function (data) {
            var ssoids = {};
            for (var i = 0; i < data.length; i++) {
                ssoids[(data[i].roaltdetails.fromaddress)] = {};
            }
            return ssoids;
        };


        times_comments.prototype.postToSocial = function (message, sites, closeCallback) {
            var tthis = this;
            var domainOnly = util.getDomainOnly();

            var user = login.getUser();

            window.newShare = true;
            window.newShareData = {
//                site:"facebook",
                sites:sites,
                message:message,
                link:window.facebooklink || page.getMeta('og:url'),
                title:window.facebookktitle || page.getMeta('og:title'),
                domain:window.location.host,
                picture:window.fb_Img || page.getMeta('og:image'),
                desc:window.facebooksyn || page.getMeta('og:description')  ,
                facebook : user?user.facebook:null,
                twitter : user?user.twitter:null
            };
            
            /******************Comment Share on FB*****************/ 
            if(-1 != window.newShareData.sites.indexOf('facebook')){
                if(typeof FB == 'undefined'){
                    require(["tiljs/social/facebook", "tiljs/event"],function(facebook, event){
                        // Load FB sdk if it's not loaded
                        facebook.init({init:true,parse: true});
                        //Open FB feed dialog to post comment once sdk is loaded
                        event.subscribe("FB.onload", function(data){
                            tthis.postToFB(window.newShareData);
                        });
                    });
                }else{
                    tthis.postToFB(window.newShareData);
                }
                sites = sites.replace(/facebook,|facebook/g,"");
                window.newShareData.sites = sites;
            }
            if(!sites.length){return true;}
            /*****************************************************/ 

            var url = tthis.config.share_url + "?sites=" + sites;
            var socialPost = ui.window(url, {width: 600, height: 230, name: "socialPost", closeCallback: closeCallback});
            if(socialPost){
	            try{
                    socialPost.moveTo(250, 240);
	            }catch(e){
		            logger.log("Handled IE Exception.");
		            logger.error(e);
	            }
            } else{
//                window.popupblocked = 1;
//                if(is.desktop()){
//                    twitterPost = ui.iframe(url, {width: 575, height: 314, name: "twitterPost", closeCallback: closeCallback});
//                }else{
                logger.error("Popups are blocked. Please enable them.");
//                }
            }
        };
        
        times_comments.prototype.postToFB = function(data){
            FB.ui({ method: 'feed', 
                message: data.message,
                name: data.title,
                link: data.link,
                picture: data.picture,
                caption: data.domain,
                description: data.desc
            });
        };

        times_comments.prototype.postToTwitter = function (message, closeCallback) {
            var domainOnly = util.getDomainOnly();

            if (message.length > 100) {
                message = message.substring(0, 99) + "...";
            }

            window.log = window.log || function(){};
            window.popupblocked = 0;
            cookie.remove("fbcheck", "/", domainOnly);
            cookie.remove("twtcheck", "/", domainOnly);

            cookie.set("twtcheck", "1", 1, "/", domainOnly);
            cookie.set("usercomt", message, 1, "/", domainOnly);

            var url = "/stgredirectpagetest.cms";
            var twitterPost = ui.window(url, {width: 600, height: 230, name: "twitterPost", closeCallback: closeCallback});
            if(twitterPost){
                twitterPost.moveTo(250, 240);
            } else{
                window.popupblocked = 1;
                if(is.desktop()){
                    twitterPost = ui.iframe(url, {width: 575, height: 314, name: "twitterPost", closeCallback: closeCallback});
                }else{
                    alert("Popups are blocked. Please enable them.");
                }
            }



//            var url = "https://twitter.com/share?text=" + message + "&url=" + document.location.href;
//            var twitterPost = ui.window(url, {width: 750, height: 500, name: "twitterPost", closeCallback: closeCallback});
//            if(twitterPost){
//                try{//Not working in IE10 - TOIPR-5367
//                    twitterPost.moveTo(275, 275);
//                }catch(e){
//                    logger.warn("Exception handled for IE10");
//                    logger.error(e);
//                }
//            }else{
//                if(is.desktop()){
//                    ui.iframe(url, {width: 750, height: 500, name: "twitterPost", closeCallback: closeCallback});
//                }else{
//                    alert("Popups are blocked. Please enable them.");
//                }
//            }
        };

        times_comments.prototype.postToFacebook = function (message, closeCallback) {
            var domainOnly = util.getDomainOnly();
            var tthis = this;

            //todo remove cookie use
            if (window.localStorage) {
                localStorage.setItem("usercomt", message);
            }

            window.log = window.log || function(){};
            window.popupblocked = 0;
            cookie.remove("fbcheck", "/", domainOnly);
            cookie.remove("twtcheck", "/", domainOnly);

            cookie.set("fbcheck", "1", 1, "/", domainOnly);
            cookie.set("usercomt", message, 1, "/", domainOnly);

            var url = "/stgredirectpagetest.cms";
//            facebook.getPermissions("publish_stream",function(got_permission){
//                if(got_permission === true){
                    var facebookPost = ui.window(url, {width: 600, height: 230, name: "facebookPost", closeCallback: closeCallback});
                    if(facebookPost){
                        facebookPost.moveTo(250, 240);
                    } else{
                        window.popupblocked = 1;
                        if(is.desktop()){
                            facebookPost = ui.iframe(url, {width: 575, height: 314, name: "facebookPost", closeCallback: closeCallback});
                        }else{
                            alert("Popups are blocked. Please enable them.");
                        }
                    }
//                }   else{
//                    tthis.error(config.messages.permission_facebook);
//                }
//            });


            /*
             if (window.FB) {  //todo use facebook plugin
             FB.ui({
             method: "stream.publish",
             message: message,
             attachment: {media: [
             {type: "image", href: window.facebooklink, src: window.fb_Img}
             ], name: window.facebookktitle,
             caption: "timesofindia.indiatimes.com",
             description: window.facebooksyn,
             href: window.facebooklink},
             user_message_prompt: "What's on your mind?"}, function (d) {
             //                    if (d && d.post_id) {
             //                    } else {
             //                    }
             });
             }else{
             logger.warn("'window.FB' is not defined. Will try again after 2secs.");
             timer.available("FB",function(FB){
             if(FB){
             toi_comments.postToFacebook(message);
             }else{
             logger.error("'window.FB' is not defined. Giving up.");
             }
             },3000, 10);
             }     */
        };

        times_comments.prototype.attachOpinionAction = function () {
            logger.log("Attaching Opinion Action");
            var tthis = this;
            var opinions = this.config.opinions;

            for (var o = 0; o < opinions.length; o++) {
                var opinion = opinions[o];
                (function (opinion) {
                    $(tthis.config.wrapper).off("click", "[data-action='comment-" + opinion.id + "']");
                    $(tthis.config.wrapper).on("click", "[data-action='comment-" + opinion.id + "']", function () {
                        var ref = ui.getActionReferences(this, tthis.config.comment);
                        var parent = ref.parent;

                        var opinionid = parent.attr("data-id");
                        //rateAgree, rateDisagree, rateRecommend, rateOffensive
                        (function (tthis, parent, opinion, ref) {
                            tthis["rate" + opinion.name](opinionid, function (errMsg) {
                                if (errMsg) {
                                    tthis.error(errMsg, ref["comment-error-outer"]);
                                } else {
                                    tthis.error("", ref["comment-error-outer"]);
                                    var count_ele = parent.find("[data-plugin='comment-" + opinion.id + "-count']");
                                    var currentCount = parseInt(count_ele.text(), 10);
                                    $(count_ele).text(++currentCount);
                                }
                            }, ref);
                        }(tthis, parent, opinion, ref));
                        event.publish("comment.opinion", opinion.id);
                        return false;
                    });
                }(opinion))
            }

            $(tthis.config.wrapper).off('focus','[data-plugin="comment-input"]');
            $(tthis.config.wrapper).on('focus','[data-plugin="comment-input"]', function() {
                var ref = ui.getActionReferences(this, tthis.config.comment);
                if(ref["comment-form"] && !ref["comment-form"].hasClass('full')){
                    ref["comment-form"].addClass("full");
                }else if(ref["comment-reply"] && !ref["comment-reply"].hasClass('full')){
                    ref["comment-reply"].addClass("full");
                }
                setcaptcha(ref);
            });


            $(tthis.config.wrapper).off("focus", "[data-plugin='get-user-name']");
            $(tthis.config.wrapper).on("focus", "[data-plugin='get-user-name']",function(){
                var ref = ui.getActionReferences(this, tthis.config.comment);
                if(ref["comment-form-login"]){
                    ref["comment-form-login"].removeClass("noreg");
                     setcaptcha(ref);
                }
            });
            
            function setcaptcha(ref){
                    var $set_user_captcha = ref['set-user-captcha'];
                    if($set_user_captcha.text().length == 0){
                        $set_user_captcha.text(Math.floor((Math.random()*10)) +"+" +Math.floor((Math.random()*10)) +"=");
                    }
            }

            $(tthis.config.wrapper).off("click", "[data-action='offensive_popup_submit']");
            $(tthis.config.wrapper).on("click", "[data-action='offensive_popup_submit']", function () {
                var ref = ui.getActionReferences(this, tthis.config.comment);
                var opinionid = ref.parent.attr("data-id");
                var reason = null;
                reason = ref.offensive_popup.find("input:checked").val();

                if(!reason){
                    tthis.error( tthis.config.messages.offensive_reason, ref["comment-offensive-error"]);
                }else if(reason == "Others"){
                    var reasonVal = ref.offensive_popup_reason.val().trim();
                    if(!reasonVal || reasonVal == ""){
                        tthis.error( tthis.config.messages.offensive_reason_text, ref["comment-offensive-error"]);
                        reason = null;
                    } else{
                        if(reasonVal.length > 200){
                            tthis.error( tthis.config.messages.offensive_reason_text_limit, ref["comment-offensive-error"]);
                            reason = null;
                        }else{
                            reason = "Others" + ": " + reasonVal;
                        }
//                        tthis.rateOffensive(opinionid,function(errMsg){
//                            if (errMsg) {
//                                tthis.error(errMsg, ref["comment-offensive-error"]);
//                            } else {
//                                tthis.error("", ref["comment-offensive-error"]);
//
//                                if(ref.parent){
//                                    ref.parent.find("[data-action='comment-offensive-already']").show();
//                                    ref.parent.find("[data-action='comment-offensive']").hide();
//                                }
//
//                                ref.offensive_popup.hide();
//                            }
//                        },ref, reason);
                    }
                }

                if(reason){
                    tthis.rate(opinionid, CONSTANT.RATE_TYPE.OFFENSIVE, 0, function(error,resp){
                        if(error){
                            tthis.error( error, ref["comment-offensive-error"]);
                        }else if(!error && ref.parent){
//                            ref.parent.find("[data-action='comment-offensive-already']").show();
//                            ref.parent.find("[data-action='comment-offensive']").hide();
//                            ref.offensive_popup.hide();
                            ref.offensive_popup.addClass("submitted");
                        }


                    }, ref, reason);
                }


//                ref.offensive_popup.find();
            });


            $(tthis.config.wrapper).off("click", "[data-action='offensive_popup_close']");
            $(tthis.config.wrapper).on("click", "[data-action='offensive_popup_close']", function () {
                var ref = ui.getActionReferences(this, tthis.config.comment);

                if(ref.offensive_popup && ref.offensive_popup.hasClass("submitted")){
                    ref.parent.find("[data-action='comment-offensive-already']").show();
                    ref.parent.find("[data-action='comment-offensive']").hide();
                }
                ref.offensive_popup.hide();

                return false;
            });

        };

        times_comments.prototype.attachReplyAction = function () {
            logger.log("Attaching Reply Action");
            var tthis = this;

            $(tthis.config.wrapper).off("click", "[data-action='all_responses']");
            $(tthis.config.wrapper).on("click", "[data-action='all_responses']", function(){
                var tc_level=$(this).data("level"),
                    tc_next=$(this).next();
                while(tc_next.data("level")!=tc_level)
                {   
                    tc_next.slideDown();
                    tc_next=tc_next.next();
                    if(!is.numberOnly(tc_next.data("level"))) {
                        break;
                    }
                }
                $(this).remove();
            });
            
            $(tthis.config.wrapper).off('click',"[data-action='more-response-length']");
            $(tthis.config.wrapper).on("click","[data-action='more-response-length']",function(){
                $(this).parent().hide();
                $(this).parent().next().show();
                event.publish("comment.readmore");
            });
            

            $(tthis.config.wrapper).off("click", "[data-action='comment-reply']");
            $(tthis.config.wrapper).on("click", "[data-action='comment-reply']", function () {
                var ref = ui.getActionReferences(this, tthis.config.comment);
				
                var parent = ref["parent"];
                if (ref["comment-reply"]) {
                    ref["comment-reply"].show();
					if(is.defined(tthis.config.rating) && tthis.config.rating){
						if(userInfo.userRating != null && userInfo.userRating != undefined && userInfo.userRating != "") {
							$(tthis.config.wrapper + " [data-plugin='comment-rating']").val($(tthis.config.wrapper + " [data-plugin='rating-list'] [data-plugin='rating-vaue'][val="+userInfo.userRating+"]").html());
						}
					}
                } else {
                    var commentForm = $(tthis.config.wrapper + " [data-plugin='comment-form']");
                    var commentFormHTML = $("<div>" + commentForm.html()+ "</div>");
					commentFormHTML.find("[data-clear='true']").remove();
                    var tmpl = $.templates( "<div class='" + commentForm.attr("class") + " reply' data-plugin='comment-reply'>" +commentFormHTML.html() + "</div>");
                    parent.append(tmpl.render([
                        {}
                    ]));
					if(is.defined(tthis.config.rating) && tthis.config.rating){
						//$('.readrate').remove();
						if(userInfo.userRating != null && userInfo.userRating != undefined && userInfo.userRating != "") {
							$(tthis.config.wrapper + " [data-plugin='comment-rating']").val($(tthis.config.wrapper + " [data-plugin='rating-list'] [data-plugin='rating-vaue'][val="+userInfo.userRating+"]").html());
						}
					}
                }
                //updated references
                ref = ui.getActionReferences(this, tthis.config.comment);
//                ref["comment-input"].keyup();
//                ref["comment-input"].focus();
                tthis.error("", ref["comment-error"]);
	            //Trigger placeholders
	            $( '[placeholder]' ).blur();
                return false;

            });

            $(tthis.config.wrapper).off("click", "[data-action='toggle_replies']");
            $(tthis.config.wrapper).on("click", "[data-action='toggle_replies']", function () {
                var t=$(this);
                // var tc=t.parent();
                var tc=t.closest('.comment-box');
                var tc_level=tc.data("level");
                var tc_next=tc.next();
                var tstatus=t.attr("data-togglereplies");
                if(is.numberOnly(tc_next.data("level")) && tstatus=="show") {
                    event.publish("comment.togglereplies","Show");
                	t.attr("data-togglereplies","hide");
                	var response_cnt=0;
					while(tc_next.data("level")!=tc_level)
					{   
					    if(response_cnt == 3){
				            tc_next.before('<div class="show_all_responses comment-box level'+(tc_level+1)+'" data-level='+tc_level+' data-action="all_responses"> Show all responses </div>');
				            break;
				        }else{
    						tc_next.slideDown();
    						tc_next=tc_next.next();
    						if(!is.numberOnly(tc_next.data("level"))) {
    						    break;
    					    }
				        }
				        response_cnt++;
					}
                } else {
                    event.publish("comment.togglereplies","Hide");
                	t.attr("data-togglereplies","show");
                	$('.show_all_responses').remove();
					while(tc_next.data("level")!=tc_level)
					{
						tc_next.slideUp();
						tc_next=tc_next.next();
						if(!is.numberOnly(tc_next.data("level"))) {
						    break;
						}
					}
                }
            });

            $(tthis.config.wrapper).off('click','.loadmore');
            $(tthis.config.wrapper).on('click','.loadmore',function(){
                $(this).remove();
                if (tthis.config.loadonscroll == false){
                    tthis.loadComment(tthis.config.commentType, function (data) {
                    }, true, ++tthis.pageCount);
                }
            });

            $(tthis.config.wrapper).off("keyup", "[data-plugin='comment-input']");
            $(tthis.config.wrapper).on("keyup", "[data-plugin='comment-input']", function (e) {
                if (e.keyCode === 27) {//Esc Key
                    var ref = ui.getActionReferences(this, tthis.config.comment);
                    ref["comment-input"].val("");
                    ref["comment-reply"].hide();
                }
            });

            ui.maxlength("[data-plugin='comment-input']", tthis.config.maxchar, function (remainingChar, messageLength) {
                var ref = ui.getActionReferences(this, tthis.config.comment);
                var parent = ref["parent"];
                var charsrem = ref["comment-input-remaining"];
                charsrem.text(remainingChar>=0?remainingChar:0);

                if(tthis.config.messages.maxlength && messageLength > tthis.config.maxchar){
                    tthis.error(tthis.config.messages.maxlength, ref["comment-error"]);
                }  else{
                    tthis.error("", ref["comment-error"]);
                }

            }, tthis.config.wrapper);


            $(tthis.config.wrapper).off("click", "[data-action='comment-close']");
            $(tthis.config.wrapper).on("click", "[data-action='comment-close']", function () {
                var ref = ui.getActionReferences(this, tthis.config.comment);

                var reply = ref["comment-reply"];
                var input = ref["comment-input"];

                input.val("");
                reply.hide();
                tthis.error("", ref["comment-error"]);

                return false;//todo remove this
            });

//            var bbb = $("#badge_tmpl").render([{}]);
//            $(tthis.config.wrapper).on("mouseenter mouseleave","[data-plugin='comment-user-badge']",function(evt){
//                var badge = $(this);
//                var name = badge.attr("data-name");
//                 if(evt.type == "mouseenter"){
//                     logger.log("enter:"+name);
//                     badge.append(bbb);
//                 }else if(evt.type == "mouseleave"){
//                     logger.log("leave:"+name);
//                     $(badge).find(".badge_new").remove();
//                 }
//            });

            tthis.onLoaded(function (tthis) {
//                tthis =  _tthis;   //changing reference of comments input when another set of comments is loaded
//                if(tthis.commentsCacheDate){
                    tthis.updateCachedRating();
//                }

                if (tthis.followee) {
                    tthis.markFollowingAll();
                } else {
                    mytimes.getFollowee(function (data) {
                        tthis.followee = data;
                        tthis.markFollowingAll();
                    });
                }

                lazy.load();
                dynamic.uptime();
            });

            $(tthis.config.wrapper).off("click", "[data-plugin='comment-user-follow']");
            $(tthis.config.wrapper).on("click", "[data-plugin='comment-user-follow']", function () {
                var currentEle = $(this);
                var currentUser = login.getUser();
                var ref = ui.getActionReferences(this, tthis.config.comment);
                var userId = ref.parent.attr("data-userid");
                var userName = ref.parent.attr("data-user");
                if (currentUser && currentUser.getId() != userId) {
                    (function(userId,userName){
                        mytimes.followUser(userId, function (dataa) {
                            tthis.followee = tthis.followee || [];
                            var currFollowee = {_id:userId,F_N:userName} ;
                            tthis.followee.push(currFollowee);
                            tthis.markFollowingId(currFollowee);
                        });
                    }(userId,userName))
                } else {
                    logger.warn("Cannot follow self.");
                }
            });


            $(tthis.config.wrapper).off("click",
                "[data-plugin='comment-post'],[data-plugin='comment-facebook-post'],[data-plugin='comment-twitter-post'],[data-plugin='comment-google-post'],[data-plugin='comment-email-post']");
            $(tthis.config.wrapper).on("click",
                "[data-plugin='comment-post'],[data-plugin='comment-facebook-post'],[data-plugin='comment-twitter-post'],[data-plugin='comment-google-post'],[data-plugin='comment-email-post']", function () {
                    event.publish("comment.post.start");
                    var ref = ui.getActionReferences(this, tthis.config.comment);

                    var parent = ref["parent"];
                    var reply = ref["comment-reply"];
                    var errorElement = ref["comment-error"];
                    var reply_input = ref["comment-input"];


                    var parentid = parent.attr("data-id");
                    var parentlevel = parent.attr("data-level");

                    var rootid = parent.attr("data-id");
                    var rootlevel = parent.attr("data-level");

                    var preventInfinite = 10;
                    var prevParent = parent;
                    while (rootlevel > 1 && --preventInfinite > 0) {
                        prevParent = prevParent.prev();
                        if (prevParent.attr("data-plugin") === "comment") {
                            rootid = prevParent.attr("data-id");
                            rootlevel = prevParent.attr("data-level");
                        } else {
                            break;
                        }
                    }

                    tthis.error("", errorElement);

                    var val = (reply_input.val() === reply_input.attr("placeholder"))?"":reply_input.val().trim();

//                    val = $("<div/>").text(val).html(); // encoded html content
                    if(val){
                        tthis.add(val, parentid, rootid, rootlevel, function (commentObj, errMsg) {
                            tthis.renderComment(commentObj, errMsg);
                            event.publish("comment.post.end");
                        }, false, this);
                    }
                    else{
                         //tthis.renderComment(null, tthis.config.messages.blank);
                           event.publish("comment_error",tthis.config.messages.blank);
                          $(tthis.config.wrapper + " [data-plugin='comment-error']").text(tthis.config.messages.blank);
                    }
//                reply_input.val("");
                    return false; //todo remove
                });

        };

        times_comments.prototype.markFollowingAll = function () {
            var tthis = this;
            var followees = tthis.followee;
            var comments = $(tthis.config.wrapper);
            var user = login.getUser();
            if (user) {
                logger.info("Showing follow links");
                comments.find("[data-plugin='comment-user-follow_wrapper']").show();

                //Hide current user follow
                //Start Added by Amit
                //comments.find("[data-plugin='comment'][data-userid!='" + user.getId() + "'] [data-plugin='comment-user-follow_wrapper']").show();
                comments.find("[data-plugin='comment'][data-userid ='" + user.getId() + "'] [data-plugin='comment-user-follow_wrapper']").hide();
//                comments.find("[data-plugin='comment'][data-userid !='" + user.getId() + "'] [data-plugin='comment-user-follow_wrapper']").removeClass('dont_show');
                // End Added by Amit
                //Mark following
                util.each(followees, function (i, followee) {
                    tthis.markFollowingId(followee);
                });
            } else {
                //Added by Amit
                comments.find("[data-plugin='comment-user-follow_wrapper']").hide();
                logger.info("Follow links : Not logged in.");
            }
        };

        times_comments.prototype.markFollowingId = function (followee) {
            var tthis = this;
            var user = login.getUser();
            var comments = $(tthis.config.wrapper);
            if (user) {
                var foloweeEle = comments.find("[data-userid='" + followee._id + "'] .follow");

                if (foloweeEle && foloweeEle.length > 0) {
                    logger.info("Mark Following : " + user.getFullName() + "(" + user.getId() + ") >> " + followee.F_N + "(" + followee._id + ")");
                    tthis.markFollowing(foloweeEle);
                } else {
                    logger.info("Mark Following : " + user.getFullName() + "(" + user.getId() + ") >> " + followee.F_N + "(" + followee._id + ") " + " - NA");
                }
            } else {
                logger.info("Follow link : Not logged in.");

            }
        };

        times_comments.prototype.markFollowing = function (currentEle) {
            if (currentEle && currentEle.length > 0) {
                currentEle.html("<span class='divider'></span><i class='icon-follow'></i>Following");
                currentEle.removeClass("follow");
                currentEle.addClass("following");
                currentEle.removeAttr("data-plugin");
                currentEle.attr("title", currentEle.attr("title").replace("Follow", "Following"));
            }
        };

        times_comments.prototype.onLoaded = function (callback) {
            event.subscribe("comments.loaded", callback);
        };

        var savedComment = null;
        times_comments.prototype.saveComment = function (comment) {
            savedComment = comment;
            cookie.set("comment" + window.msid, json.stringify(comment), 1, document.location.pathname);
        };

        times_comments.prototype.getSavedComment = function () {
            var commentCookie = cookie.get("comment" + window.msid);
            if (is.defined(commentCookie)) {
                return json.parse(commentCookie);
            }else if(savedComment){
                return savedComment;
            } else {
                return null;
            }
        };

        times_comments.prototype.removeSavedComment = function () {
            savedComment = null;
            return cookie.remove("comment" + window.msid, document.location.pathname);
        };

        times_comments.prototype.loadSavedComment = function () {
            var tthis = this;
            var user = login.getUser();
            var savedComment = tthis.getSavedComment();
            if (savedComment) {
                if(user){
                    if(!tthis.config.rating || savedComment.urs != ''){
                        savedComment.urs = tthis.config.rating ? $.trim(savedComment.urs) : '';
	                    logger.log("Has saved comment and user is logged in.");
	                    logger.log(savedComment);
	                    tthis.attachUserToComment(savedComment, user);
	//                    if(savedComment.type != "comment-email-post") {
	                        tthis.removeSavedComment();
	                        tthis.post(savedComment, function (savedComment, errMsg) {
	                            tthis.renderComment(savedComment, errMsg);	
	                        });
	//                    }
					}	
                } else{
                    logger.log("Saved comment but user not logged in");
                }
            } else{
                logger.log("No Saved comment.");
            }
        };

        times_comments.prototype.verifyEmailComment = function () {
            var url_params = util.getParam();

//            if(!is.empty(url_params.messageid) && !is.empty(url_params.r)){

                var tthis = this;
                tthis.verify( function (commentObj, errMsg) {
                    if(is.object(commentObj)){
                        tthis.renderComment(commentObj, errMsg, true);
                        $(tthis.config.wrapper + " [data-plugin='comment-verified-msg']").show();
                        tthis.removeSavedComment();
                    }
                });
//            }

        };

        times_comments.prototype.saveRatingValidation = function (opinionid, typeid, rateid, val, ref) {
            logger.log("Save Rating: " +this.config.commentType+":" + opinionid);

            var user = login.getUser();
            var userId = user?user.getId():0;

            var rating = ["rateV", opinionid, typeid, rateid];
//            var ratingC = ["rateC", opinionid, typeid, rateid];
            localstoragec.set(rating.join(":"), val || "1", 1, '/');
//            cookie.set(rating.join(":"), val || "1", 1, document.location.pathname);
//            cookie.set(ratingC.join(":"), val || "1", (1/24/60)*7, document.location.pathname);//7 minutes
//            this.commentsCacheUpdated.push(ratingC.join(":"));
        };

        times_comments.prototype.getSavedRatingValidation = function (opinionid, typeid, rateid, ref) {
            var user = login.getUser();
            var userId = user?user.getId():0;

            var rating = ["rateV", opinionid, typeid, rateid];
            var commentCookie = localstoragec.csget(rating.join(":")); //cookie.get(rating.join(":"));
            if (is.defined(commentCookie)) {
                return commentCookie;
            } else {
                return null;
            }
        };

        times_comments.prototype.updateCachedRating = function () {
            var tthis = this;
            var cookies = cookie.getAll();
            var comments = $(tthis.config.wrapper + " #" +this.config.commentType);
            util.each(cookies,function(key,value){
                if(key.indexOf("rateV") === 0/* && tthis.commentsCacheUpdated.indexOf(key) < 0 */) {
//                    if(value == tthis.commentsCacheDate){
                        logger.log("Updating Rating from cookie: " + key);
//                        tthis.commentsCacheUpdated.push(key);
                        var keyArr = key.split(":");
                        var rating = {
                            opinionid:parseInt(keyArr[1],10),
                            typeid:parseInt(keyArr[2],10),
                            rateid:parseInt(keyArr[3],10),
                            commentType:tthis.config.commentType
                        };
                        //todo merge two if cases
                        var eleType = "";
                        switch(rating.typeid){
                            case CONSTANT.RATE_TYPE.AGREE:
                                eleType = "comment-agree-count";
                                break;
                            case CONSTANT.RATE_TYPE.DISAGREE:
                                eleType = "comment-disagree-count";
                                break;
                        }
                        if(eleType != ""){
                            var commentRateCount = comments.find("[data-id='" + rating.opinionid + "']  [data-plugin='" + eleType + "']");
                            var val = parseInt(commentRateCount.text(),10);
                            var cookieVal = parseInt(cookie.get(key),10);
                            if(cookieVal > val){
                                commentRateCount.text(cookieVal);
                                logger.log("Updated Rating from cookie: "+key+" : " + val + " updated to " +cookieVal);
                            }else{
                                //It is already updated
                                logger.log(key+" Already Updated");
                            }
                        }
//                    }else{//Remove cookie because comments have refreshed
                        //cookie.remove(key);
//                    }
                }
            });
        };


//        toi_comments.prototype.saveRating = function (opinionid, typeid, rateid, val, ref) {
//            var rating = ["rate", opinionid, typeid, rateid];
//            cookie.set(rating.join(":"), val || "1", 1, document.location.pathname);
//        };
//
//        toi_comments.prototype.getSavedRating = function (opinionid, typeid, rateid, ref) {
//            var rating = ["rate", opinionid, typeid, rateid];
//            var commentCookie = cookie.get(rating.join(":"));
//            if (is.defined(commentCookie)) {
//                return commentCookie;
//            } else {
//                return null;
//            }
//        };

//        toi_comments.prototype.removeSavedRating = function (opinionid, typeid, rateid) {
//            var rating = ["rate", opinionid, typeid, rateid];
//            return cookie.remove(rating.join(":"), document.location.pathname);
//        };
//
//        toi_comments.prototype.loadSavedRating = function (opinionid, typeid, rateid) {
//            var tthis = this;
//            var user = login.getUser();
//            var savedRating = tthis.getSavedRating(opinionid, typeid, rateid);
//            if (savedRating && user) {
//                logger.log("Has saved rating and user is logged in.");
//                logger.log(savedRating);
//
//                tthis.rate(savedRating.opinionid, savedRating.typeid, savedRating.rateid, function (savedComment) {
//                });
//            }
//        };

        times_comments.prototype.validateRating = function (opinionid, typeid, rateid, ref, callback) {
            logger.log("Validate Rating: " + opinionid);
            var config = this.config;
            var user = login.getUser();
            var savedRating = this.getSavedRatingValidation(opinionid, typeid, rateid, ref);
            if (ref) {
                if (user && ref.parent && ref.parent.attr("data-userid") == user.getId()) { //Own comment
                    switch (typeid) {
                        case CONSTANT.RATE_TYPE.AGREE:
                            callback(config.messages.self_agree);
                            break;
                        case CONSTANT.RATE_TYPE.DISAGREE:
                            callback(config.messages.self_disagree);
                            break;
                        case CONSTANT.RATE_TYPE.RECOMMEND:
                            callback(config.messages.self_recommend);
                            break;
                        case CONSTANT.RATE_TYPE.OFFENSIVE:
                            callback(config.messages.self_offensive);
                            break;
                    }
                } else if (savedRating && savedRating > 0) {
                    switch (typeid) {
                        case CONSTANT.RATE_TYPE.AGREE:
                            callback(config.messages.already_agree);
                            break;
                        case CONSTANT.RATE_TYPE.DISAGREE:
                            callback(config.messages.already_disagree);
                            break;
                        case CONSTANT.RATE_TYPE.RECOMMEND:
                            callback(config.messages.already_recommended);
                            break;
                        case CONSTANT.RATE_TYPE.OFFENSIVE:
                            callback(config.messages.already_offensive);
                            break;
                    }
                } else if (this.getSavedRatingValidation(opinionid, CONSTANT.RATE_TYPE.AGREE, rateid, ref) && typeid == CONSTANT.RATE_TYPE.DISAGREE) {
                    callback(config.messages.cant_agree_disagree);
                } else if (this.getSavedRatingValidation(opinionid, CONSTANT.RATE_TYPE.DISAGREE, rateid, ref) && typeid == CONSTANT.RATE_TYPE.AGREE) {
                    callback(config.messages.cant_agree_disagree);
                } else if (this.getSavedRatingValidation(opinionid, CONSTANT.RATE_TYPE.AGREE, rateid, ref) && typeid == CONSTANT.RATE_TYPE.OFFENSIVE) {
                    callback(config.messages.cant_agree_offensive);
                } else if (this.getSavedRatingValidation(opinionid, CONSTANT.RATE_TYPE.OFFENSIVE, rateid, ref) && typeid == CONSTANT.RATE_TYPE.AGREE) {
                    callback(config.messages.cant_agree_offensive);
                } else if (this.getSavedRatingValidation(opinionid, CONSTANT.RATE_TYPE.DISAGREE, rateid, ref) && typeid == CONSTANT.RATE_TYPE.RECOMMEND) {
                    callback(config.messages.cant_disagree_recommend);
                } else if (this.getSavedRatingValidation(opinionid, CONSTANT.RATE_TYPE.RECOMMEND, rateid, ref) && typeid == CONSTANT.RATE_TYPE.DISAGREE) {
                    callback(config.messages.cant_disagree_recommend);
                } else if (this.getSavedRatingValidation(opinionid, CONSTANT.RATE_TYPE.OFFENSIVE, rateid, ref) && typeid == CONSTANT.RATE_TYPE.RECOMMEND) {
                    callback(config.messages.cant_recommend_offensive);
                } else if (this.getSavedRatingValidation(opinionid, CONSTANT.RATE_TYPE.RECOMMEND, rateid, ref) && typeid == CONSTANT.RATE_TYPE.OFFENSIVE) {
                    callback(config.messages.cant_recommend_offensive);
                } else {
                    callback();
                }
            } else {
                logger.error("Cannot validate rating. 'ref' is undefined.");
            }
        };

        times_comments.prototype.validateComment = function (commentObj, callback, ref) {
            event.publish("comment.post.validating");
            var comment = commentObj.comment;
            var config = this.config;

            logger.info("Validating Comment: " + comment);
			commentObj.urs = (commentObj.urs === '') ? undefined : commentObj.urs ; 
            if (is.empty(comment)) {
                callback(config.messages.blank);
            } else if (is.url(comment)) {
                callback(config.messages.has_url);
            } else if (comment.length < config.validation.minlength) {
                callback(config.messages.minlength);
            } else if(is.defined(this.config.rating) && this.config.rating && (!is.defined(commentObj.urs))){
                callback(config.messages.ratemendate);
            } else{
                var msgObj = this.commentObjToMsgObj(commentObj);
//                var validate_url = config.validate_url;
                msgObj.message = msgObj.message.toLowerCase();
                api.validateComment(msgObj,function (response) {
                    if (response === "duplicatecontent") {
                        event.publish("comment.post.validation.failed",response);
                        callback(config.messages.duplicate);
                    } else if (response === "abusivecontent") {
                        event.publish("comment.post.validation.failed",response);
                        callback(config.messages.abusive);
                    } else {
                        event.publish("comment.post.validated");
                        callback();
                    }
                });

//                ajax.post(validate_url, msgObj, function (response) {
//                    if (response === "duplicatecontent") {
//                        event.publish("comment.post.validation.failed",response);
//                        callback(config.messages.duplicate);
//                    } else if (response === "abusivecontent") {
//                        event.publish("comment.post.validation.failed",response);
//                        callback(config.messages.abusive);
//                    } else {
//                        event.publish("comment.post.validated");
//                        callback();
//                    }
//                }).error(function(event,xhr, e){
//                    event.publish("comment.post.error",e);
//                });
            }
        };

        times_comments.prototype.add = function (msg, parentId, rootId, level, callback, cnsl, currentEle) {
            logger.info("Adding Comment: " + msg);
			var tthis = this;
	        $(tthis.config.wrapper + " [data-plugin='comment-verified-msg']").hide(); //todo move to reset function           

            var config = this.getConfig();
            var user = login.getUser();

            var ref = ui.getActionReferences(currentEle, tthis.config.comment);//todo optimize
			
			/*if($("[data-plugin='comment-rating']").length > 0){
				var rating_input = $("input[data-plugin='comment-rating']").val().trim();
				 if ($("input[data-plugin='comment-rating']:first").val().trim() == "Rate this movie") {
					this.error("Please rate before review", ref["comment-error"]);
					return;
				}
			}*/

            var commentObj = {
                index: -1,
                id: -1,
                comment: msg.trim(),
                level: level || 1,
                parentId: parentId || 0,
                rootId: rootId || 0,
                parentuid: ref.parent ? ref.parent.attr("data-id") : null,
                parentusername: ref.parent ? ref.parent.attr("data-user") : null,
                type: currentEle ? $(currentEle).attr("data-plugin") : "comment-post",
                time: new Date().getTime(), //todo user server time,
                configid:"41083278",
                url:window.location.href.split("?")[0].split("#")[0],
                rotype: typeof tthis.config.rotype == 'undefined' ? 0 : tthis.config.rotype, // for article by default
				urs: typeof userInfo === 'object' ?  userInfo.userRating : ''
				
            };
			/*if(typeof userInfo === 'object'){
				commentObj.urs = userInfo.userRating;
			}*/
            var facebookCheckbox = ref["comment-facebook"];
            var twitterCheckbox = ref["comment-twitter"];

            commentObj.social = [];
            if (facebookCheckbox && facebookCheckbox.is(':checked')) {
                commentObj.social.push("facebook");
            }

            if (twitterCheckbox && twitterCheckbox.is(':checked')) {
                commentObj.social.push("twitter");
            }



            if(!user){
                var cmtUser = (commentObj.type == "comment-post"?this.getCommentUser(ref):null);
                if(is.object(cmtUser))  {
                    user = cmtUser;
                }else if(cmtUser){
                    return;
                }
            }


            if (user) {
                
                
                tthis.attachUserToComment(commentObj, user);

                if (cnsl === true) {
//                    console.log(msgObj);
                    if (callback) {
                        callback(commentObj);
                    }
                } else {
                    tthis.post(commentObj, callback);
                }
                //todo add class .highlight
            } else {
//                this.validateComment(commentObj, function (error) {
//                    if (!is.empty(error)) {
//                        if (callback) {
//                            callback(commentObj, error);
//                        }
//                        return;
//                    }

                    switch (commentObj.type){
                        case "comment-facebook-post":
                            tthis.commentOnFacebook(commentObj,ref);
                            break;
                        case "comment-google-post":
                            tthis.commentOnGoogle(commentObj,ref);
                            break;
                        case "comment-twitter-post":
                            tthis.commentOnTwitter(commentObj,ref);
                            break;
                        case "comment-email-post":
                            tthis.commentUsingEmail(commentObj,ref);
                            break;
                        default:
                            tthis.commentWithoutLogin(commentObj,ref);
                            break;
                    }

//                },ref);
            }


            /*
             //http://timesofindia.indiatimes.com/fbpostcomment.cms?article=http://timesofindia.indiatimes.com/city/delhi/Thieves-who-stole-judges-car-held/articleshow/26115345.cms&access_token=CAABrIHwVZA2UBACX0gAvHb8VBrOCmK6F3fmNZCSY8UL86A9wjUBwZAZChjmV3Np4VaBV41DYJNhagZA83pipQaacl66yYxNSzVsoZCi2CqWZCgfT22WfYHf9f3JzgYD11LxptjZCxZCjDdxdZA6K5BcLijMNDCv8JScHqmoMrOq9F6l5C2G5VDP3v2q699gbfwPtYo3YSGx8CLrwZDZ
             */
        };

        times_comments.prototype.getCommentUser = function(ref) {
            var config = this.config;

            var $get_user_name = ref['get-user-name'];
            var $get_user_email = ref['get-user-email'];
            var $get_user_location = ref['get-user-location'];
            var $set_user_captcha =ref['set-user-captcha'];
            var $get_user_captcha = ref['get-user-captcha'];

            if($get_user_name && $get_user_email && $get_user_name.length > 0 && $get_user_email.length > 0){
                var user = {};

                user.name = $get_user_name.val().trim();
                user.email = $get_user_email.val().trim();
                if($get_user_location && $get_user_location.length > 0){
                    user.location = $get_user_location.val().trim();
                }

                if(user.name.length == 0 || user.name == $get_user_name.attr("placeholder")){
                    this.error(config.messages.name_required, ref["comment-error"]);
                    return true;
                }

                if(user.name.length > 30){
                    this.error(config.messages.name_toolong, ref["comment-error"]);
                    return true;
                }

                if(!is.alphaOnly(user.name)){
                    this.error(config.messages.name_not_string, ref["comment-error"]);
                    return true;
                }
                
                
                if(user.email.trim().length == 0 || user.email == $get_user_email.attr("placeholder")){
                    this.error(config.messages.email_required, ref["comment-error"]);
                    return true;
                }

                if(!is.email(user.email.trim())){
                    this.error(config.messages.email_invalid, ref["comment-error"]);
                    return true;
                }

                if($get_user_location && $get_user_location.length > 0){
                    if(user.location.length == 0 || user.location == $get_user_location.attr("placeholder")){
                        this.error(config.messages.location_required, ref["comment-error"]);
                        return true;
                    }

                    if(user.location.length > 30){
                        this.error(config.messages.location_toolong, ref["comment-error"]);
                        return true;
                    }

                    if(!is.alphaOnly(user.location)){
                        this.error(config.messages.location_not_string, ref["comment-error"]);
                        return true;
                    }
                }

                if($get_user_captcha && $get_user_captcha.val().trim().length == 0 ){
                    this.error(config.messages.captcha_required, ref["comment-error"]);
                    return true;
                }

                if($get_user_captcha && $get_user_captcha.val().trim().length > 4){
                    this.error(config.messages.captcha_toolong, ref["comment-error"]);
                    return true;
                }

                if($get_user_captcha && !is.numberOnly($get_user_captcha.val().trim())){
                    this.error(config.messages.captcha_number_only, ref["comment-error"]);
                    return true;
                }

                if($set_user_captcha && $get_user_captcha &&!eval($set_user_captcha.text() + "=" + $get_user_captcha.val())){
                    this.error(config.messages.captcha_invalid, ref["comment-error"]);
                    return true;
                }



                return userClass.getNewUser(user,{
                        "id": "id",
                        "username": "username",
                        "thumb": "thumb",
                        "email": "email",
                        "name": "name",
                        "fullName": "name",
                        "CITY": "location"
                });

//                app: "toiipad",
//                    useripaddress: "202.134.162.148",
//                    location: "India",
//                    fromname: "Lawrance",
//                    fromaddress: "darrylthebest@gmail.com",
//                    rotype: 0

            }
        };
        times_comments.prototype.commentOnFacebook = function (commentObj, ref) {
            var tthis  = this;
            var domainOnly = util.getDomainOnly();
//            commentObj.social.push("facebook");
            tthis.saveComment(commentObj);
            cookie.set("clickkepfbtart", "1", 1, "/", domainOnly);
            cookie.set("clickkepfbtart" + window.msid, window.msid, 1, "/", domainOnly);
            login.loginWithFacebook(function(){
                tthis.loadSavedComment();
            }, 'comment');
        };

        times_comments.prototype.commentOnGoogle = function (commentObj, ref) {
            var tthis  = this;
//            commentObj.social.push("google");
            tthis.saveComment(commentObj);
            login.loginWithGoogle(function(){
                tthis.loadSavedComment();
            }, 'comment');
        };

        times_comments.prototype.commentOnTwitter = function (commentObj, ref) {
            var tthis  = this;
            var domainOnly = util.getDomainOnly();
//            commentObj.social.push("twitter");
            tthis.saveComment(commentObj);
            cookie.set("clickkeptwtart", "1", 1, "/", domainOnly);
            cookie.set("clickkeptwtart" + window.msid, window.msid, 1, "/", domainOnly);
            login.loginWithTwitter(function(){
                tthis.loadSavedComment();
            });
        };

        times_comments.prototype.commentUsingEmail = function (commentObj, ref) {
            var tthis  = this;
            var domainOnly = util.getDomainOnly();
            tthis.saveComment(commentObj);
            cookie.set("clickkepssoart", "1", 1, "/", domainOnly);
            cookie.set("clickkepssoart" + window.msid, window.msid, 1, "/", domainOnly);
            login.login(function(){
                tthis.loadSavedComment();
            });
        };

//        toi_comments.prototype.commentWithoutLogin = function (commentObj, ref) {
//            if (window.resetRegisterForm1 && window.putMathQ && window.lightbox2n) {    //todo, this is toi specific and is bad code, couldn't help it
//                window.resetRegisterForm1();
//                $("#registerForm1 #comments").val(commentObj.comment);
//                $("#registerForm1 #parentid").val(commentObj.parentId);
//                $("#registerForm1 #rootid").val(commentObj.rootId);
//
//                window.putMathQ(4);
//                window.lightbox2n();
//                window.scrollTo(0, 0);
//
//                var input = ref["comment-input"];
//                if (input) {
//                    input.val("");
//                    input.keyup();
////                    input.focus();
//                }
//            } else {
//                logger.error("'window.resetRegisterForm1 or window.putMathQ or window.lightbox2n' is not defined.");
//            }
//            this.loadSavedComment();
//        };


        times_comments.prototype.commentWithoutLogin = function (commentObj, ref) {
            var tthis = this;
            var domainOnly = util.getDomainOnly();

            tthis.saveComment(commentObj);
            cookie.set("clickkepssoart","1",1,"/",domainOnly);
            cookie.set("clickkepssoart"+window.msid,window.msid,1,"/",domainOnly);
            login.login(function(){
                if(!(tthis.config.rating)){
                    tthis.loadSavedComment();
                }
            });
        };
        /**
         * Verify comment posted using email
         *
         * @param commentObj
         * @param callback
         */
        times_comments.prototype.verify = function (callback, ref) {
            //http://timesofindia.indiatimes.com/cmtverified/29255491.cms?cmtid=23834874&r=1393492740078
            var tthis = this;
            var url = tthis.config.verify_comment_url;

            var msgObj = {
                msid:window.msid,
                cmtid:null,//ActionParams > messageid
                r:null//ActionParams > r
            };
            var url_params = util.getParam();
            if (window.messageid && window.param_r) {
                msgObj.cmtid = window.messageid;
                msgObj.r = window.param_r;
            }
            else{
                msgObj.cmtid = url_params.messageid;
                msgObj.r = url_params.r;
            }

            if(msgObj.msid && msgObj.cmtid && msgObj.r){
	            logger.info("Verifying Comment.");

	            ajax.get(url, msgObj, function (response) {
                   if( response.cmtverified.commentbyid &&  response.cmtverified.commentbyid.roaltdetails){
                       var cmt = response.cmtverified.commentbyid;
                       cmt.roaltdetails =  cmt.roaltdetails.roaltdetails;

                       var commentObj = {
                           index: -1,
                           id: -1,
                           comment: is.string(cmt.message) ? $("<div/>").text(cmt.message).html() : "",
                           level: 1,
                           parentuid: cmt.parentuid,
                           parentusername: cmt.parentusername,
                           abstime: msgObj.r ? util.getDate(msgObj.r).getTime():"",//1384934349412,    //cmt.rodate //19 Nov, 2013 01:04 PM
                           time: msgObj.r,
                           type: "comment-post",
                           user: {
                               name: cmt.roaltdetails.fromname ,
                               location: cmt.roaltdetails.location
                           }
                       };


                        if (callback) {
                            callback(commentObj);
                        }
                   }else{
                       if (callback) {
                           callback(null,{});
                       }
                   }
                });
            }

	        if(url_params.register === "1"){
		        logger.info("Display register window.");

		        if(!login.getUser()){
		            login.login();
		        }
	        }
        };
        times_comments.prototype.post = function (commentObj, callback, ref) {
            var tthis = this;
//            var url = this.config.post_url;


            

//            if (!is.empty(commentObj.social)) {
//                if (commentObj.social.indexOf("facebook") > -1) {//todo use common function
//                    tthis.postToFacebook(commentObj.comment, function () {
//                        if (commentObj.social.indexOf("twitter") > -1) {//open twitter dialog after fb dialog closes
//                            tthis.postToTwitter(commentObj.comment);
//                        }
//                    });
//                } else if (commentObj.social.indexOf("twitter") > -1) {
//                    tthis.postToTwitter(commentObj.comment);
//                } else if (commentObj.social.indexOf("google") > -1) {
//                    tthis.postToGoogle(commentObj.comment);
//                }
//            }


            /*if (!is.empty(commentObj.social)) {
                if(is.defined(tthis.config.rating) && tthis.config.rating){
                    if( is.defined(tthis.config.moviename) && tthis.config.moviename){
                        // for movie review
                        var socialtext = "Movie: "+tthis.config.moviename+", My Rating "+(commentObj.urs/2)+"/5. "+commentObj.comment;
                        tthis.postToSocial(socialtext,commentObj.social.join(","));
                    }
                }
                else{
                    tthis.postToSocial(commentObj.comment,commentObj.social.join(","));
                }
            }*/

            if (!is.empty(commentObj.social)) {
                if(is.defined(tthis.config.rating) && tthis.config.rating ){
                    if(is.defined(tthis.config.moviename) && tthis.config.moviename){
                        // for movie review
                        var socialtext = "Movie: "+tthis.config.moviename+", My Rating "+(commentObj.urs/2)+"/5. "+commentObj.comment;
                        tthis.postToSocial(socialtext,commentObj.social.join(","));
                    }
                    else if(is.defined(tthis.config.techprdtname) && tthis.config.techprdtname){
                        // for tech prdt review
                        var socialtext = tthis.config.techprdtname+" : "+"My Rating "+(commentObj.urs/2)+"/5, "+commentObj.comment;
                        tthis.postToSocial(socialtext,commentObj.social.join(","));
                    }
                }
                else{
                    tthis.postToSocial(commentObj.comment,commentObj.social.join(","));
                }
            }


            //todo move to api
            tthis.validateComment(commentObj, function (error) {
                if (!is.empty(error)) {
                    if (callback) {
                        callback(commentObj, error);
                    }
                    return;
                }
                event.publish("comment.post.posting");
                logger.info("Posting Comment:" + commentObj.comment);


                var msgObj = tthis.commentObjToMsgObj(commentObj);
                msgObj.pcode = page.getChannel();

                //todo implemente and check commented code.
                if(tthis.config.sendCommentLiveEmail === false){
                    msgObj.verifyuser = 1; //comment is posted, email is not sent
	                api.postCommentWithoutVerification(msgObj,function (response) {
	                    if(typeof tempname != 'undefined' && tempname === 'articleshow'){
	                        ga( 'send', 'event', 'Articleshow_comment|WEB', 'submit' );
	                    }
		                event.publish("comment.post.posted");
		                if (callback) {
			                callback(commentObj);
		                }
	                });
                }else{
                    if(tthis.config.enableparam  && msgObj.rotype != 0){
                        msgObj.url = msgObj.url + '?' + window.location.search.replace("?", "").split("&")[0] + '&';
                        msgObj.configid = '46516605'; // to handle param include
                    }
                    else if(msgObj.rotype != 0){
                        msgObj.url = msgObj.url + '?';
                    }
                    api.postComment(msgObj,function (response) {
                        if(typeof tempname != 'undefined' && tempname === 'articleshow'){
	                        ga( 'send', 'event', 'Articleshow_comment|WEB', 'submit' );
	                    }
                        event.publish("comment.post.posted");
                        if (callback) {
                            callback(commentObj);
                        }
                    });
                }

//                ajax.post(url, msgObj, function (response) {
//                        event.publish("comment.post.posted");
//                        if (callback) {
//                            callback(commentObj);
//                        }
//                    })
//                    .error(function(event,xhr,e){
//                        event.publish("comment.post.error",e);
//                    });

            },ref);
        };

        times_comments.prototype.commentObjToMsgObj = function (commentObj) {
            var config = this.config;//getConfig();

            var msgObj = {
                //                    hostid:83,//259:travel
                //                    rchid:-2128958273,//2147477992:travel
                fromname: commentObj.user ? commentObj.user.name : null,
                fromaddress: commentObj.user ? commentObj.user.email : null,
                userid: commentObj.user ? (commentObj.user.id?commentObj.user.uid:"qrst") : "qrst", // todo use SSO
//                fbemailid: commentObj.user ? commentObj.user.email : null,//todo use fb email
                location: commentObj.user ? commentObj.user.location : null,
                imageurl: commentObj.user ? commentObj.user.image : null,
                loggedstatus: commentObj.user && commentObj.user.id ? 1 : 0,

                message: commentObj.comment,
                roaltdetails: 1,
                ArticleID: config.msid,
                msid: config.msid,
                parentid: commentObj.parentId,
                rootid: commentObj.rootId,
                url:commentObj.url,
                configid:commentObj.configid,
				urs:commentObj.urs ? commentObj.urs : null,
				rotype:commentObj.rotype
            };

            if(!commentObj.user.id){
                msgObj.verifyuser = 1; //To prevent sending "You comment is live mail" in case of non-logged in user.
            }
            return msgObj;
        };

        times_comments.prototype.error = function (errMsg, wrapper) {
            if (is.visible(wrapper)) {
                wrapper.text(errMsg);
            } else if (!is.empty(errMsg)) {
                alert(errMsg);
            }
            event.publish("comment_error",errMsg);
        };

        times_comments.prototype.rateAgree = times_comments.prototype.rateUpVote = function (opinionid, callback, ref) {
//            login.loginType(15);
            logger.log("Agree Comment: " + opinionid);
            this.rate(opinionid, CONSTANT.RATE_TYPE.AGREE, 0, callback, ref);
//            login.loginType();
            //http://timesofindia.indiatimes.com/ratecomment_new.cms?opinionid=22554141&typeid=100&rateid=1
            //http://myt.indiatimes.com/mytimes/addActivity?activityType=Agreed&appKey=TOI&parentCommentId=22554141&baseEntityType=ARTICLE&objectType=A&url=
        };

        times_comments.prototype.rateDisagree = times_comments.prototype.rateDownVote = function (opinionid, callback, ref) {
//            login.loginType(16);
            logger.log("Disagree Comment: " + opinionid);
            this.rate(opinionid, CONSTANT.RATE_TYPE.DISAGREE, 0, callback, ref);
//            login.loginType();
            //http://timesofindia.indiatimes.com/ratecomment_new.cms?opinionid=22587427&typeid=101&rateid=1
            //http://myt.indiatimes.com/mytimes/addActivity?activityType=Disagreed&appKey=TOI&parentCommentId=22587427&baseEntityType=ARTICLE&objectType=A&url=
        };

        times_comments.prototype.rateRecommend = function (opinionid, callback, ref) {
//            login.loginType(17);
            logger.log("Recommend Comment: " + opinionid);
            this.rate(opinionid, CONSTANT.RATE_TYPE.RECOMMEND, 0, callback, ref);
//            login.loginType();
            //http://timesofindia.indiatimes.com/ratecomment_new.cms?opinionid=22587134&typeid=102&rateid=1
            //http://myt.indiatimes.com/mytimes/addActivity?activityType=Reccomended&appKey=TOI&parentCommentId=22587134&baseEntityType=ARTICLE&objectType=A&url=
        };

        times_comments.prototype.flag = times_comments.prototype.rateOffensive = function (opinionid, callback, ref, reason) {
            var tthis = this;
            logger.log("Flag/Offensive Comment: " + opinionid);

            $(ref.offensive_popup).off("click");
            $(ref.offensive_popup).on("click", function () {
                var ref = ui.getActionReferences(this, tthis.config.comment);
                var valReason = ref.offensive_popup.find("input:checked").val();
                if(valReason && valReason.length > 0 && valReason == "Others"){
                    ref.offensive_popup_reason.show();
                }else{
                    ref.offensive_popup_reason.hide();
                }

                tthis.error("",  ref["comment-offensive-error"]);

//                return false;
            });
            event.publish("comment.flag.show",ref.offensive_popup);
            ref.offensive_popup.show();
            return;
            /*
             Find this comment offensive?
             Choose your reason below and click on the Submit button. This will alert our moderators to take action
             Reason for reporting:
             Foul language
             Defamatory
             Inciting hatred against a certain community
             Out of context/Spam
             Others

             */

//            //todo remove dependency on articleshow, use common rating.
//            var tthis = this;
//            //todo code repeated in rating also
//            var rating = {opinionid: opinionid, typeid: CONSTANT.RATE_TYPE.OFFENSIVE, rateid: 0};
//
//            var user = login.getUser();
//
//            if (user) {
//                this.validateRating(opinionid, rating.typeid, rating.rateid, ref, function (error) {
//                    if (!is.empty(error)) {
//                        if (callback) {
//                            callback(error);
//                        }
//                        return;
//                    }
//                    tthis.rate(opinionid, CONSTANT.RATE_TYPE.OFFENSIVE, rating.rateid, callback, ref);
//                });
//            } else {
//                (function (rating, callback, ref) {
//                    login.login(function () {
//                        tthis.rateOffensive(rating.opinionid, callback, ref);
//                    }, true);
//                }(rating, callback, ref));
//            }

            //http://timesofindia.indiatimes.com/offensiveService/offence.asmx/getOffencivecomment?ofusername=delsanic&ofreason=Out%20of%20context/Spam&ofcommenteroid=22586038&ofcommenthostid=83&ofcommentchannelid=-2128958273&ofcommentid=29127171&ofuserisloggedin=1&ofuserssoid=delsanic@gmail.com&ofuseremail=delsanic@gmail.com
            //http://timesofindia.indiatimes.com/ratecomment_new.cms?opinionid=22586038&typeid=103&rateid=1
        };

        times_comments.prototype.showRateOffensiveBox = function (opinionid, callback, ref) {
//            ref.current.find('[data-plugin="offensive_popup"]').show();
//            ref.current.find('[data-plugin="offensive_popup_submit"]').show();
//            ref.current.find('[data-plugin="offensive_popup_close"]').show();

        };

        times_comments.prototype.rate = function (opinionid, typeid, rateid, callback, ref, reason) {
            logger.log("Rate Comment: " + opinionid + ":" + typeid);
            var tthis = this;

            var rating = {opinionid: opinionid, typeid: typeid, rateid: rateid || 0};

            if(reason){
                rating.ofreason = reason;
            }

            var user = login.getUser();

            if (user) {
                logger.log("Rate Comment user is logged in");
                this.validateRating(opinionid, typeid, rateid, ref, function (error) {
                    if (!is.empty(error)) {
                        if (callback) {
                            callback(error);
                        }
                        return;
                    }
                    var val = parseInt(ref["comment-agree-count"].text(),10);
                    tthis.saveRatingValidation(opinionid, typeid, rateid, val + 1, ref);
                    api.rateComment(rating, function (resp) {
                        if (callback) {
                            callback(null, resp);
                        }
                    },user);
//                    ajax.get(tthis.config.rate_url, rating, function (resp) {
//                        if (callback) {
//                            callback(null, resp);
//                        }
//                    });
                });
            } else {
                logger.log("Rate Comment user is NOT logged in, login prompted.");
                (function (rating, callback, ref) {
                    if(tthis.config.loginRequiredForRating === true){
                        login.login(function () {
                            logger.log("Rate Comment user logged in, continue rating.");
                            tthis.rate(rating.opinionid, rating.typeid, rating.rateid, callback, ref, rating.reason);
                        }, true);
                    }else{
                        logger.log("Rate Comment user NOT logged in, continue rating.");
                        tthis.validateRating(rating.opinionid, rating.typeid, rating.rateid, ref, function (error) {
                            if (!is.empty(error)) {
                                if (callback) {
                                    callback(error);
                                }
                                return;
                            }
                            var val = parseInt(ref["comment-agree-count"].text(),10);
                            tthis.saveRatingValidation(rating.opinionid, rating.typeid, rating.rateid, val + 1, ref);
                            api.rateComment(rating, function (resp) {
                                if (callback) {
                                    callback(null, resp);
                                }
                            });

//                            ajax.get(tthis.config.rate_url, rating, function (resp) {
//                                if (callback) {
//                                    callback(null, resp);
//                                }
//                            });
                        });
                    }
                }(rating, callback, ref));
            }

        };

        times_comments.prototype.renderComment = function (commentObj, errMsg, verified) {
            var tthis = this;
            var isPrimeUser = primeuserhandler.isPrimeActiveUser();
            if (isPrimeUser && commentObj && commentObj.user) {
                commentObj.user.isPrime = true;
            }
            if (commentObj) {
                var ref = ui.getActionReferences(tthis.config.wrapper +" [data-id='" + commentObj.parentId + "']");

                var parent = ref["parent"];
                var input = ref["comment-input"];
                var facebookCheckbox = ref["comment-facebook"];
                var twitterCheckbox = ref["comment-twitter"];

                if (errMsg) {
                    event.publish("comment.post.error",errMsg);
                    this.error(errMsg, ref["comment-error"]);
                } else {
                    event.publish("comment.post.rendering");
                    commentObj.comment =  $("<div/>").text(commentObj.comment).html();
                    commentObj.user.rate = commentObj.urs;
                    if($(tthis.config.wrapper + " .comment-verification-msg").length){$(tthis.config.wrapper +" .comment-verification-msg").remove();}
                    if (this.isReply(commentObj)) {
                        var reply = ref["comment-reply"];						
                        //Convert to number if level is not a number
                        if(!is.number(commentObj.level)){
                            commentObj.level = parseInt(commentObj.level,10);
                        }
                        ++commentObj.level; //TODO check if level needs to be increased.

                        if((commentObj && commentObj.user && commentObj.user.id) || !ref['set-user-captcha']){
                            parent.after(this.renderEach(-1, commentObj, true));
                            reply.hide();
                        } else{ 
                            parent.after("<div class='comment-box highlight comment-verification-msg'>"+$(tthis.config.wrapper + " [data-plugin='comment-verification-msg']").html()+"</div>");
                            reply.hide();
                        }
                    } else {
                        if((commentObj && commentObj.user && commentObj.user.id) || verified == true || !ref['set-user-captcha']){
                            $(tthis.config.wrapper+' '+this.config.main).prepend(this.renderEach(-1, commentObj, true));
                        }else{
                            $(tthis.config.wrapper+' '+this.config.main).prepend("<div class='comment-box highlight comment-verification-msg'>"+$(tthis.config.wrapper + " [data-plugin='comment-verification-msg']").html()+"</div>");
                        }
                    }

                    if (input) {
                        input.val("");
                        input.keyup();
                        input.focus();
                        if(facebookCheckbox){
                            facebookCheckbox.prop('checked', false);
                        }
                        if(twitterCheckbox){
                            twitterCheckbox.prop('checked', false);
                        }

                        var $get_user_captcha = ref['get-user-captcha'];
                        var $set_user_captcha = ref['set-user-captcha'];
                        if($get_user_captcha){
                            $get_user_captcha.val("");
                        }
                        if($set_user_captcha){
                            $set_user_captcha.text(Math.floor((Math.random()*10)) +"+" +Math.floor((Math.random()*10)) +"=");
                        }
                    }
                    this.error("", ref["comment-error"]);
                }
				//
                lazy.load();
            } else {
                this.error(errMsg);
            }

        };

        times_comments.prototype.renderUsingTemplate = function (index, dataOne, tmpl, prepend) {
            return $("#" + tmpl).render(dataOne, {
                formatNumber: function (val) {
                    return util.formatNumber(val);
                },
                timeToDate:function(time){
                    return new Date(time);
                }, parseDate: function (time) {
                    if (jsonDate != null) {
                        var date = new Date(time);
                        var newDate = $.fullCalendar.formatDate(date, "MMM dd, yyyy");
                        return newDate;
                    }
                }
            });
        };

        times_comments.prototype.isReply = function (cmt) {
            return cmt.parentuid && cmt.parentusername;
        };

//        toi_comments.prototype.parseTmpl = function (data) {
//            return $("#tmpl1").render(data, { formatNumber: function (val) {
//                return util.formatNumber(val);
//            }});
//        };

        times_comments.prototype.loadingDiv = function (text) {
            var tthis = this;
            if (text === "Loading...") {
                $(tthis.config.wrapper + " [data-plugin='comment-loading']").show();
            } else {
                $(tthis.config.wrapper + " [data-plugin='comment-loading']").hide();
            }
        };

        return times_comments;
    });
    
    
    
    define('localstoragec',["tiljs/cookie"], function (cookie) {
            var mod_local = {};
            mod_local.isEnabled = function () {
                return typeof ( Storage ) !== "undefined";
            };
            mod_local.checkExpiry = function (key) {
                var obj = localStorage.getItem(key);
                if (obj && !( obj.hasOwnProperty("timestamp") && obj.hasOwnProperty("expires") )) return key;
                if (obj && (Number(new Date().getTime()) - Number(obj.timestamp) > Number(obj.expires) * 60 * 60 * 24 * 1000 )) {
                    localStorage.removeItem(key);
                    return;
                }
                return key;
            };
            mod_local.set = function (name, value, expires, path, domain, secure) {
                try {
                    var object = {
                        "value": value,
                        timestamp: new Date().getTime(),
                        "expires": expires
                    };
                    localStorage.setItem(name, JSON.stringify(object));
                } catch (e) {
                    cookie.set(name, value, expires, path, domain, secure);
                }
            };
            mod_local.get = function (key) {
                //return (mod_local.checkExpiry(key))?localStorage.getItem(key):'';
                var val = '';
                try {
                    val = JSON.parse(localStorage.getItem(key));
                } catch (ex) {
                    val = localStorage.getItem(key);
                }
                return ( val && val['value'] ) ? val['value'] : val;
            };
            mod_local.csget = function (key) {
                //return (mod_local.isEnabled() && mod_local.checkExpiry(key))?mod_local.get(key):mod_local.get(key);
                return ( mod_local.isEnabled() && mod_local.get(key) ) ? mod_local.get(key) : cookie.get(key);
            };
            mod_local.remove = function (data) {
                return localStorage.removeItem(data);
            };
            return mod_local;
        });


/*
   Comment Logic
	  Non Logged In with email verification
	     URL: /postro.cms
		 fromname	Del Sanic
		 location	India
		 fromaddress	delsanic@gmail.com
		 message	old ui
		 userid	qrst
		 msid	30937855
		 ArticleID	30937855
		 roaltdetails	1
		 parentid	0
		 rootid	0
		 loggedstatus	0
		 verifyuser	1


	  Non logged in without email verification
	     URL:/postro_nover.cms
		 fromname	Del
		 fromaddress	delsanic@gmail.com
		 userid	qrst
		 location
		 imageurl
		 loggedstatus	0
		 message	wish tmpl
		 roaltdetails	1
		 ArticleID	30937855
		 msid	30937855
		 parentid	0
		 rootid	0
		 url	http://toidev.indiatimes.com/wish/30937855.cms
		 configid	41083278
		 verifyuser	1
		 pcode	TOI


 */;
define('comments',[
		"tiljs/apps/times/comments",
		"tiljs/apps/times/usermanagement",
		"tiljs/logger",
		"tiljs/event",
		"jquery",
		"tiljs/util",
		"module",
		"tiljs/cookie",
		"tiljs/ui",
		"jsrender"
],
	function ( comments, login, logger, event, $, util, module, cookie, ui, jsrender ) {
		var mod_comments = comments;
		var default_config = {
			validation: {
				minlength: 1 //140
			},
			messages: {
				"name_required": "Please enter your name.",
				"name_toolong": "Name cannot be longer than 30 chars.",
				"email_required": "Please enter your email address.",
				"email_invalid": "Please enter a valid email address.",
				"minlength": "Whoops! Your review is too short. Please write a review which is at least 140 characters long so that it is helpful for others as well :)",
				"maxlength": "You have entered more than 3000 characters.",
				"blank": "You can't post this review as it is blank.",
				"popup_blocked": "Popup is blocked.",
				"has_url": "You can't post this review as it contains URL.",
				"duplicate": "You can't post this review as it is identical to the previous one.",
				"abusive": "You can't post this review as it contains inappropriate content.",
				"self_agree": "You can't Agree with your own review",
				"self_disagree": "You can't Disagree with your own review",
				"self_recommend": "You can't Recommend your own review",
				"self_offensive": "You can't mark your own review as Offensive",
				"already_agree": "You have already Agreed with this review",
				"already_disagree": "You have already Disagreed with this review",
				"already_recommended": "You have already Recommended this review",
				"already_offensive": "You have already marked this review Offensive",
				"cant_agree_disagree": "You can't Agree and Disagree with the same review",
				"cant_agree_offensive": "You can't Agree and mark the same review Offensive",
				"cant_disagree_recommend": "You can't Disagree and Recommend the same review",
				"cant_recommend_offensive": "You can't Recommend and mark the same review Offensive",
				"permission_facebook": "You can't post to facebook. Post permission is required."
			}
		};
		mod_comments.config = util.extend( true, {}, comments.config, default_config, module.config() );
		return mod_comments;
	} );

define( 'homepage',[ "tiljs/cookie", "tiljs/load" ], function ( cookie, load ) {
	var mod_homepage = {};
	mod_homepage.init = function () {
		//--GA code--
		//        var _gaq = _gaq || [];
		//        _gaq.push(['_setAccount', 'UA-198011-4']);
		//        _gaq.push(['_setDomainName', 'none']);
		//        _gaq.push(['_setAllowLinker', true]);
		//        _gaq.push(['_addIgnoredOrganic', 'times of india']);
		//        _gaq.push(['_addIgnoredOrganic', 'toi']);
		//        _gaq.push(['_addIgnoredOrganic', 'the times of india']);
		//        _gaq.push(['_addIgnoredOrganic', 'timesofindia']);
		//        _gaq.push(['_addIgnoredOrganic', 'www.timesofindia.com']);
		//        _gaq.push(['_addIgnoredOrganic', 'timesofindia.com']);
		//        _gaq.push(['_addIgnoredOrganic', 'thetimesofindia']);
		//        _gaq.push(['_addIgnoredOrganic', 'time of india']);
		//        _gaq.push(['_addIgnoredOrganic', 'times of india headlines']);
		//        _gaq.push(['_addIgnoredOrganic', 'timesofindia.indiatimes.com']);
		//
		//        _gaq.push(['_trackPageview']);
		//        _gaq.push(['_trackPageLoadTime']);
		//        (function () {
		//            var ga = document.createElement('script');
		//            ga.type = 'text/javascript';
		//            ga.async = true;
		//            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		//            var s = document.getElementsByTagName('script')[0];
		//            s.parentNode.insertBefore(ga, s);
		//        })();
		//        //--GA code end--
		//
		//        //-- Begin comScore Tag --
		//        var _comscore = _comscore || [];
		//        _comscore.push({ c1: "2", c2: "6036484" });
		//        (function () {
		//            var s = document.createElement("script"), el = document.getElementsByTagName("script")[0];
		//            s.async = true;
		//            s.src = (document.location.protocol == "https:" ? "https://sb" : "http://b") + ".scorecardresearch.com/beacon.js";
		//            el.parentNode.insertBefore(s, el);
		//        })();
		//        //-- End comScore Tag --
		//
		//        //--Visual Revenue Reader Response Tracking Script (v6) --
		//        var page = (typeof homeObj != "undefined") ? true : false;
		//        var _vrq = _vrq || [];
		//        _vrq.push(['id', 77]);
		//        _vrq.push(['automate', page]);
		//        _vrq.push(['track', function () {
		//        }]);
		//        (function (d, a) {
		//            var s = d.createElement(a),
		//                x = d.getElementsByTagName(a)[0];
		//            s.async = true;
		//            s.src = 'http://a.visualrevenue.com/vrs.js';
		//            x.parentNode.insertBefore(s, x);
		//        })(document, 'script');
		//
		//        //-- End of VR RR Tracking Script - All rights reserved --
		//
		//        //-- BEGIN EFFECTIVE MEASURE CODE --
		//        (function () {
		//            var em = document.createElement('script');
		//            em.type = 'text/javascript';
		//            em.async = true;
		//            em.src = ('https:' == document.location.protocol ? 'https://in-ssl' : 'http://in-cdn') + '.effectivemeasure.net/em.js';
		//            var s = document.getElementsByTagName('script')[0];
		//            s.parentNode.insertBefore(em, s);
		//        })();
		//        //--END EFFECTIVE MEASURE CODE --
		//
		//        //********************************************
		//        //************** SET GeoLocation *************
		//        //********************************************
		//        //var gloc = times.cookie.get('geolocation')||"";
		//        if (!(cookie.get('geolocation')) || cookie.get('geolocation') == "undefined") {
		//            cookie.remove('geolocation', '/', location.host);
		//            cookie.remove('geolocation', '/', '.indiatimes.com');
		//            var ord = window.ord || Math.floor(Math.random() * 1e16);
		//            load.js("http://ad.doubleclick.net/N7176/adj/TOI_Test/TOI_Test_1x1;sz=1x1;ord=" + ord + "?");
		//            setTimeout(function () {
		//                var gloc = cookie.get('geolocation');
		//                if (gloc) {
		//                    cookie.remove('geolocation', '/', '.indiatimes.com');
		//                    cookie.set("geolocation", gloc, 365, "/", location.host, "");
		//                }
		//            }, 5000);
		//        }
		//        //************* END GeoLocation *************
	};
	return mod_homepage;
} );

define( 'crwdcntrl',[ 'tiljs/cookie', 'tiljs/event' ], function ( cookie, event ) {
    var mod_lotame = {};

    var getAgeFromDOB = function (dob) {
        var today = new Date(), birthDate = new Date(dob), age = today.getFullYear() - birthDate.getFullYear();
        var m = today.getMonth() - birthDate.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
            age--;
        }
        return age;
    };

    var userDetailsFromCookie = function () {
        var userdetails = cookie.get("MSCSAuthDetail");
        var dtls = {};
        dtls.act = (typeof userdetails != 'undefined') ? "TOI" : "";
        if(typeof userdetails != 'undefined'){
            dtls.dob = (userdetails.match("DOB=(.*) ") != null) ? userdetails.match("DOB=(.*) ")[1] : "";
            dtls.gender = (userdetails.match("Gender=(.*)~Country") != null) ? userdetails.match("Gender=(.*)~Country")[1] : "";
        }
        dtls.age = (dtls.dob != "") ? getAgeFromDOB(dtls.dob) : "";
        return dtls;
    };

    mod_lotame.init = function () {
        var userDetails = userDetailsFromCookie();

        if (userDetails.gender != "" || userDetails.age != "") {
            if (typeof _cc2801 != 'undefined') {
                _cc2801.add("act", userDetails.act);
                _cc2801.add("dem", "toi.web:gender=" + userDetails.gender);
                _cc2801.add("dem", "toi.web:age=" + userDetails.age);
                if (typeof _cc2801.bcp != 'undefined') {
                    _cc2801.bcp();
                }
            }
        }
    };

    mod_lotame.init();

    event.subscribe(["user.login"], function (user) {
        if (typeof mod_lotame.init == 'function') {
            mod_lotame.init();
        }
    });
});
define( 'tiljs/social/twitter',[ "../social/social", "../ui", "../logger", "../event", "../util", "jquery", "module" ], function ( social, ui, logger, event, util, $, module ) {
	var mod_twitter = new social( "twitter", "twitter" );
	var default_config = {
		parse: false,
		js: "//platform.twitter.com/widgets.js",
		js_id: "twitter-wjs",
		share_url: "https://twitter.com/share",
		via: null,
		format: "{{:title}}",
		sharePageTitle: true
	};
	var config = util.extend( true, {}, default_config, module.config() );
	mod_twitter.setJS( config.js, config.js_id );
	mod_twitter.addPlugin( {
		id: "button",
		js: true,
		init: function ( ele, plugin ) {
			var element = $( ele );
			var data = util.data( ele );
			var default_params = {
				//                size:"large", //
				count: "vertical", // horizontal, vertical, none
				url: location.href
			};
			var params = util.extend( true, {}, default_params, data );
			params.url = data.url || data.href || element.attr( "href" ) || params.href;
			var tweet_button = $( "<a class='twitter-share-button'></a>" );
			//            tweet_button.attr("href",params.url);
			//Using this because data method in jquery does not append dom element
			$.each( params, function ( name, value ) {
				tweet_button.attr( "data-" + name, value );
			} );
			element.empty();
			element.append( tweet_button );
			mod_twitter.parse( ele );
		}
	} );
	
	mod_twitter.addPlugin( {
		id: "frame",
		js: true,
		init: function ( ele, plugin ) {
		    
		    var element = $( ele );
			var data = util.data( ele );
			var default_params = {
				twtid: "",
				theme: 'light'
			};
			var params = util.extend( true, {}, default_params, data );
			
	        var divid = "twt-"+params.twtid;
            if(window.twttr){
                twttr.widgets.createTweet(
                  params.twtid,
                  document.getElementById(divid),
                  {
                    theme: params.theme
                  }
                );
            }
		}
	} );
	
	mod_twitter.addPlugin( {
		id: "share",
		alias: [ "tweet" ],
		events: {
			click: function ( e ) {
				var data = util.data( this );
				mod_twitter.tweet( data.url || $( this ).attr( "href" ), util.format( data.format || config.format, data ), data.via || config.via, this );
			}
		},
		init: function ( ele, plugin ) {
			//            console.log(plugin.id + " init called");
			//            $(ele).click(function (e) {
			//                mod_twitter.tweet($(this).attr("data-url") || $(this).attr("href"));
			//                e.preventDefault();
			//            })
		}
	} );
	mod_twitter.tweet = mod_twitter.share = function ( url, text, via, element ) {
	    text = ( typeof text == "string" ) ? text.trim() : text;
		var tweetObj = {
			url: mod_twitter.getAbsoluteUrl( url ),
			text: text || ( config.sharePageTitle === true ? document.title.split( "|" )[ 0 ] : "" )
		};
		if( via ) {
			tweetObj.via = via;
		}
		mod_twitter._share( config.share_url, tweetObj, {
			name: 'twitter_tweet_dialog',
			width: 500,
			height: 400
		}, element );
	};
	mod_twitter.addPlugin( {
		id: "follow",
		events: {
			click: function ( e ) {
				mod_twitter.follow( $( this ).attr( "data-url" ) || $( this ).attr( "href" ) );
			}
		},
		init: function ( ele, plugin ) {}
	} );
	mod_twitter.follow = function ( url, options ) {
		var _url = mod_twitter.getAbsoluteUrl( url );
		var win = window.open( url, "_blank" );
		win.focus();
	};
	mod_twitter.addPlugin( {
		id: "login",
		//        js: true,
		init: function ( ele, plugin ) {
			//            console.log(plugin.id + " init called");
			//            $(ele).click(function (e) {
			//                mod_twitter.login();
			//                e.preventDefault();
			//            })
		}
	} );
	var __perms = null;
	mod_twitter.login = function ( permissions, callback ) {};
	mod_twitter.addPlugin( {
		id: "logout",
		init: function ( ele, plugin ) {
			//            console.log(plugin.id + " init called");
			//            $(ele).click(function (e) {
			//                mod_twitter.logout();
			//                e.preventDefault();
			//            })
		}
	} );
	mod_twitter.parse = function ( ele ) {
		if( typeof twttr !== "undefined" ) {
			twttr.widgets.load( ele );
		} else {
			logger.warn( "'twttr' is required in parse" );
		}
	};
	mod_twitter.logout = function ( callback ) {};
	mod_twitter.beforeinit = function () {};
	mod_twitter.beforeloadjs = function () {};
	mod_twitter.afterloadjs = function () {
		if( typeof twttr !== "undefined" ) {
			//                twttr.ready(function (twttr) {
			//                     attachtwitterevent();
			//                });
			logger.log( "twttr js loaded" );
			var event_names = [ "click", "tweet", "retweet", "follow", "favorite" ];
			util.each( event_names, function ( k, event_name ) {
				if( event_names.hasOwnProperty( event_name ) ) {
					twttr.events.bind( event_name, function ( event_name ) {
						return function ( intent_event ) {
							event.publish( "twttr." + event_name, {
								intent_event: intent_event
							} );
						};
					}( event_name ) );
				}
			} );
		} else {
			logger.warn( "'twttr' is required in afterloadjs" );
		}
	};
	var currentUser = null;
	mod_twitter.getUser = function ( callback ) {
		//        if (typeof FB !== "undefined" && !currentUser) {
		//            FB.api('/me', function (response) {
		//                if (callback) {
		//                    currentUser = response;
		//                    callback(response);  //response is the basic user object
		//                }
		//            });
		//        } else {
		//            if (callback) {
		//                callback(currentUser);
		//            }
		//        }
	};
	mod_twitter.onlogin = function ( callback ) {
		//        event.subscribe("FB.auth.authResponseChange.connected", function (resp) {
		//            mod_twitter.getUser(function (user) {
		////                $("[data-plugin='" + opt.plugins.fb_login + "']").hide();
		////                $("[data-plugin='" + opt.plugins.fb_logout + "']").show();
		//
		//                if (callback) {
		//                    callback(user, resp);
		//                }
		//            })
		//        });
	};
	mod_twitter.onlogout = function ( callback ) {
		//        event.subscribe(["FB.auth.authResponseChange.not_authorised", "FB.auth.authResponseChange.failed"], function (resp) {
		////            $("[data-plugin='" + opt.plugins.fb_logout + "']").hide();
		////            $("[data-plugin='" + opt.plugins.fb_login + "']").show();
		//
		//            if (callback) {
		//                currentUser = null;
		//                callback(resp);
		//            }
		//        });
	};
	mod_twitter.init( config );
	return mod_twitter;
} );

define( 'tiljs/social/pinterest',[ "../social/social", "../ui", "../logger", "../event", "../util", "../load", "jquery", "module" ], function ( social, ui, logger, event, util, load, $, module ) {
	var mod_pinterest = new social( "pinterest", "pinterest" );
	var default_config = {
		parse: false,
		js: "//assets.pinterest.com/js/pinit.js",
		js_id: "pinterest-js",
		share_url: "//www.pinterest.com/pin/create/button/"
	};
	var config = util.extend( true, {}, default_config, module.config() );
	mod_pinterest.setJS( config.js, config.js_id );
	mod_pinterest.addPlugin( {
		id: "button",
		//        js:true,
		init: function ( ele, plugin ) {
			var element = $( ele );
			var data = util.data( ele );
			var default_params = {
				//                size:"large", //
				"pin-do": "buttonPin",
				"pin-config": "above" // horizontal, vertical, none
			};
			var params = util.extend( true, {}, default_params, data );
			params.href = data.url || data.href || element.attr( "href" ) || params.href;
			var fb_like = $( "<a></a>" );
			var prm = {
				url: mod_pinterest.getAbsoluteUrl( params.href ),
				media: mod_pinterest.getAbsoluteUrl( params.image ),
				description: params.summary
			};
			fb_like.attr( "href", "http://www.pinterest.com/pin/create/button/?" + $.param( prm ) );
			//Using this because data method in jquery does not append dom element
			$.each( params, function ( name, value ) {
				fb_like.attr( "data-" + name, value );
			} );
			element.empty();
			element.append( fb_like );
			mod_pinterest.parse( ele );
		}
	} );
	mod_pinterest.addPlugin( {
		id: "share",
		alias: [ "pin" ],
		events: {
			click: function ( e ) {
				var data = util.data( this );
				mod_pinterest.share( data.url || $( this ).attr( "href" ), data.title, data.summary, data.image, this );
			}
		},
		//        js:true,
		init: function ( ele, plugin ) {}
	} );
	mod_pinterest.pin = mod_pinterest.share = function ( url, title, summary, image, element ) {
		mod_pinterest._share( config.share_url, {
			url: mod_pinterest.getAbsoluteUrl( url ),
			description: title,
			summary: summary,
			media: mod_pinterest.getAbsoluteUrl( image )
		}, {
			name: 'pinterest_pin_dialog',
			width: 700,
			height: 400
		}, element );
	};
	mod_pinterest.addPlugin( {
		id: "follow",
		events: {
			click: function ( e ) {
				mod_pinterest.follow( $( this ).attr( "data-url" ) || $( this ).attr( "href" ) );
			}
		},
		init: function ( ele, plugin ) {}
	} );
	mod_pinterest.follow = function ( url, options ) {
		var _url = mod_pinterest.getAbsoluteUrl( url );
		var win = window.open( url, "_blank" );
		win.focus();
	};
	mod_pinterest.parse = function ( ele ) {
		var pinJs = $( '#' + config.js_id );
		pinJs.remove();
		load.js( config.js, null, config.js_id );
	};
	mod_pinterest.init( config );
	return mod_pinterest;
} );

define( 'tiljs/social/linkedin',[ "../social/social", "../ui", "../logger", "../event", "../util", "jquery", "module" ], function ( social, ui, logger, event, util, $, module ) {
	var mod_linkedin = new social( "linkedin", "linkedin" );
	var default_config = {
		parse: false,
		js: "//platform.linkedin.com/in.js",
		js_id: "linkedin-js",
		//                share_url:"https://www.linkedin.com/cws/share"
		share_url: "http://www.linkedin.com/shareArticle"
	};
	var config = util.extend( true, {}, default_config, module.config() );
	mod_linkedin.setJS( config.js, config.js_id );
	mod_linkedin.addPlugin( {
		id: "button",
		js: true,
		init: function ( ele, plugin ) {
			//<script type="IN/Share" data-url="http://www.google.com" data-counter="top"></script>
			var element = $( ele );
			var data = util.data( ele );
			var default_params = {
				url: location.href,
				counter: "top" //top
			};
			var params = util.extend( true, {}, default_params, data );
			params.url = data.url || data.href || element.attr( "href" ) || params.href;
			var fb_like = $( "<script type='IN/Share'></script>" );
			//Using this because data method in jquery does not append dom element
			$.each( params, function ( name, value ) {
				fb_like.attr( "data-" + name, value );
			} );
			element.empty();
			element.append( fb_like );
			mod_linkedin.parse( ele );
		}
	} );
	mod_linkedin.addPlugin( {
		id: "share",
		events: {
			click: function ( e ) {
				var data = util.data( this );
				mod_linkedin.share( data.url || $( this ).attr( "href" ), data.title, data.summary, data.image, this );
			}
		},
		init: function ( ele, plugin ) {}
	} );
	mod_linkedin.share = function ( url, title, summary, image, element ) {
		mod_linkedin._share( config.share_url, {
			url: mod_linkedin.getAbsoluteUrl( url ),
			title: title,
			summary: summary
		}, {
			name: 'linkedin_share_dialog',
			width: 500,
			height: 570
		}, element );
		//        window.open("//linkedin.com/submit?url=" + _url + "&title=" + $("title").text(), "_blank");
	};
	mod_linkedin.parse = function ( ele ) {
		if( typeof IN !== "undefined" ) {
			IN.parse( ele );
		} else {
			logger.warn( "'IN' is required in parse" );
		}
	};
	mod_linkedin.init( config );
	return mod_linkedin;
} );

define( 'tiljs/social/googleplus',[ "../social/social", "../ui", "../logger", "module", "../event", "../util", "jquery" ], function ( social, ui, logger, module, event, util, $ ) {
	/*
<body itemscope itemtype="http://schema.org/Product">
  <h1 itemprop="name">Shiny Trinket</h1>
  <img itemprop="image" src="{image-url}" />
  <p itemprop="description">Shiny trinkets are shiny.</p>
</body>
*/
	var default_config = {
		parse: false,
		js: "https://apis.google.com/js/plusone.js?onload=attachgoogleevent",
		js_id: "googleplus-js",
		share_url: "https://plus.google.com/share"
	};
	var config = util.extend( true, {}, default_config, module.config() );
	var mod_googleplus = new social( "googleplus", "googleplus" );
	mod_googleplus.setJS( config.js, config.js_id );
	mod_googleplus.addPlugin( {
		id: "button",
		js: true,
		init: function ( ele, plugin ) {
			var element = $( ele );
			var data = util.data( ele );
			var default_params = {
				href: location.href,
				size: "tall", //standard , small, medium, tall
				annotation: "bubble", //bubble, inline, none
				width: null //integer
			};
			var params = util.extend( true, {}, default_params, data );
			params.href = data.url || data.href || element.attr( "href" ) || params.href;
			var fb_like = $( "<div class='g-plusone'></div>" );
			//Using this because data method in jquery does not append dom element
			$.each( params, function ( name, value ) {
				fb_like.attr( "data-" + name, value );
			} );
			element.empty();
			element.append( fb_like );
			mod_googleplus.parse( element[ 0 ] );
		}
	} );
	mod_googleplus.addPlugin( {
		id: "share",
		events: {
			click: function ( e ) {
				var data = util.data( this );
				mod_googleplus.share( data.url || $( this ).attr( "href" ), data.title, data.summary, data.image, this );
			}
		},
		config: {
			shareUrl: ""
		},
		init: function ( ele, plugin ) {}
	} );
	mod_googleplus.share = function ( url, title, summary, image, element ) {
		mod_googleplus._share( config.share_url, {
			url: mod_googleplus.getAbsoluteUrl( url )
		}, {
			name: 'googleplus_share_dialog',
			width: 500,
			height: 400,
			scrollbars: 1
		}, element );
		//        ui.window("https://plus.google.com/share?url=" + encodeURIComponent(_url)
		//            , {name: 'googleplus_pin_dialog', width: 700, height: 440});
	};
	mod_googleplus.addPlugin( {
		id: "follow",
		events: {
			click: function ( e ) {
				mod_googleplus.follow( $( this ).attr( "data-url" ) || $( this ).attr( "href" ) );
			}
		},
		init: function ( ele, plugin ) {}
	} );
	mod_googleplus.follow = function ( url, options ) {
		var _url = mod_googleplus.getAbsoluteUrl( url );
		var win = window.open( url, "_blank" );
		win.focus();
	};
	mod_googleplus.parse = function ( ele ) {
		if( typeof gapi !== "undefined" ) {
			gapi.plusone.go();
			//            gapi.plusone.render();
		} else {
			logger.warn( "'gapi' is required in parse" );
		}
	};
	mod_googleplus.init( config );
	return mod_googleplus;
} );

/**
 var __times = __times || [];
 __times.push(['event','subscribe','times.load',function(){
	///this is called when toicommonjs is loaded

 }]);

 __times.push(function(){
	///this is called when toicommonjs is loaded

 });

 */
define( 'tiljs/plugin/pre_event',[ "../event", "module", "../util", "../is" ], function ( event, module, util, is ) {
	var mod_pre_event = {};
	var default_config = {};
	var config = util.extend( true, {}, default_config, module.config() );

	mod_pre_event.init = function(){
		if(window.__times){
			mod_pre_event.process(window.__times);
		}else{
			window.__times = [];
		}

		window.__times.push = function(v){
			mod_pre_event.processOne(v);
			return Array.prototype.push.apply(this,arguments);
		};
	};

	mod_pre_event.process = function(__times){
		util.each(__times,function(k,v){
			mod_pre_event.processOne(v);
		});
	};

	mod_pre_event.processOne = function(v){
		try{
			if(is.funct(v)){
				v();
			} else if(is.array(v)){
				var mod = v[0],
				method = v[1],
				params = v.splice(2);

				require(mod)[method].apply(this,params);
			}else{
				event.publish("logger.warn", "Invali params in __times");
			}
		}catch(e){
			event.publish("logger.error",e);
		}
	};

	mod_pre_event.init();


	return mod_pre_event;
} );


define( 'pgtrack',[], function (){
    var mod_pgtrack = {};
    mod_pgtrack.evtCap = function ( ee ) {
        try {
            if( window.event && window.event.srcElement ) {
                var level = 3, target = window.event.srcElement;
                while( level > 0 && target != document.querySelector('body') ) {
                    if( target.getAttribute( "pg" ) != null ) {
                        mod_pgtrack.track( target.getAttribute( "pg" ) );
                    }
                    level--;
                    target = target.parentNode;
        		}
            } else if( ee && ee.stopPropagation && !window.opera ) {
                if( ee.target.getAttribute( "pg" ) != null ) {
                    mod_pgtrack.track( ee.target.getAttribute( "pg" ) );
                }
            }
        } catch( ex ) {}
    };
    mod_pgtrack.track = function ( pgatt ) {
        if( pgatt != null ) {
            var pgat = pgatt.split( '#' );
            var trcode = null;
            if( pgatt != null ) {
                var si = pgatt.indexOf('~'), action = 'action';
                if ( si > -1 ) {
                    action = pgatt.substr(si + 1);
                    pgatt = pgatt.substr(0, si);
                }
                var pgat = pgatt.split( '#' ), category = pgat[ 0 ];
				if(toiprops._hpVersion){
				    category = toiprops._hpVersion +'_'+category; 
				}
                var trcode = null;
                if( pgat.length == 1 ) {
                    trcode = ga( 'send', 'event', category, action );
                } else if( pgat.length == 2 ) {
                    trcode = ga( 'send', 'event', category, action, pgat[ 1 ] );
                } else {
                    trcode = ga( 'send', 'event', category, action, pgat[ 1 ] , pgat[ 2 ] );
                }
            }
        }
    };
    $( document ).click( mod_pgtrack.evtCap );
    return mod_pgtrack;
} );
define( 'breakingnews',[ "jquery", "tiljs/ajax", "tiljs/load" ], function ( $, ajax, load ) {
    //********************************************
    //************ START Breaking News ***********
    //********************************************
    var brkNObj = {};
    brkNObj.reloadtime = 2000; //12000;
    brkNObj.breakingnews = function () {
        //var hostUrl = '/breakingnews/breakingnews.html';
        var hostUrl = 'https://toibnews.timesofindia.indiatimes.com/TOIBNews/breakingnews.html';
        if( document.location.host == "toidev.indiatimes.com" || document.location.host == "jcmsdev.indiatimes.com" ) {
            hostUrl = '/home1_articlecount_test.cms'
        }
        if( window.homeObj && window.homeObj.breakingNewsPause == 0 ) {
            ajax.get( hostUrl, function ( data ) {
                data = data.replace( /[\r\n]/g, "" );
                if( !$.trim( data ) ) {
                    myMethod();
                    brkNObj.reloadtime = 180000;
                    return true;
                }
                var stories = data.split( /[|]/g );
                $( '.breaking-news .wrapper' ).html( "" )
                $( '.breaking-news .wrapper' ).html( "<ul id='js-news'/>" );
                var long_story_count = 0;
                var long_story_char = 0, dataLength = 0;
                $.each( stories, function ( index, val ) {
                    val = '<li class="news-item">' + val + '</li>';
                    $( '#js-news' ).append( val );
                    
                    var textLength = $('#js-news li').eq(index).text().length;
                        dataLength += textLength;
                    if( textLength.length > 90 ) {
                        long_story_char += ( textLength.length - 90 );
                        long_story_count++;
                    }
                } );
                myMethod( stories.length, dataLength, long_story_count, long_story_char );
            } );
        } else {
            setTimeout( function () {
                brkNObj.breakingnews()
            }, brkNObj.reloadtime );
        }
        myMethod = function ( slen, dlen, lStryCount, longstorychar ) {
            if( slen && dlen ) {
                $( '.breaking-news' ).show();
                if($('#adsdivLyr').height() > 0){$('#adsdivLyr').css("margin-top","10px")}
                if( $( '#js-news' ).ticker() ) {
                    $( '#js-news' ).show();
                }
                if( slen < 2 ) $( '.ticker-controls' ).hide();
                if( !dlen ) return true;
                brkNObj.reloadtime = slen > 1 ? slen : 2;
                dlen = slen > 1 ? dlen : dlen * 2;
                // 	brkNObj.reloadtime = ($.fn.ticker.defaults.pauseOnItems)?
                // 						($.fn.ticker.defaults.pauseOnItems*brkNObj.reloadtime):
                // 						(3000*brkNObj.reloadtime);
                var animationTime = longstorychar * 155; //lStryCount * 3000;
                brkNObj.reloadtime = ( slen * 6000 ) + brkNObj.reloadtime + animationTime + ( slen * 2500 );
                brkNObj.reloadtime = brkNObj.reloadtime * 5;
            } else {
                $( '.breaking-news' ).hide();
            }
            setTimeout( function () {
                brkNObj.breakingnews()
            }, brkNObj.reloadtime );
        };
    };
    setTimeout( function () {
        if($('#js-news').length > 0) {
            brkNObj.breakingnews();
        }
    }, 8000 );
    //************* END Breaking News *************
    return brkNObj;
} );
define( 'global',[], function () {
    var global = {};
    var mod_global = {};
    mod_global.global = global;
    mod_global.set = function ( key, value ) {
        global[ key ] = value;
    };
    mod_global.get = function ( key ) {
        return global[ key ];
    };
    return mod_global;
} );
define('navsearchbox',['jquery'], function ($) {
    var navsearchbox = {};
    navsearchbox.toTitleCase = function(a){
        return a.replace(/\w\S*/g,function(b){return b.charAt(0).toUpperCase()+b.substr(1).toLowerCase()})
    };
    navsearchbox.validateForm = function(){
        if($('#query').val()==""){
            alert("Please enter text to search");
            return false
        }else{
            var d = document.frmsearch1.query.value;
            var a = -1;
            a = document.frmsearch1.search1.value;
            var c = null;
            if (d == "") {
                alert("Please enter text to search");
                document.frmsearch1.query.focus();
                return false
            }
            switch( a ) {
                case "0":
                    var b = navsearchbox.toTitleCase(d);
                    c = "http://timesofindia.indiatimes.com/topic/" + b.replace(/\s+/g, "-");
                    break;
                case "1":
                    c = "http://search.indiatimes.com/websearch.cms";
                    document.frmsearch1.type.value = 1;
                    break;
                case "2":
                    c = "http://search.indiatimes.com/websearch.cms";
                    document.frmsearch1.type.value = 0;
                    break;
                case "3":
                    var b = navsearchbox.toTitleCase(d);
                    c = "http://timesofindia.indiatimes.com/topic/" + b.replace(/\s+/g, "-") + "/videos";
                    break;
                case "4":
                    var b = navsearchbox.toTitleCase(d);
                    c = "http://photogallery.indiatimes.com/resultsearch.cms?source=toisearch&q=" + b.replace(/\s+/g, "-");
                    document.frmsearch1.target = "_blank";
                    break;
                default:
                    break;
            }
            var pathName = document.location.pathname;
            if (pathName && pathName.indexOf('/photostory/') > -1 && !(pathName.indexOf('/entertainment') > -1 || pathName.indexOf('/tv') > -1 || pathName.indexOf('/life-style') > -1 || pathName.indexOf('/etimes') > -1)){
             ga('send','event', 'WEB-TOI-Photostory','NavBar-Search-Initiate-Manually_Entered', window.location.href + '-' +document.frmsearch1.query.value);
            }
            window.location.href = c ;
            //document.frmsearch1.action = c;
            //document.frmsearch1.submit();
            return false;
        }
    };
    $("[data-plugin='navsearchboxvalidate']").on("submit",navsearchbox.validateForm);
    
      (function() {

    window.navsearch = {};
    var keyCode, $listItems, $selected, $current, lasttext;
    window.navsearch.handleAutoSearchResult = function(data) {
        $('#nav_autosuggest_result').html('');
        if (data && $.type(data) == 'array') {

            var len = data[1].length;

            for (var i = 0; i < len; i++) {
                var q = data[1][i][0].replace(/\b[a-z]/g,function(f){return f.toUpperCase();});
                var dom = '',
                    link = "http://timesofindia.indiatimes.com/topic/" + q.replace(/\s+/g, "-");
                dom = '<li><a href="' + link + '" target="_blank">' + q + '</li>';
                $('#nav_autosuggest_result').append(dom);
            }

            $listItems = $('#nav_autosuggest_result li');
            var pathName = document.location.pathname;
            if (pathName && pathName.indexOf('/photostory/') > -1 && !(pathName.indexOf('/entertainment') > -1 || pathName.indexOf('/tv') > -1 || pathName.indexOf('/life-style') > -1 || pathName.indexOf('/etimes') > -1)){
                $('#nav_autosuggest_result li a').click(function(e){
                    e.preventDefault();
                    var q = $(this).text();
                    ga('send','event', 'WEB-TOI-Photostory','NavBar-Search-Initiate-Auto_Suggestion', window.location.href + '-' + q);
                    location.href = $(this).attr('href');
                });
            }
            

        }
    };

    var ajaxReq = null;

    $("[data-plugin='navsearchboxvalidate'] #query").on('keyup', '', function(evt) {
        keyCode = evt.keyCode;
        var _search_txt = $(this).val().trim(),
            _suggestion_box = $('#nav_autosuggest_result');

        if (_search_txt && !(keyCode == 40 || keyCode == 38 || keyCode == 27 && $('#nav_autosuggest_result').is(":visible"))) {
            // moved suggestqueries api to https to resolve mixed content issue by chankey
            var _search_api_url = 'https://suggestqueries.google.com/complete/search?client=youtube&jsonp=navsearch.handleAutoSearchResult&q=' + _search_txt;
            if (ajaxReq) ajaxReq.abort();

            ajaxReq = $.ajax({
                type: "GET",
                dataType: "jsonp",
                url: _search_api_url,
                success: function(data) {

                }
            });


        } else if (_search_txt) {

            if (keyCode == 27) { // 27 is key code of ESC key to close the list on esc key
                $('#nav_autosuggest_result').closest('.search-form').removeClass('hover')
            } else if (keyCode == 40) {

                $('#nav_autosuggest_result').closest('.search-form').addClass('hover')

                if (!$listItems.hasClass("selected")) {
                    $listItems.first().addClass("selected");
                    $("#query").val($listItems.first().find("a").text());

                } else {
                    $selected = $listItems.filter('.selected');


                    var $current;
                    if (!$selected.length || $selected.is(':last-child')) {
                        $current = $listItems.eq(0);
                    } else {
                        $current = $selected.next();
                    }
                    $selected.removeClass('selected');
                    $current.addClass('selected');
                    $("#query").val($current.find("a").text());

                }


            } else if (keyCode == 38) {
                
                $('#nav_autosuggest_result').closest('.search-form').addClass('hover')

                if (!$listItems.hasClass("selected")) {
                    $listItems.first().addClass("selected");
                    $("#query").val($listItems.first().find("a").text());

                } else {

                    $selected = $listItems.filter('.selected');

                    var $current;
                    if (!$selected.length || $selected.is(':first-child')) {
                        $current = $listItems.last();
                    } else {
                        $current = $selected.prev();
                    }
                    $selected.removeClass('selected');
                    $current.addClass('selected');
                    $("#query").val($current.find("a").text());


                }

            }

        } else {
            $('#nav_autosuggest_result').html('');
        }



    });
})();

    return navsearchbox;
});
define( 'navigation',[ "jquery", "tiljs/ajax", "global", "tiljs/plugin/lazy", "tiljs/is", 'tiljs/cookie','navsearchbox' ], function ( $, ajax, global, lazy, is, cookie, navsearchbox ) {
    var navObj = {
        func: {},
        getelem: {},
        ajax: {}
    };
    global.set( 'nav', navObj );
    //************************************************
    //************* --START NAVIGATION-- *************
    //************************************************

     (function(){
            var _geoloc = cookie.get("geolocation");
            var geolan = (window.getCityJSON
            && getCityJSON[_geoloc]
            && getCityJSON[_geoloc]['lang'])?getCityJSON[_geoloc]['lang']:'hindi';
            if($('#nav-tv.category').length){
                ajax.get('/tvlistingdrop.cms?languagename='+geolan+'&type=default',function(data){
                    $('#rnav45449811, #rnav41505232').remove();
                    $('body').append( data );
                });
            }
     })();

       /** Amazon navigation for GEO location */
         jQuery(document).ready(function($){
             var cnt_loc = cookie.get('cnt');

        //      if (cnt_loc === undefined){
        //          // Lets try after 3 seconds if cookies was not set already.
        //          setTimeout( function () {
     			// 	cnt_loc = cookie.get('cnt');
     			// 	loadNavGeoCodes(cnt_loc);
     			// }, 3000 );
        //      }else{
        //          loadNavGeoCodes(cnt_loc);
        //      }

            function loadNavGeoCodes(country){
                if (country == 'UK'){
                     var url = '';
                     if ($( "#nav-amazon" ).length > 0){
                         url = "/amazonuk.cms";
                     }else{
                         url = "/amazon_drop.cms?geoid=5";
                     }
                     $.get(url, function(data) {
                         $("#nav-amazon").replaceWith(data);
                         $("#amzn_domain").show();
                         $("li[drop='amazon']").html(data);
                     })
                  }else{
                     $("#amzn_domain").show();
                  }
            }
         });
         /** end of Amazon navigation for GEO location */
    function showFirst(tthis){
        var id = $(tthis).closest('li').find('.list7 li:first').attr('id');
        $('#rnav' + id).show();
    }
    
    function navHoverIn( tthis ) {
        if($( tthis ).parent().attr("class").match(/current/)){return true;}
        navObj.id = $( tthis ).parent().attr( 'id' );
        navObj.extfile='';
        navObj.extfile = $( tthis ).attr( 'data-external' );
        navObj.name = navObj.id.substring( 4 );
        $( tthis ).parent().find( "li:first" ).addClass( "active" );
        showFirst(tthis);
        if(navObj.id=='nav-home' && $('#rnav-2128932452')){
            $('.rnavclass').hide();
            $('#rnav-2128932452').show();
            if( !navObj.ajax[ navObj.id ] && $( tthis ).hasClass( 'lnavdata' ) )
                $( '.level-one .loader' ).show();
        }
        if( !navObj.ajax[ navObj.id ] && $( tthis ).hasClass( 'lnavdata' ) ) {

            var populateData = function ( id ) {
                var q=id;
                if (typeof s !== "undefined" && s==1) { q = q+"&s=" + s; }
                if(q=="entertainment-tv" || q=="tv"){
                    var g = cookie.get("geolocation");
                    var lan = (window.getCityJSON
                    && getCityJSON[g]
                    && getCityJSON[g]['lang'])?getCityJSON[g]['lang']:'hindi';
                    ajax.get( '/tvlistingdrop.cms?languagename='+lan, function ( data ) {
                        $( '#rhsnav' + id ).append( data );
                    });
                    //ajax.get( '/tvlistingdropme.cms?languagename=hindi', function ( data ) {
                    //    $( '#rhsnav' + id ).append( data );
                    //});
                }
                if(q.match(/movie-reviews/g)){
                    ajax.get( '/nav_moviereview.cms?mvlang='+q, function ( data ) {
                        $( '#rhsnav' + id ).html( data );
                    });
                }
                 /*ajax code with jquery*/
                 /*if($('#nav-'+id).hasClass('nohead')){
                    $( '.level-one .loader' ).show();
                 } */
                 navObj.ajax[ 'nav-' + id ] = 1;
                var url = (navObj.extfile)?navObj.extfile : '/homeajax.cms?nav=' + q;
                $.ajax({
                    url: url,
                }).done(function(data) {
                    $( '#rhsnav' + id ).append( data );
                    var idFirst = $( '#rhsnav' + id ).siblings('.left-column').find('.list7 li:first').attr('id');
                    idFirst = idFirst && idFirst.indexOf('lnav')>-1?idFirst.replace('lnav',''):idFirst;
                    $('#rnav' + idFirst).show();
                    $( '.level-one .loader' ).hide();
                    navObj.ajax[ 'nav-' + id ] = 1;
                    //hack for travel ********
                    $( '#rnavtravel' ).html();
                    $( '#rnavtravel' ).html( $( '#rnav22806450' ).html() );
                    $( '#rnav22806450' ).hide();
                    //end hack for travel ********
                    //Hack Home Nav other than home page ********
                    if(navObj.id=='nav-home' && $('#rnav-2128932452')){
                        $('.rnavclass').hide();
                        $('#rnav-2128932452').show();
                    }
                    //End Hack Home Nav other than home page ********
                    lazy.load();
                    /*if( navObj.activeTab )
                        nav2HoverIn( navObj.activeTab )*/
                    })
                  .fail(function(){
                    navObj.ajax[ 'nav-' + id ] = 0;  
                  })
                /*ajax code with jquery*/   
            };
            populateData( navObj.name );
        }
        if( !navObj.getelem[ navObj.id ] && $( '#rnav' + navObj.name ).length ) {
            var populateData = function ( id ) {
                $span = $( '#rnav' + id ).clone();
                $( '#rnav' + id ).remove();
                $( '#nav-' + id +' #rhsnav' + id ).append( $span );
                $( '#rnav' + id ).show();
            };
            populateData( navObj.name );
            navObj.getelem[ navObj.id ] = 1;
        }
        if( !navObj.timeoutId ) {
            navObj.timeoutId = window.setTimeout( function () {
                navObj.timeoutId = null;
                $( ".level-one .hover" ).removeClass( "hover" );
                $( '#rnav' + navObj.name ).show();
                $( "#" + navObj.id ).addClass( "hover" );
                //hack for travel ********
                $( '#rnav22806450' ).hide();
                //end hack for travel ********
                lazy.load();
            }, 300 );
        }
    }

    function navHoverOut() {
        if( navObj.timeoutId ) {
            window.clearTimeout( navObj.timeoutId );
            navObj.timeoutId = null;
        } else {
            $( ".dropdown, .all-sections" ).mouseleave( function () {
                $( ".level-one .hover" ).removeClass( "hover" );
                $( ".list7 li.active" ).removeClass( "active" );
                $( ".rnavclass" ).hide();
            } );
        }
    }
    $( "#header, #trending, #content, .article-content-wrapper, .breaking-news" ).hover( function () {
        $( ".level-one .hover" ).removeClass( "hover" );
        $( ".search-form.hover" ).removeClass( "hover" );
        $( ".rnavclass" ).hide();
        // $( "#query" ).attr( "disabled", "disabled" );
    } );
    $( ".search-form" ).hover( function () {
        $( ".level-one li" ).removeClass( "hover" );
    } );
   $("#navigation").on("mouseenter", ".navquery", function() {
          navHoverIn( this );
      }).on('mouseleave', ".navquery", function () {
          navHoverOut( this );
      } );
    $( ".navquery" ).on( "click", function ( event ) {
        if( is.touch() ) {
            var lastNav = window.curNav;
            window.curNav = $( this ).attr( "pg" );
            if( typeof lastNav === "undefined" || lastNav !== window.curNav ) {
                navHoverIn( this );
                return false;
            }
        }
        return true;
    } );
    $( document ).on( "click" ),
        function () {
            if( is.touch() && window.curNav !== null ) {
                window.curNav = null;
                navHoverOut( this );
                //return false;
            }
        }

    function nav2HoverIn( tthis ) {
        var str = $( tthis ).attr( 'id' );
        str = str.replace( /lnav/g, "" );
        if( navObj.ajax[ $( tthis ).parents( '.hover' ).attr( 'id' ) ] != 1 || $( "#rnav" + str ).length == 0) {
            navObj.activeTab = tthis;
            $( tthis ).parents( '.two-column-layout' ).find( '.loader' ).show();
            $( '.rnavclass' ).hide();
            return false;
        }
        $( tthis ).parents( '.two-column-layout' ).find( '.loader' ).hide();
        $( ".rnavclass" ).hide();
        $( ".level-one .active" ).removeClass( "active" );
        $( tthis ).addClass( 'active' );
        
        var parent = $( tthis ).parents( "ul.level-one li" );
        if( parent.length == 0 ) {
            parent = $( tthis ).parents( ".two-column-layout" )
        }
        
        parent.find( "#rnav" + str ).show();
        //hack for travel ********
        $( '#rnav22806450' ).hide();
        lazy.load();
    }
    $( ".lnavclass" ).mouseover( function () {
        nav2HoverIn( this );
    } );
    $( ".lnavclass a" ).click( function () {
        if( is.touch() ) {
            var lastNav2 = window.curNav2;
            window.curNav2 = $( this ).attr( "pg" );
            if( typeof lastNav2 === "undefined" || lastNav2 !== window.curNav2 ) {
                nav2HoverIn( this );
                return false;
            }
        }
        return true;
    } );
    $( ".latestwidget" ).click( function () {
           navObj.id = $( this ).attr( 'id' );
           url = '';
           loop = 0;
           if( navObj.id == 'latest' && !navObj[ navObj.id ] ) {
               url = '/mostread_blockibeat.cms?tabname=mostread';
           } else if( navObj.id == 'mostcommented' && !navObj[ navObj.id ] ) {
               url = '/mostcommented_block.cms?tabname=mostcomm';
           } else if ( navObj.id == 'mostshared'  && !navObj[ navObj.id ] ){
               url = '/mostshared_blocknew.cms?tabname=mostshared&top=5&tabname=mostshared';
               loop++;
           }

           if (url != ''){
             getContentWidgetCms(url, loop);
           }

           $( ".latestwidget" ).removeClass( 'active' );
           $( this ).addClass( 'active' );
           $( ".tabcontent" ).hide();
           $( '.' + navObj.id ).show();
       } );
       $(document).ready(function(){
               if ($(".mostshared ol li").length <=3 ){
                   $("#mostshared").trigger('click');
               }
       });
       function getContentWidgetCms(url, loop){
           loop++;
           if (loop > 1){
               url = url + "&version=1";
           }
           ajax.get(url, function ( data ) {
                   // Let try one more time with version nummber if li count is less than 3.
                   if($(data).find("ul li").length <= 3 && loop < 2){
                       getContentWidgetCms(url, loop);
                   }else{
                       $( '.' + navObj.id + " ol" ).html( data );
                       navObj[ navObj.id ] = 1;
                       $( 'span.number' ).show();
                   }
           });
       }
       $( ".shopWidget" ).click( function () {
        navObj.id = $( this ).attr( 'id' );
        $( ".shopWidget" ).removeClass( 'active' );
        $( this ).addClass( 'active' );
        $( ".tabcontent" ).hide();
        $( '.' + navObj.id ).show();
        lazy.load();
    } );
    setTimeout( function () {
        $( 'span.number' ).show()
    }, 500 );
    
    // when we don't require sticky nav, define var disabledStickyNav = 1;
    if( typeof ( disabledStickyNav ) === 'undefined' ) {
        navObj.stickyTop = $( '#navigation' ).offset() ? $( '#navigation' ).offset().top : 0;
        $( window ).scroll( function () {
            navObj.windowTop = $( window ).scrollTop();
            if( navObj.windowTop > navObj.stickyTop ) {
                $('#navigation').addClass( 'sticky' );
            } else {
                $( '#navigation' ).removeClass( 'sticky' );
            }
        });
    }
    
    function getNavFn(){
        var dsktplist = null;
        return function(){
            if ($(window).width() <= 999) {
                if(!$('#navigation ul.level-one').hasClass('ipadflow')){
                    $('#navigation ul.level-one').addClass('ipadflow');
                    if($('#navigation ul.level-one li.nav-ipad .drpdwn-nav-ipad li').length<1){
                        var ipadlist = $('#navigation .level-one>li:visible:gt(8):not(".nav-home"):not(".nav-amazon"):not(".nav-ipad")').clone();
                        dsktplist = $('#navigation .level-one>li:visible:gt(8):not(".nav-home"):not(".nav-amazon"):not(".nav-ipad")');
                        $('#navigation ul.level-one li.nav-ipad').append('<ul class="drpdwn-nav-ipad"></ul>');
                        ipadlist.find('div.dropdown').remove();
                        $('#navigation ul.level-one li.nav-ipad .drpdwn-nav-ipad').append(ipadlist);
                        $('#navigation ul.level-one li.nav-ipad .drpdwn-nav-ipad').css('background', $('#navigation').css('background-color'));
                        $('#navigation ul.level-one').addClass('nooverflow');
                    }
                    dsktplist.hide();
                }
            }
            else{
                if(dsktplist != null){
                    dsktplist.show();
                    $('#navigation ul.level-one').removeClass('ipadflow');
                }
            }
        }
    }
    var updateNavigation = getNavFn();
    
    $( window ).resize(function() {
        updateNavigation();
    });
    $( document ).ready( function () {
        $( ".search-form" ).click( function () {
            $( ".hover" ).removeClass( "hover" );
            $( this ).addClass( 'hover' );
            $('#nav_autosuggest_result').html('');
            $( "#query" ).removeAttr( "disabled" );
            $("#query").focus();
        } );
        updateNavigation();
    } );
    //************* END NAVIGATION *************
    return {};
} );
define('tiljs/apps/times/authorcomments',['jquery', 'event', 'plugin/lazy'], function ($, event, lazy) {
    var authorcomments = {};
    //authrcmnt.checkFlag = true;
    //authrcmnt._authorCommentIds = [];
    authorcomments.run = function () {
        event.subscribe("comments.loaded", function (c) {
            var root = $(c.config.main);
            if (!$('#' + $(root).attr('id') + ' [id="authComment"]').length) {
                //authrcmnt.checkFlag=false;
                var cmt = c.flagData ? c.flagData.authorsComment:null;
                if (cmt) {
                    var commentsResult = [];
                    for (var i = 0; i < cmt.length; i++) {
                        //authrcmnt._authorCommentIds.push(cmt[i].A_ID);
                        c.parseComment(cmt[i], commentsResult);
                    }
                    //authrcmnt._authorCommentIds = authrcmnt._authorCommentIds.filter(function(item,pos){ return authrcmnt._authorCommentIds.indexOf(item)==pos;});
                    //var root = $( c.config.main );
                    var str;
                    str = "<div id='authComment' style='border:1px solid #ccc;margin-bottom:10px;'><div class='authorTxt'>Author's Comment</div>";
                    for (var i = 0; i < commentsResult.length; i++) {
                        str = str + c.renderEach(i, commentsResult[i]);
                    }
                    str = str + '</div>';
                    root.prepend(str);
                    lazy.load();
                    $("#authComment .authorTxt:not(:first-child)").remove();
                }
            }
        });
    };
    return authorcomments;
});

define('pointsEarned', ['tiljs/load','tiljs/cookie','tiljs/event'], function(load,cookie,event){
    var pe = {};
    window['__activity'] = ['visit'];
    pe.run = function(){
             try {
                var uid = cookie.get('MSCSAuth'),
                     ssodetails = cookie.get('MSCSAuthDetails'),
                     pageUrl = document.location.href,
                     rewardemail;
                if (ssodetails != null && ssodetails != undefined) {
                    rewardemail = cookie.get('MSCSAuthDetails').split('=')[1];
                    if (rewardemail.indexOf('@') == -1) {
                        rewardemail = rewardemail + '@indiatimes.com';
                    }
                }
                 if (uid != null) {
                     window._tp_async_data = {
                         host: "TOI",
                         channel: 'News',
                         URL: escape(pageUrl),
                         userId: uid,
                         oid: "",
                         email: rewardemail
                     };
                 }
             } catch (ex) {}
             try {
                 log('visit', '');
             } catch (e) {
                 if (console) {}
             }
        };
    event.subscribe("user.status",function(user){
        try{
            if(user){
                pe.run();
                timespointsapp.init();
            }else if(window._tp_async_data){
                window._tp_async_data ="";
                timespointsapp.init();
            }
        }catch(e){}
    });
    return pe;
});
define('timestoptenwdgt',[], function () {
    var timestoptenwdgt = {};
    timestoptenwdgt.run = function () {
        if ($('[data-id="newsletterWidgetDisplay"]').length) {
            var viewtype = $('[data-id="newsletterWidgetDisplay"]').data('viewtype') || '';
            var ajaxUrl = '/newnlwidget_etimes.cms?ver=1';
            
            if( viewtype ){
                ajaxUrl += '&viewtype=' + viewtype;
            }
            
            $.ajax({
                url: ajaxUrl,
                cache: true,
                dataType: "html",
                success: function (data) {
                    $('[data-id="newsletterWidgetDisplay"]').html(data);
                    var fileref = document.createElement('script');
                    fileref.setAttribute("type", "text/javascript");
                    fileref.setAttribute("src", "/newsletterwidget_js_etimes/version-2,minify-0.cms");
                    document.getElementsByTagName("head")[0].appendChild(fileref);
                    $(document).trigger('newsletterWidgetLoaded');
                    if (timesTop10popup_callbacks) {
                            timesTop10popup_callbacks.onShowCallback(true);
                        } 
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    if (window.console && console.log) {
                        console.log(errorThrown);
                    }
                }
            });
        }
    }
    return timestoptenwdgt;
});
define('coronawdgt',[], function () {
    var coronawdgt = {};
    coronawdgt.run = function () {
        if ($('[data-id="caronanewsletterWidgetDisplay"]').length) {
            var viewtype = $('[data-id="caronanewsletterWidgetDisplay"]').data('viewtype') || '';
            var ajaxUrl = '/newnlwidget_carona_etimes.cms?ver=1';
            
            if( viewtype ){
                ajaxUrl += '&viewtype=' + viewtype;
            }
            
            $.ajax({
                url: ajaxUrl,
                cache: true,
                dataType: "html",
                success: function (data) {
                    $('[data-id="caronanewsletterWidgetDisplay"]').html(data);
                    var fileref = document.createElement('script');
                    fileref.setAttribute("type", "text/javascript");
                    fileref.setAttribute("src", "/newsletterwidget_carona_js_etimes/version-2,minify-0.cms");
                    document.getElementsByTagName("head")[0].appendChild(fileref);
                    $(document).trigger('newsletterWidgetLoaded');
                     if (coronapopup_callbacks) {
                            coronapopup_callbacks.onShowCallback(true);
                        } 
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    if (window.console && console.log) {
                        console.log(errorThrown);
                    }
                }
            });
        }
    }
    return coronawdgt;
});
define("login", ["tiljs/apps/times/login"], function (m) {
	return m;
});
define("tpwidget", ["tiljs/apps/times/tpwidget"], function (m) {
	return m;
});

define('index',[
		"./preload",
		"./config",
		"./compatibility",
		"login",
		"./api",
		"tiljs/plugin/dynamic",
		"./rodate",
		"tiljs/plugin/lazy",
		"tiljs/event",
		"tiljs/util",
		"./comments",
		"./homepage",
		"./crwdcntrl",
		"tiljs/social/facebook",
		"tiljs/social/twitter",
		"tiljs/social/pinterest",
		"tiljs/social/linkedin",
		"tiljs/social/googleplus",
		"tiljs/plugin/pre_event",
		//"personalisation" ,
		"pgtrack",
		"breakingnews",
		"navigation",
		"localstoragec",
		"global",
		//"./common",
		"tiljs/load",
		"jquery",
		"tiljs/apps/times/authorcomments",
		"./timestoptenwdgt",
		"./coronawdgt",
		"pointsEarned",
		"./tpwidget",
		"primeuserhandler"
],
	function (
		preload,
			   config,
				compatibility,
			   login,
			   api,
			   dynamic,
			   rodate,
			   lazy,
			   event,
			   util,
			   comments,
			   homepage,
			   crwdcntrl,
			   facebook,
			   twitter,
			   pinterest,
			   linkedin,
			   googleplus,
			   pevent,
			   //personalisation,
			   pgtrack,
			   breakingnews,
			   navigation,
			   localstoragec,
			   global,
			   //common,
		       load,
				$,
				authorcomments,
				timestoptenwdgt,
				coronawdgt,
				pointsEarned,
				tpwidget,
				primeuserhandler) {



		setTimeout( function () {
			login.init();
		}, 1000 );
		window.toicommonjs = true;
		//        require(["]);

		//Reload FB like widget on ArticleShow login-Bar
		event.subscribe(["user.login","user.logout"],function(user){
        	util.reloadIframe("#fbk");
        	document.cookie = 'ssolt=null; domain=.indiatimes.com; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT';
        });
        
        /*Login through mytimes widget*/
        try{
            $(document).on('click','[data-action="login"]',function(){
                login.login();
                return false;
            });
        }catch(e){}
        /********************************************/
        //pointsEarned.run();
        
        /************************Disable img right click******************************/
        $(document).off('contextmenu').on('contextmenu','img', function(e) {
            return false;
        });
        /*****************************************************************************/
    
        
        require (["./timestoptenwdgt","./coronawdgt"],
            function (timestoptenwdgt,coronawdgt){
                $(window).load(function(){
			       //timestoptenwdgt.run();
			       //coronawdgt.run();
			       
			      
			        var registertimesTop10withpopupManager = function() {
                        if (window.TimesApps && TimesApps.PopUpManager) {
                            timesTop10popup_callbacks = TimesApps.PopUpManager.registerPopup('withtimestop10', timestoptenwdgt.run);
                            timesTop10popup_callbacks && timesTop10popup_callbacks.onReadyCallback(1);
                        }
                    }
                    var registerCoronawithpopupManager = function() {
                        if (window.TimesApps && TimesApps.PopUpManager) {
                            coronapopup_callbacks = TimesApps.PopUpManager.registerPopup('covid19', coronawdgt.run);
                            coronapopup_callbacks && coronapopup_callbacks.onReadyCallback(1);
                        }
                    }
                    
                    
                    setTimeout(registertimesTop10withpopupManager, 0);
                    setTimeout(registerCoronawithpopupManager, 0);
			    });
            });
        require( [ "ajax","cookie",'event', "tiljs/social/facebook", "tiljs/social/twitter", "tiljs/social/pinterest", "tiljs/social/linkedin", "tiljs/social/googleplus"],
			function ( ajax, cookie, event, facebook, twitter, pinterest, linkedin, googleplus ) {
			    $("blockquote").each(function(){
			        if(typeof FB == 'undefined' && /facebook/.test($(this).attr('cite'))){
			            facebook.init({init:true,parse: true});
			        }
			        if(typeof twttr == 'undefined' && /twitter/.test($(this).attr('class'))){twitter.init({parse: true});}
			    });
			    $(window).load(function(){
			        if($(".g-ytsubscribe").length){
        				load.js('https://apis.google.com/js/platform.js',function(){
        				});
        			}
        		
        			//load.js('http://image.timespoints.iimg.in/scripts/timespoints-main.js?version=1');
        			//load.js('/mitr.cms');
			    });
			    event.subscribe("user.status",function(user){
            		//********************************************
        			//************** Login Tracker ***************
        			//********************************************
        			var ssoid = cookie.get("ssoid");
        			var ssolt = cookie.get("ssolt");
        			if((ssolt === undefined && ssoid!== undefined) || ( ssolt && ssoid && ssolt != ssoid)){
                    now=new Date();then=new Date(new Date().setHours(24,0,0,0));
                    cookie.set("ssolt", ssoid, (then.getTime()-now.getTime())/(1000*60*60*24), "/", ".indiatimes.com", "");
        			}
        			//******************** End *******************
    			});
    			load.js('https://image.timespoints.iimg.in/tpwidgets/static/dist/js/main.js');
                $(document.body).on('tpwidget-ready',function(){

                    require( [ "./tpwidget"], function (tpwidget){

                        tpwidget.init();
                    });



                })
			    
		});
		
		

        //Navigation Manager
        (function(MODULE, win, $){

            var $win = $(win),
                _constants = {
                    configSelectors: { // configs will be picked using these seletors on the $listContainer passed to the init function
                        // watchLaterElementSelector: 'data-watchlater-selector',
                    },
                    urls: {
                        //navjson: '/navjson/nav-$$$$.cms'
                    },
                    cssClasses: {
                        hover: 'active',
                        twoColumn: 'two-column',
                        rightColumn: 'right-column',
                        leftColumn: 'left-column',
                        loader: 'nav-loading',
                        dropdown: 'dropdown'
                    }
                },
                _defaults = {
                    domSelectors: {
                        navigation: '#main-nav',
                        navItem: 'li[data-menu-type]',
                        preloadData: '[data-preload]',
                        leftColumnItem: 'li[data-id]',
                        cyclicContainer:'.cyclicnav',
                        menuItem: 'li[data-id]',
                        preloaded: '[data-preloaded]',
                        headerSearch: '.jSearchLens'
                    }
                },
                _dom = {}, // to be populated dynamically
                _state = {
                    processing: false
                },
                _config,
                _initialized = false,
                _subSectionsData = {},
                _external_htmls = {};

            function getFinalConfig() {
                var finalConfig = {};

                return $.extend(true, _defaults, finalConfig);
            }

            function populateDOMVariables($container){
                _dom.$navigation = $(_config.domSelectors.navigation);
                _dom.$navItems = _dom.$navigation.find(_config.domSelectors.navItem);
                _dom.$header = $('#header');
                _dom.$headerSearch = _dom.$header.find(_config.domSelectors.headerSearch);
                _dom.$subNav = _dom.$header.find('#sub-nav');
                _dom.$bottomArea = _dom.$header.find('.bottom-area');
                _dom.$mobileNav = _dom.$header.find('#toi_mobile_navigation');
                _dom.$allMenu = $('#allmenu');
                _dom.$menuMore = $('[data-more-nav]');
                _dom.$allMenuContent = $("#allmenu-content");
            }

            function handleError(id, tmpl){
                var // = $.templates('#error-msg-tmpl'),
                    $item = $('#main-nav').find('li[data-id="'+id+'"]'),
                    title = $item.text(),
                    link = $item.find('a').attr('href'),
                    data = {
                        "title": title,
                        "link": link
                    };
                //html = $tmpl.render(data);

                if(tmpl === _constants.cssClasses.twoColumn){
                    $item.closest('.' + _constants.cssClasses.dropdown).find('.' + _constants.cssClasses.rightColumn).html('').addClass(_constants.cssClasses.loader);
                    // $item.closest('.' + _constants.cssClasses.dropdown).find('right-column').html(html);
                }
                else{
                    $item.find('.' + _constants.cssClasses.dropdown).html('').addClass(_constants.cssClasses.loader);
                    // $item.find('.' + _constants.cssClasses.dropdown).html(html);
                }

            }


            function getProcessedData(data){
                var processedData = data;

                if(typeof data === 'string'){
                    // to remove linebreaks tabs etc
                    processedData = processedData.replace(/\s\s+/g, ' ');

                    // to remove xslt error comments, using while loop because regex replaces all content between first comment's start and last comment's end
                    while(processedData.indexOf('<!--') > -1){
                        processedData = processedData.substr(0, processedData.indexOf("<!--")) + processedData.substr(processedData.indexOf("-->") + 3, processedData.length);
                    }

                    //convert to json
                    try{
                        processedData = JSON.parse(processedData);
                    }
                    catch(e){
                        processedData = null;
                    }
                }

                return processedData;
            }

            function getURL($item, addParams){
                var url,
                    id = $item.data('id'),
                    params = $item.data('params'),
                    external = $item.data('external');
                if(external){
                    url = external;
                }
                else{
                    url = '/navjson/nav-' + id + '.cms';
                    if(addParams && params && id){
                        url += '?' + params;
                    }
                }
                return url;
            }

            function getData($target, success, addParams){
                $.ajax({
                    url: getURL($target, addParams)
                }).then(function(response){
                    if(typeof success === 'function'){
                        success(response);
                    }
                }).fail(function(e){
                    handleError($target.data('id'));
                });
            }

            function render(data, $target){
                var tmpl,
                    generateHTML = false,
                    dataError = false,
                    html = data,
                    $leftColumnItems,
                    $activeLeftItem,
                    menutype = $target.data('menu-type'),
                    $htmlTarget = $target.find('.' + _constants.cssClasses.dropdown),
                    renderData = data;

                switch(menutype){
                    case 'top-stories':
                        (data.stories && data.stories.length && (generateHTML = true)) || (dataError = true);
                        break;
                    case 'multi-list':
                        (data.lists && data.lists.length && (generateHTML = true)) || (dataError = true);
                        break;
                    case 'simple-list':
                        (data.items && data.items.length && (generateHTML = true)) || (dataError = true);
                        break;
                    case 'two-column':
                        (data.items && data.items.length && (generateHTML = true)) || (dataError = true);
                        break;
                }

                if(dataError){
                    handleError($target.data('id'));
                }
                else if(generateHTML){
                    
                    if(menutype === 'two-column'){
                        $leftColumnItems = $htmlTarget.find('.'+_constants.cssClasses.leftColumn + ' ' + _defaults.domSelectors.leftColumnItem);
                        $activeLeftItem = $leftColumnItems.filter('.'+_constants.cssClasses.hover);
                        
                        $htmlTarget = $htmlTarget.find('.'+_constants.cssClasses.rightColumn);
                        
                        if($activeLeftItem && $activeLeftItem.length){
                            data.activeIndex = $leftColumnItems.index($activeLeftItem);
                        }
                        else{
                            data.activeIndex = 0;   
                        }
                        // two column template is not used anymore as the left column is rendered on server side itself
                        tmpl = $.templates('#top-stories-menu-tmpl');
                        renderData = data.items[data.activeIndex];
                    }
                    else{
                        tmpl = $.templates('#'+menutype+'-menu-tmpl');
                    }
                    
                    html = tmpl.render(renderData);
                }
                
                $htmlTarget.html(html);
                $htmlTarget.removeClass(_constants.cssClasses.loader);
                
                if(data.items && data.items.length){
                    persistStoriesData(data);
                }
                //display active items stories
                if($activeLeftItem && $activeLeftItem.length){
                    handleLeftColumnHover.call($activeLeftItem.get(0));
                }
                else if(menutype === 'two-column'){
                    handleLeftColumnHover.call($leftColumnItems.get(0));
                }

                //load images
                require(['tiljs/plugin/lazy'], function(lazy){
                    lazy.load();
                });
            }

            function loadNavItemMenu($target){
                $target.data('loading', true);
                getData($target, function(response){
                    var data  = response;
    
                    if($target.data('menu-type') !== 'external-html'){
                        data  = getProcessedData(response);
                    }
                    if(!data){
                        return;
                    }
                    $target.data('loaded', true);
                    $target.data('loading', false);
                    render(data, $target);
                });
            }
            
            function highlightFirstItem($target){
                var $leftColumn = $target.find('.' + _constants.cssClasses.leftColumn),
                    firstItem = $leftColumn.find('li').get(0);
                    
                handleLeftColumnHover.call(firstItem);
            }

            // function scrollLeftColumnToTop($target){
            //     var $mCustomScrollbar = $target.find('.mCustomScrollbar ');

            //     if($mCustomScrollbar.length){
            //         $mCustomScrollbar.mCustomScrollbar("scrollTo","top");
            //     }
            // }

            function onHover(e){
                /*var is = require('is');
                if( is.touch() ){
                    e.preventDefault();   
                }*/
                var $target = $(this),
                    $activeItem = $target.find(_config.domSelectors.leftColumnItem + '.' + _constants.cssClasses.hover);
                
                if(!$target.data('loaded') && !$target.data('loading')){
                    loadNavItemMenu($target);
                }
                if(!$activeItem.length){
                    highlightFirstItem($target);
                }
            }

            function onMouseOut(e){
                var $target = $(this);
                $( "#main-nav .active" ).removeClass( "active" );
                // if($target.data('menu-type') === _constants.cssClasses.twoColumn){
                //     scrollLeftColumnToTop($target);
                // }
            }

            function persistStoriesData(data){
                $.each(data.items, function(){
                    _subSectionsData[this.catkey] = {
                        "stories": this.stories,
                        "className": (this.className ? this.className : null),
                        "domain": (this.domain ? this.domain : null),
                        "catkey": this.catkey
                    }
                });
            }
            
            function tinyScrollifyLeftColumns(){
                // $leftColumns = _dom.$navigation.find('.'+_constants.cssClasses.leftColumn);
                // $leftColumns.each(function(){
                //     var $this = $(this);
                    
                //     $this.mCustomScrollbar("destroy");
                //     $this.mCustomScrollbar({
                //         theme:"dark-2", //dark-thin, dark-thick, dark-2
                //         scrollButtons:{ enable: false },
                //         mouseWheel:{ enable: true,scrollAmount: 52 },
                //         advanced: {
                //             updateOnContentResize: true,
                //             updateOnBrowserResize: true
                //         }
                //     });
                // });
            }
            
            function lsValidator (key){
                var d = new Date().getTime();
                try{
                    var ls = JSON.parse(localStorage.getItem(key));
                    var ed = ls.timestamp + (ls.expires * 24 * 60 * 60 * 1000);
                    if (ed > d){return ls.value;}
                    return false;
                }catch(err){
                    LSflush();
                }
            }
            
            function LSflush(){
                var dt = new Date().getTime();
                var patt = new RegExp("taffy_");
                for(_x in localStorage){
                    try{
                        var lsg = JSON.parse(localStorage[_x]);
                        //if(patt.test(_x)){localStorage.removeItem(_x);}
                        if(!lsg.timestamp) continue;
                        ed  = (lsg.expires)?lsg.expires:1;
                        ed = lsg.timestamp + (ed * 24 * 60 * 60 * 1000);
	                    if(dt > ed){
	                        localStorage.removeItem(_x);
	                    }
                    }catch(e){}
                }
            }
            
            function preloadData(){
                function loadData(delay){
                    //$(_config.domSelectors.preloadData).each(function(){
                    var preloadSelector = $(_config.domSelectors.navItem + _config.domSelectors.preloadData).length ? $(_config.domSelectors.navItem + _config.domSelectors.preloadData) : $(_config.domSelectors.preloadData)
                    $(preloadSelector).each(function(){
                        var $this = $(this),
                            id = $this.data('id'),
                            localData = lsValidator(id);
    		            if(localData && nl === undefined){
    		                render(localData, $this);
    		            }else if(delay == 1){
                            getData($this, function(response){
                                var data  = response,
                                    menutype = $this.data('menu-type');
                                
                                if(menutype !== 'external-html'){
                                    data  = getProcessedData(response);
                                    if(menutype === 'top-stories'){
                                        $this.data('loaded', true);
                                    }
                                }
                                if(!data){
                                    return;
                                }
                                
                                render(data, $this);
                                if(id)localStorage.setItem(id, JSON.stringify(data));
                            }, true);
                        }
                    });
                };
                
                //loadData(1);
                //preload data after 3 seconds
                setTimeout(function(){
                    loadData(1);
                }, '3000');
            }
            
            function handleAllMenuScroll(){
                var heightBeforeNav = $('.main-area').offset().top + $('.main-area').outerHeight(true),
                    NavHeight = $('#main-nav').outerHeight(true),
                    windowHeight = $(window).height(),
                    allMenuHeight = _dom.$allMenuContent.outerHeight(),
                    allMenuContentHeight = $('#allsection-data').height(),
                    availableHeightForAllMenu = windowHeight - (heightBeforeNav + NavHeight) - (allMenuHeight - allMenuContentHeight),
                    scrollerTheme = $('#header').hasClass('blackrock') ? 'light' : 'dark-2',
                    scrollerRequired = allMenuHeight > availableHeightForAllMenu;
                
                // enable custom scroll if allmenu height is more that available space, and set height as available
                if ($.fn.mCustomScrollbar && scrollerRequired) {
                    _dom.$allMenuContent.height(availableHeightForAllMenu);
                    _dom.$allMenuContent.mCustomScrollbar("destroy");
                    _dom.$allMenuContent.mCustomScrollbar({
                        theme: scrollerTheme,
                        scrollButtons: {
                        },
                        advanced: {
                            updateOnContentResize: true,
                            updateOnBrowserResize: true
                        }
                    });
                }
            }

            function attachEventHandlers(){
                // require(['tiljs/is'], function(is){
                //     if(is.tablet()){
                //         var $navItem8 = _dom.$navigation.find('li:nth-child(8)');
                //         //8 th item click hack for ipad
                //         $navItem8.on('click', function(){
                //           $navItem8.toggleClass('show-extras');
                //         });

                //         $(document).on('click', function(e){
                //             if(!_dom.$navigation.has($(e.target)).length){
                //                 $navItem8.removeClass('show-extras');
                //             }
                //         });
                //     }
                // });

                // on nav item hover
                //$( this ).find( "li:first" ).addClass( "active" );
                _dom.$navigation.on('mouseover', _config.domSelectors.navItem, onHover);

                //_dom.$navigation.on('mouseout', _config.domSelectors.navItem, onMouseOut);

                _dom.$menuMore.on('mouseover', function(){
                    $(this).toggleClass(_constants.cssClasses.hover);

                    _dom.$allMenuContent.addClass(_constants.cssClasses.hover)

                    if(!_dom.$allMenuContent.data('loaded')){
                        _dom.$allMenuContent.addClass(_constants.cssClasses.loader);
                        $.ajax({
                            url: '/allmenu.cms'
                        }).then(function(response){
                            _dom.$allMenuContent.html(response);
                            _dom.$allMenuContent.removeClass(_constants.cssClasses.loader);
                            _dom.$allMenuContent.data('loaded', true);
                            handleAllMenuScroll();
                        }).fail(function(){

                        });
                    }
                });
                
                 $(document).on('mouseover',function(e){
                    // Return when hovered over all menu 
                    if($(e.target).hasClass('all-sections')){
                        return;
                    }
                    // 
                    if(!(_dom.$allMenu.hasClass(_constants.cssClasses.hover)) &&!$(e.target).closest(_dom.$allMenuContent).length){
                        
                        _dom.$allMenuContent.removeClass(_constants.cssClasses.hover)
                    }
                });
                
                // show menu in mobile view
                require(['tiljs/is'], function(is){
                    var eventType = 'click';
                    if(is.touch()){
                        eventType = 'touchend';
                    }
                    
                    $('.mobiletopnav').on(eventType, function(e){
                       
                        e.preventDefault();
                        _dom.$bottomArea && _dom.$bottomArea.toggleClass('navactive');// for odd changes
                        //e.stopPropagation();
                        if(_dom.$mobileNav.hasClass('navactive')){ // hide the div
                            _dom.$mobileNav.toggleClass('navactive');
                            _dom.$header.find(".m_home_icon").remove();
                            _dom.$header.find('.mobiletopnav').toggleClass('crossnav');
                            $('body,html').css({'overflow':'','position':'static', 'width':''});
                        }else{
                            _dom.$mobileNav.toggleClass('navactive');
                            _dom.$header.find('.mobiletopnav').toggleClass('crossnav');
                            _dom.$header.append("<a href='https://m.timesofindia.com/' class='m_home_icon'></a>");
                             $('body,html').css({'overflow':'hidden', 'position':'fixed', 'width':'100%'});
                            
                        }
                    });
                });
                 
                $(document).on('click', function(e){
                    if( !$(e.target).closest(_dom.$navigation).length ){
                        return;
                    }
                    var is = require('is');
                    var shouldHover = !$(e.target).closest('.no-hover').length;
                    var clickedEle = $(e.target);
                    if( clickedEle.closest(".left-column").length ){
                        var isSubmenuOpen = true;
                        $(".left-column .active").removeClass("active");
                    }
                    else if( clickedEle.closest('.jDropdownOpen').length ){
                        //var isDropdownVisible =  !clickedEle.closest(".left-column").length && clickedEle.closest('.jDropdownOpen').length;
                        var isDropdownVisible =  true;
                    }
                    //var isDropdownVisible =  !clickedEle.closest(".left-column").length && clickedEle.closest('.jDropdownOpen').length;
                    _state.tapTrack = _state.tapTrack || {};
                    _state.tapTrack.latesttap = _state.tapTrack.latesttap || new Date().getTime();
                    if ( 
                            ( !isSubmenuOpen && !isDropdownVisible && shouldHover && is.touch() )
                            //|| ( isSubmenuOpen && !$(e.target).closest('li.active').length && shouldHover && is.touch() )
                            || ( isSubmenuOpen && !clickedEle.parent('li.jDropdownOpen').length && shouldHover && is.touch() )
                    ) {
                        /*
                        var now = new Date().getTime();
                        var timesince = now - _state.tapTrack.latesttap;
                        
                        if( (timesince < 600) && (timesince > 0) ){
                            // double tap   
                            var link = $(e.target).closest('a').attr('href');
                            if(link){
                                window.location.href = link;   
                            }
                            console.log("double tap");
                            _state.tapTrack.latesttap = new Date().getTime();
                        }else{*/
                            //too much time to be a doubletap
                            $(e.target).closest('.left-column li').addClass('active');
                            $(".jDropdownOpen").removeClass('jDropdownOpen');
                            $(e.target).closest('li').addClass('jDropdownOpen');
                            if(!( $(e.target).closest(_dom.$allMenu).length || $(e.target).closest(_dom.$menuMore).length )){
                                _dom.$allMenuContent.removeClass(_constants.cssClasses.hover)
                                _dom.$allMenu.removeClass(_constants.cssClasses.hover)
                            }
                            _state.tapTrack.latesttap = new Date().getTime();
                        //}
                        return false;
                    }
                    
                });
                
                _dom.$allMenu.on('click', function(){
                    // $(this).toggleClass(_constants.cssClasses.hover);
                    _dom.$allMenuContent.toggleClass(_constants.cssClasses.hover);
                    $('body').toggleClass('allmenu-active')
                    if(_dom.$allMenuContent.hasClass(_constants.cssClasses.hover)){
                        _dom.$allMenu.addClass(_constants.cssClasses.hover)
                    }
                    else{
                        _dom.$allMenu.removeClass(_constants.cssClasses.hover)
                    }

                    if(!_dom.$allMenuContent.data('loaded')){
                        _dom.$allMenuContent.addClass(_constants.cssClasses.loader);
                        $.ajax({
                            url: '/allmenu.cms'
                        }).then(function(response){
                            _dom.$allMenuContent.html(response);
                            _dom.$allMenuContent.removeClass(_constants.cssClasses.loader);
                            _dom.$allMenuContent.data('loaded', true);
                            handleAllMenuScroll();
                        }).fail(function(){

                        });
                    }
                });

                //search
                if( !$("#pageType").val() || ( $("#pageType").val() && $("#pageType").val().indexOf("video") == -1 ) ){
                    $(".search-form .search-btn").click(function() {
                        var $searchForm = $(this).closest('.search-form'),
                            isSeachFormActive = $searchForm.hasClass('active'),
                            $input = $searchForm.find('form input#query'),
                            category = TimesApps.getGACategory();

                        if (isSeachFormActive) {
                            $searchForm.removeClass("active");
                            $input.blur();
                            ga('send', 'event', category , 'NavBar-Search', 'Close');
                            //typeof grx == "function" && grx('track', 'event', {category: category, action: 'NavBar-Search', label: 'Close'});
                        }
                        else {
                            $searchForm.addClass("active");
                            $input.focus();
                            ga('send', 'event', category, 'NavBar-Search', 'Click');
                            //typeof grx == "function" && grx('track', 'event', {category: category, action: 'NavBar-Search', label: 'Click'});
                            //scrol page to search bar top
                            // 			setTimeout(function(){
                            // 			    $('body, html').animate({
                            //     			    scrollTop: $searchForm.offset().top
                            //     			}, 400);
                            // 			}, 500);
                        }
                    });
                }
            }
            
            function updateTopStoriesPG(section, action){
                var i,
                    stories = section.stories,
                    storiesLen = stories.length,
                    currStory;
                
                for ( i = 0; i < storiesLen; i++ ) {
                    currStory = stories[i];
                    currStory.pg = (action + currStory.pg.substr(currStory.pg.indexOf('#')));
                }
            }
            
            function handleLeftColumnHover(){
                    var $this = $(this),
                        id = $this.data('id'),
                        external = $this.data('external'),
                         hiderightcolumn = $this.data('hiderightcolumn'),
                        paramLang = $this.data('param-lang'),
                        html,
                        $twoColumn = $this.closest('.' + _constants.cssClasses.dropdown + '.' + _constants.cssClasses.twoColumn),
                        $leftColumn = $twoColumn.find('.' + _constants.cssClasses.leftColumn),
                        $leftItems = $leftColumn.find('li[data-id]'),
                        $rightColumn = $twoColumn.find('.' + _constants.cssClasses.rightColumn),
                        topStoriesTmpl = $.templates('#top-stories-menu-tmpl'),
                        pg = $this.find('[pg]').attr('pg');
                        

                    //e.stopPropagation();
            try{   if (hiderightcolumn == 1) {$twoColumn.addClass("hiderightcolumn");} else { $twoColumn.removeClass("hiderightcolumn");}}catch(e){}
                    $leftItems.removeClass(_constants.cssClasses.hover);
                    $this.addClass(_constants.cssClasses.hover);

                    if(external){
                        if(_external_htmls[id]){
                            $rightColumn.html(_external_htmls[id]);
                            $this.closest('.' + _constants.cssClasses.dropdown).find('.' + _constants.cssClasses.rightColumn).removeClass(_constants.cssClasses.loader);
                            //load images
                            require(['tiljs/plugin/lazy'], function(lazy){
                                lazy.load();
                            });
                        }
                        else{
                            require(['tiljs/cookie'], function(cookie){
                                var _geoloc = cookie.get("geolocation"),
                                    geolan = (window.getCityJSON && getCityJSON[_geoloc] && getCityJSON[_geoloc]['lang']) ? getCityJSON[_geoloc]['lang'] : 'hindi',
                                    url = external;

                                if(paramLang){
                                    url = url + (url.indexOf('?') > -1 ? '&' : '?') + paramLang + '=' + geolan;
                                }

                                $this.closest('.' + _constants.cssClasses.dropdown).find('.' + _constants.cssClasses.rightColumn).html('').addClass(_constants.cssClasses.loader);

                                $.ajax({
                                    url: url
                                }).then(function(response){
                                    _external_htmls[id] = response;
                                    $rightColumn.html(response);
                                    $this.closest('.' + _constants.cssClasses.dropdown).find('.' + _constants.cssClasses.rightColumn).removeClass(_constants.cssClasses.loader);
                                    //load images
                                    require(['tiljs/plugin/lazy'], function(lazy){
                                        lazy.load();
                                    });
                                }).fail(function(){
                                    handleError(id, _constants.cssClasses.twoColumn);
                                })
                            });
                        }
                    }
                    else{
                        if(_subSectionsData[id] && _subSectionsData[id].stories && _subSectionsData[id].stories.length){
                            // update stories pg as per guidelines
                            updateTopStoriesPG(_subSectionsData[id], pg.substr(0, pg.indexOf('#')));
                            
                            html = topStoriesTmpl.render(_subSectionsData[id]);
                            $rightColumn.html(html);
                            $this.closest('.' + _constants.cssClasses.dropdown).find('.' + _constants.cssClasses.rightColumn).removeClass(_constants.cssClasses.loader);
                            require(['tiljs/plugin/lazy'], function(lazy){
                                lazy.load();
                            });
                        }
                        else{
                            handleError(id, _constants.cssClasses.twoColumn);
                        }
                    }

                }

            function attachLeftColumnEventHandlers(){
                $leftColumns = _dom.$navigation.find('.'+_constants.cssClasses.leftColumn);
                $leftColumns.each(function(){
                    var $this = $(this);
    
                    $this.on('mouseover', _defaults.domSelectors.leftColumnItem, function(e){
                        e.stopPropagation();
                        handleLeftColumnHover.call(this);
                    });
                });
            }

            function enableSticky($target){
                var stickyTop = $target.offset() ? $target.offset().top : 0,
                    windowTop;

                //set header class if sub-nav exists
                //_dom.$subNav.length && _dom.$header.addClass('has-sub-nav');

                $win.scroll( function () {
                    windowTop = $win.scrollTop();
                    if(!$target.hasClass( 'sticky' )){
                        stickyTop = $target.offset() ? $target.offset().top : 0;
                    }
                    if( windowTop > stickyTop ) {
                        //_dom.$header.removeClass('has-sub-nav');
                        $target.addClass( 'sticky' );
                        //$(".search-form").hasClass('active') && $(".search-form .search-btn").trigger('click');
                    } else {
                        $target.removeClass( 'sticky' );
                        window.TimesApps.NavigationManager.handleCyclicItems();
                        //set header class if sub-nav exists
                        //_dom.$subNav.length && _dom.$header.addClass('has-sub-nav');
                    }
                });
            }
            
            function loadSubsectionsFromLocalStorage(){
                $('.'+_constants.cssClasses.leftColumn + ' ' + _defaults.domSelectors.leftColumnItem).each(function(){
                    var $item  = $(this),
                        id = $item.data('id'),
                        lsValue = (function(){
                            try{
                                return JSON.parse(localStorage.getItem(id));
                            }
                            catch(e){
                                return null;
                            }
                        })();
                        
                    if(lsValue && lsValue.items && lsValue.items.length){
                        persistStoriesData(lsValue);
                    }
                });
            }
            
            function handleCyclic($menu) {
                var menuID = $menu.attr('id'),
                    menuLeft = $menu.offset().left,
                    menuWidth = $menu.width(),
                    $menuList = $menu.children('ul.show-extra'),
                    menuListWidth = $menuList.width(),
                    $menuItems = $menuList.children(_config.domSelectors.menuItem),
                    $allSectionsItem = $menuList.find('[data-more-nav]'),
                    $cyclicContainer = $menu.find(_config.domSelectors.cyclicContainer),
                    cyclicContainerWidth = $cyclicContainer.width(),
                    $cyclicList = $cyclicContainer.find('.cyclicList'),
                    $cyclicItems = $cyclicList.children(_config.domSelectors.menuItem),
                    // cyclicContainerWidth subtracted, assuming cyclic would be shown
                   // rightEndLimit = menuLeft + menuWidth - cyclicContainerWidth,
                    rightEndLimit = menuLeft + menuListWidth - cyclicContainerWidth,
                    adjustment = 0,
                    cyclicMarkIndex;
            
                if(menuID === 'main-nav'){
                    //adjustment = _dom.$headerSearch.length ? _dom.$headerSearch.outerWidth(true): 50; // considering search icon on the right side
                    if($allSectionsItem){
                        adjustment += $allSectionsItem.outerWidth(true);
                    }
                }
                
                // move all items out from cyclic nav, if any
                if($cyclicItems.length){
                    $cyclicItems.insertAfter($menuItems.last());
                    // update $menuItems
                    $menuItems = $menuList.children(_config.domSelectors.menuItem);
                }
            
                // find item index starting from which, all items are to be moved into cyclic container
                $menuItems.each(function(index, item){
                    var $item = $(item),
                        itemLeft = $item.offset().left,
                        itemWidth = $item.outerWidth(true);
                    
                    // if last item and cyclic menu not required yet
                    // update the rifht end limit by adding cyclic menu's width
                    // cyclicContainerWidth added, knowing cyclic not needed till now
                    if(index === ($menuItems.length - 1) && !cyclicMarkIndex){
                        rightEndLimit += cyclicContainerWidth;
                    }
                    
                    if((itemLeft + itemWidth + adjustment) > rightEndLimit && !cyclicMarkIndex){
                        cyclicMarkIndex = index;
                        return false;
                    }
                });
            
                if(cyclicMarkIndex){
                    // move items after marked index into cyclic
                    $menuItems.filter(':gt('+ (cyclicMarkIndex - 1) +')').appendTo($cyclicList);
                    $cyclicContainer.removeClass('hidenav');
                }
                else{
                    $cyclicContainer.addClass('hidenav');
                }
                // navigation flicker fix by chankey 
                _dom && _dom.$navigation && _dom.$navigation.length && _dom.$navigation.children('ul').removeAttr('style');
                
            }

            MODULE.NavigationManager = {
                init: function(){
                    _config = getFinalConfig();
                    populateDOMVariables();
                    attachEventHandlers();
                    loadSubsectionsFromLocalStorage();
                    preloadData();
                    tinyScrollifyLeftColumns();
                    attachLeftColumnEventHandlers();
                    //enable header sticky behaviour
                    enableSticky(_dom.$bottomArea);
                    //initialize navsearchbox module, just by adding dependency
                    if( !$("#pageType").val() || ( $("#pageType").val() && $("#pageType").val().indexOf("video") == -1 ) ){
                        require(['navsearchbox'], function(navsearchbox){});
                    }
                    
                    // add show-extra class on navigations on load
                    _dom.$navigation && _dom.$navigation.length && _dom.$navigation.children('ul').addClass('show-extra');
                    _dom.$subNav && _dom.$subNav.length && _dom.$subNav.children('ul').addClass('show-extra');
                },
                handleCyclicItems : function(){
                   require(["tiljs/is"], function (is) {
                        if(!is.mobile()){
                            _dom.$navigation && _dom.$navigation.length && handleCyclic(_dom.$navigation);
                            _dom.$subNav && _dom.$subNav.length && handleCyclic(_dom.$subNav);
                        }    
                    });
                }
            }

        })(window.TimesApps, window, jQuery);
        
        // init new navigation module
        if($('#main-nav').length){
            $(function(){
                setTimeout(function(){
                    window.TimesApps.NavigationManager.init();
                    window.TimesApps.NavigationManager.handleCyclicItems();
                });
            });
            require(['event'],function(event){
                event.subscribe("window.resize", window.TimesApps.NavigationManager.handleCyclicItems);
                
                window.top.adsCallback = function(adtype){
                    if(typeof adtype!='undefined' && adtype =="gutterclose"){
                        try{if(primePaymentFlow){primePaymentFlow.show_ad_free_nudge(true)} }catch(e){}
                    }
                    if(typeof adtype!='undefined' && adtype =="expandoclose"){
                        try{if(primePaymentFlow){primePaymentFlow.show_ad_free_nudge(true)}}catch(e){}
                    }
                    if(typeof adtype!='undefined' && adtype =="gutter"){
                        event.publish("window.early_resize");
                        setTimeout(function(){
                            // window.TimesApps.NavigationManager.handleCyclicItems();
                            // $(window).trigger('resize');
                            event.publish("window.resize");
                            
                        },1500);
                        setTimeout(function(){if(typeof redraw_graphs_pollution === 'function'){redraw_graphs_pollution();}},1000);                
                    }
                };
                
            });
            
        }
	} );

	require(["index"]);
    var TimesApps = window.TimesApps || {};
    TimesApps.SavingsAPI = (function() {
        var fn, returnFn;
        var primePagesTMPL = ['Prime-articleshow'];
        var readyToFire = false;
        var callQueue = [];
        
        fn = {
            fireAPI: function(msid) {
                if (typeof toiprops === 'object' && toiprops.toipr === 1) {
                    if (!readyToFire) {
                        callQueue.push({ msid: msid });
                        return;
                    }
                    require(['cookie'],function(cookie){
                	    var ssoid = cookie.get("ssoid") || cookie.get("ssoId");
                	    var ticketId = cookie.get("TicketId");
                	    var isPrimePage = (primePagesTMPL.indexOf(toiprops._Tmpl_pg) > -1) ? true :false;
                        var data = {
                            user: {
                                ssoId: ssoid,
                                ticketId: ticketId
                            },
                            otherDetails: {
                            articleId: msid || '',
                            articleName: document.title,
                            plusArticle: isPrimePage
                            }
                        };
                        
                        $.ajax({
                            url: 'https://api.timesprime.com/prime/external/updateTOISavings', 
                            data: JSON.stringify(data), 
                            type: 'POST', 
                            contentType: 'application/json',
                            dataType: "json"
                        });
                	});   
                }   
            },
            fireCallsOnReady: function() {
                if (callQueue && callQueue.length > 0) {
                    for (var i = 0; i < callQueue.length; i++) {
                        fn.fireAPI(callQueue[i].msid);
                    }
                }
            },
            initializeApi: function() {
                // ToDo: For testing purpose only. Remove this while taking live.
                // toiprops.toipr = 1;
                if (typeof toiprops === 'object' && toiprops.toipr === 1) {
                    readyToFire = true;
                    fn.fireCallsOnReady();
                }
            },
            addCallsToQueue: function(msid) {
                fn.fireAPI(msid);
            }
        };
        
        returnFn = {
            initializeApi: function() {
                 fn.initializeApi();
             },
            addCallsToQueue: function(msid) {
                fn.addCallsToQueue(msid);
            },
        };
        
        //fn.initializeApi();
        
        return returnFn;
})();  
    TimesApps.checkGdprAndCall = function(callback, callbackForEu, checkForUserConsent){
    var geoContCookieName = 'geo_continent';
    
    if ( 
        window.TimesGDPR 
        && TimesGDPR.common.consentModule.gdprCallback
    ){
        TimesGDPR.common.consentModule.gdprCallback(function(data){
            if(data && data.isEUuser && typeof callbackForEu == "function" ){
                callbackForEu();
            }else if( !data.isEUuser && typeof callback == "function" ){
                callback();
            }
        });
    }else if( window.self != window.parent ){
        /*
        * current window is a TOI iframe
        * & doesn't has gdpr_js
        * checking cookie for EU
        */
        var continent = ( toiprops && toiprops.cookie && toiprops.cookie.get(geoContCookieName) ) || "";
        var isEUuser = continent.toUpperCase() === "EU";

        if(isEUuser && typeof callbackForEu == "function"){
            callbackForEu();
        }
    }else if(typeof callbackForEu == "function"){
        callbackForEu();
    }
}

    TimesApps.loadChartBeatCalls = function() {
        return true;
            // var chartBeatInitFn = function() {
            //     require(["tiljs/load"], function(loaderMod){
            //         loaderMod.js('https://static.chartbeat.com/js/chartbeat_video.js', "", "", "async")
            //     });   
            // }
            
            // TimesApps.checkGdprAndCall(chartBeatInitFn);
        };

    TimesApps.thirdPartyAnalytics = (function(){
        var util, fn;
        
        config = {
            urls : [
                    //"//cdn.mouseflow.com/projects/343b6336-6580-4038-bacc-8315a8b99d5e.js",                
                ]
        }
        
        fn = {
            _loadScripts : function(){
                for(var i=0; i < config.urls.length; i++){
                    require(["tiljs/load"], function(loaderMod){
                       loaderMod.js( config.urls[this.i], "", "", "async") 
                    }.bind({i:i}));
                }
            },
            _loadMouseflow : function(){
                window._mfq = window._mfq || [];
                
                require(["tiljs/load"], function(){
                    var mf = document.createElement("script");
                    mf.type = "text/javascript"; mf.defer = true;
                    mf.src = "//cdn.mouseflow.com/projects/ba318f2d-fc93-4f20-a07b-01ff83365981.js";
                    document.getElementsByTagName("head")[0].appendChild(mf);
                }); 
            },
            _init: function(){
                fn._loadMouseflow();
                fn._loadScripts();
            }
        }
        
        
        api = {
            init : function(){ fn._init(); }
        }
        
        return api;
    })();
    
    //$(window).on('load', TimesApps.thirdPartyAnalytics.init);
    
	TimesApps.comscoreTrackingConfig = {
        comscoreCustomerId : "6036484",
        stationTitle : "Etimes-Web",
        publisherName : "The Times of India",
        contentGenre : "News",
        c3 : "10"
	};
	
	
	
	 

	